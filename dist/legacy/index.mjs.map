{
  "version": 3,
  "sources": ["../../src/legacy/index.ts", "../../src/serialization/ObserverSerializer.ts", "../../src/serialization/SoASerializer.ts", "../../src/legacy/serialization.ts"],
  "sourcesContent": ["import {\r\n  ComponentRef,\r\n  observe,\r\n  onAdd,\r\n  onRemove,\r\n  query,\r\n  EntityId,\r\n  addComponent as ecsAddComponent,\r\n  hasComponent as ecsHasComponent,\r\n  removeComponent as ecsRemoveComponent\r\n} from 'bitecs'\r\n\r\nexport interface IWorld { }\r\n\r\nexport type ComponentProp = TypedArray | Array<TypedArray>\r\n\r\nexport interface IComponentProp {\r\n}\r\n\r\nexport interface IComponent {\r\n}\r\n\r\nexport type Component = IComponent | ComponentType<ISchema>\r\n\r\nexport type QueryModifier = (c: IComponent[]) => IComponent | QueryModifier\r\n\r\nexport type Query<W extends IWorld = IWorld> = (world: W, clearDiff?: Boolean) => number[]\r\n\r\nexport const $modifier = Symbol(\"$modifier\")\r\n\r\nfunction modifier(c, mod) {\r\n  const inner = () => [c, mod]\r\n  inner[$modifier] = true\r\n  return inner\r\n}\r\n\r\nexport const Not = (c: Component | ISchema): QueryModifier => modifier(c, 'not')\r\nexport const Or = (c: Component | ISchema): QueryModifier => modifier(c, 'or')\r\nexport const Changed = (c: Component | ISchema): QueryModifier => modifier(c, 'changed')\r\n\r\nexport function defineQuery<W extends IWorld = IWorld>(components: (Component | QueryModifier)[]): Query<W> {\r\n  const queryFn = (world: IWorld) => query(world, components)\r\n  queryFn.components = components\r\n  return queryFn as unknown as Query<W>\r\n}\r\n\r\nexport function enterQuery<W extends IWorld = IWorld>(queryFn: Query<W>): Query<W> {\r\n  let queue: number[] = []\r\n  const initSet = new WeakSet<IWorld>()\r\n  return (world: W) => {\r\n    if (!initSet.has(world)) {\r\n      observe(world, onAdd(...(queryFn as any).components), (eid: EntityId) => queue.push(eid))\r\n      initSet.add(world)\r\n    }\r\n    const results = queue.slice()\r\n    queue.length = 0\r\n    return results\r\n  }\r\n}\r\n\r\nexport function exitQuery<W extends IWorld = IWorld>(queryFn: Query<W>): Query<W> {\r\n  let queue: number[] = []\r\n  const initSet = new WeakSet<IWorld>()\r\n  return (world: W) => {\r\n    if (!initSet.has(world)) {\r\n      observe(world, onRemove(...(queryFn as any).components), (eid: EntityId) => queue.push(eid))\r\n      initSet.add(world)\r\n    }\r\n    const results = queue.slice()\r\n    queue.length = 0\r\n    return results\r\n  }\r\n}\r\n\r\nexport const addComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\r\n  ecsAddComponent(world, eid, component)\r\n\r\nexport const hasComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\r\n  ecsHasComponent(world, eid, component)\r\n\r\nexport const removeComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\r\n  ecsRemoveComponent(world, eid, component)\r\n\r\nexport interface ISchema {\r\n  [key: string]: Type | ListType | ISchema\r\n}\r\n\r\nexport type Type =\r\n  | 'i8'\r\n  | 'ui8'\r\n  | 'ui8c'\r\n  | 'i16'\r\n  | 'ui16'\r\n  | 'i32'\r\n  | 'ui32'\r\n  | 'f32'\r\n  | 'f64'\r\n  | 'eid'\r\n\r\nexport type ListType = readonly [Type, number];\r\n\r\nexport const Types = {\r\n  i8: 'i8' as Type,\r\n  ui8: 'ui8' as Type,\r\n  ui8c: 'ui8c' as Type,\r\n  i16: 'i16' as Type,\r\n  ui16: 'ui16' as Type,\r\n  i32: 'i32' as Type,\r\n  ui32: 'ui32' as Type,\r\n  f32: 'f32' as Type,\r\n  f64: 'f64' as Type,\r\n  eid: 'eid' as Type\r\n};\r\n\r\nexport type TypedArray =\r\n  | Uint8Array\r\n  | Int8Array\r\n  | Uint8ClampedArray\r\n  | Int16Array\r\n  | Uint16Array\r\n  | Int32Array\r\n  | Uint32Array\r\n  | Float32Array\r\n  | Float64Array\r\n\r\nexport type ArrayByType = {\r\n  'i8': Int8Array;\r\n  'ui8': Uint8Array;\r\n  'ui8c': Uint8ClampedArray;\r\n  'i16': Int16Array;\r\n  'ui16': Uint16Array;\r\n  'i32': Int32Array;\r\n  'ui32': Uint32Array;\r\n  'f32': Float32Array;\r\n  'f64': Float64Array;\r\n  'eid': Uint32Array;\r\n}\r\n\r\n// ... existing code ...\r\n\r\nconst arrayByTypeMap: { [key in Type]: any } = {\r\n  'i8': Int8Array,\r\n  'ui8': Uint8Array,\r\n  'ui8c': Uint8ClampedArray,\r\n  'i16': Int16Array,\r\n  'ui16': Uint16Array,\r\n  'i32': Int32Array,\r\n  'ui32': Uint32Array,\r\n  'f32': Float32Array,\r\n  'f64': Float64Array,\r\n  'eid': Uint32Array,\r\n};\r\n\r\nexport type ComponentType<T extends ISchema> = {\r\n  [key in keyof T]:\r\n  T[key] extends Type\r\n  ? ArrayByType[T[key]]\r\n  : T[key] extends [infer RT, number]\r\n  ? RT extends Type\r\n  ? Array<ArrayByType[RT]>\r\n  : unknown\r\n  : T[key] extends ISchema\r\n  ? ComponentType<T[key]>\r\n  : unknown;\r\n};\r\n\r\nexport const defineComponent = <T extends ISchema>(schema: T, max: number = 1e5): ComponentType<T> => {\r\n  const createSoA = <U extends ISchema>(schema: U, max: number): ComponentType<U> => {\r\n    const component = {} as ComponentType<U>\r\n    for (const key in schema) {\r\n      if (Array.isArray(schema[key])) {\r\n        const [type, length] = schema[key] as [Type, number]\r\n        component[key] = Array.from({ length }, () => new arrayByTypeMap[type](max)) as any\r\n      } else if (typeof schema[key] === 'object') {\r\n        component[key] = createSoA(schema[key] as ISchema, max) as any\r\n      } else {\r\n        const type = schema[key] as Type;\r\n        const TypeConstructor = arrayByTypeMap[type];\r\n        if (TypeConstructor) {\r\n          component[key] = new TypeConstructor(max) as any;\r\n        } else {\r\n          throw new Error(`Unsupported type: ${schema[key]}`);\r\n        }\r\n      }\r\n    }\r\n    return component\r\n  }\r\n  return createSoA(schema, max)\r\n}\r\n\r\nexport * from './serialization'", "import {\r\n    addComponent,\r\n    removeComponent,\r\n    addEntity,\r\n    removeEntity,\r\n    observe,\r\n    onAdd,\r\n    onRemove,\r\n    World,\r\n    ComponentRef,\r\n    entityExists,\r\n    isRelation,\r\n    getRelationTargets,\r\n    Wildcard,\r\n    EntityId\r\n} from 'bitecs'\r\n\r\nenum OperationType {\r\n    AddEntity = 0,\r\n    RemoveEntity = 1,\r\n    AddComponent = 2,\r\n    RemoveComponent = 3,\r\n    AddRelation = 4,\r\n    RemoveRelation = 5,\r\n}\r\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\r\n\r\n/**\r\n * Serializes relation data for a specific entity\r\n */\r\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\r\n    if (!data) return offset\r\n    \r\n    // Handle array data (AoS) - defaults to f64\r\n    if (Array.isArray(data)) {\r\n        const value = data[eid]\r\n        if (value !== undefined) {\r\n            dataView.setFloat64(offset, value)\r\n            return offset + 8\r\n        }\r\n        return offset\r\n    }\r\n    \r\n    // Handle object data (SoA)\r\n    if (typeof data === 'object') {\r\n        const keys = Object.keys(data).sort()\r\n        for (const key of keys) {\r\n            const arr = data[key]\r\n            const value = arr[eid]\r\n            \r\n            if (value !== undefined) {\r\n                if (arr instanceof Int8Array || $i8 in arr) {\r\n                    dataView.setInt8(offset, value)\r\n                    offset += 1\r\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\r\n                    dataView.setUint8(offset, value)\r\n                    offset += 1\r\n                } else if (arr instanceof Int16Array || $i16 in arr) {\r\n                    dataView.setInt16(offset, value)\r\n                    offset += 2\r\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\r\n                    dataView.setUint16(offset, value)\r\n                    offset += 2\r\n                } else if (arr instanceof Int32Array || $i32 in arr) {\r\n                    dataView.setInt32(offset, value)\r\n                    offset += 4\r\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\r\n                    dataView.setUint32(offset, value)\r\n                    offset += 4\r\n                } else if (arr instanceof Float32Array || $f32 in arr) {\r\n                    dataView.setFloat32(offset, value)\r\n                    offset += 4\r\n                } else {\r\n                    // Default to f64\r\n                    dataView.setFloat64(offset, value)\r\n                    offset += 8\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return offset\r\n}\r\n\r\n/**\r\n * Deserializes relation data for a specific entity\r\n */\r\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\r\n    if (!data) return offset\r\n    \r\n    // Handle array data (AoS) - defaults to f64\r\n    if (Array.isArray(data)) {\r\n        data[eid] = dataView.getFloat64(offset)\r\n        return offset + 8\r\n    }\r\n    \r\n    // Handle object data (SoA)\r\n    if (typeof data === 'object') {\r\n        const keys = Object.keys(data).sort()\r\n        for (const key of keys) {\r\n            const arr = data[key]\r\n            \r\n            if (arr instanceof Int8Array || $i8 in arr) {\r\n                arr[eid] = dataView.getInt8(offset)\r\n                offset += 1\r\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\r\n                arr[eid] = dataView.getUint8(offset)\r\n                offset += 1\r\n            } else if (arr instanceof Int16Array || $i16 in arr) {\r\n                arr[eid] = dataView.getInt16(offset)\r\n                offset += 2\r\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\r\n                arr[eid] = dataView.getUint16(offset)\r\n                offset += 2\r\n            } else if (arr instanceof Int32Array || $i32 in arr) {\r\n                arr[eid] = dataView.getInt32(offset)\r\n                offset += 4\r\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\r\n                arr[eid] = dataView.getUint32(offset)\r\n                offset += 4\r\n            } else if (arr instanceof Float32Array || $f32 in arr) {\r\n                arr[eid] = dataView.getFloat32(offset)\r\n                offset += 4\r\n            } else {\r\n                // Default to f64\r\n                arr[eid] = dataView.getFloat64(offset)\r\n                offset += 8\r\n            }\r\n        }\r\n    }\r\n    \r\n    return offset\r\n}\r\n\r\n/**\r\n * Creates a serializer for observing and serializing changes in networked entities.\r\n */\r\nexport const createObserverSerializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], buffer = new ArrayBuffer(1024 * 1024 * 100)) => {\r\n    const dataView = new DataView(buffer)\r\n    let offset = 0\r\n    const queue: [number, OperationType, number, number?, any?][] = []\r\n    const relationTargets = new Map<number, Map<number, number>>()\r\n    \r\n    observe(world, onAdd(networkedTag), (eid: EntityId) => {\r\n        queue.push([eid, OperationType.AddEntity, -1])\r\n    })\r\n\r\n    observe(world, onRemove(networkedTag), (eid: EntityId) => {\r\n        queue.push([eid, OperationType.RemoveEntity, -1])\r\n        relationTargets.delete(eid)\r\n    })\r\n\r\n    components.forEach((component, i) => {\r\n        if (isRelation(component)) {\r\n            observe(world, onAdd(networkedTag, component(Wildcard)), (eid: EntityId) => {\r\n                const targets = getRelationTargets(world, eid, component)\r\n                for (const target of targets) {\r\n                    if (!relationTargets.has(eid)) {\r\n                        relationTargets.set(eid, new Map())\r\n                    }\r\n                    relationTargets.get(eid).set(i, target)\r\n                    const relationData = component(target)\r\n                    queue.push([eid, OperationType.AddRelation, i, target, relationData])\r\n                }\r\n            })\r\n\r\n            observe(world, onRemove(networkedTag, component(Wildcard)), (eid: EntityId) => {\r\n                const targetMap = relationTargets.get(eid)\r\n                if (targetMap) {\r\n                    const target = targetMap.get(i)\r\n                    if (target !== undefined) {\r\n                        queue.push([eid, OperationType.RemoveRelation, i, target])\r\n                        targetMap.delete(i)\r\n                        if (targetMap.size === 0) {\r\n                            relationTargets.delete(eid)\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        } else {\r\n            observe(world, onAdd(networkedTag, component), (eid: EntityId) => {\r\n                queue.push([eid, OperationType.AddComponent, i])\r\n            })\r\n\r\n            observe(world, onRemove(networkedTag, component), (eid: EntityId) => {\r\n                queue.push([eid, OperationType.RemoveComponent, i])\r\n            })\r\n        }\r\n    })\r\n    \r\n    return () => {\r\n        offset = 0\r\n        \r\n        for (let i = 0; i < queue.length; i++) {\r\n            const [entityId, type, componentId, targetId, relationData] = queue[i]\r\n            dataView.setUint32(offset, entityId)\r\n            offset += 4\r\n            dataView.setUint8(offset, type)\r\n            offset += 1\r\n            if (type === OperationType.AddComponent || \r\n                type === OperationType.RemoveComponent || \r\n                type === OperationType.AddRelation ||\r\n                type === OperationType.RemoveRelation) {\r\n                dataView.setUint8(offset, componentId)\r\n                offset += 1\r\n                \r\n                if (type === OperationType.AddRelation || type === OperationType.RemoveRelation) {\r\n                    dataView.setUint32(offset, targetId)\r\n                    offset += 4\r\n                    \r\n                    if (type === OperationType.AddRelation && relationData) {\r\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        queue.length = 0\r\n\r\n        return buffer.slice(0, offset)\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deserializer for applying serialized changes to a world.\r\n */\r\nexport const createObserverDeserializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], constructorMapping?: Map<number, number>) => {\r\n    let entityIdMapping = constructorMapping || new Map<number, number>()\r\n    \r\n    return (packet: ArrayBuffer, overrideMapping?: Map<number, number>) => {\r\n        // Allow overriding the mapping for this call\r\n        const currentMapping = overrideMapping || entityIdMapping\r\n        const dataView = new DataView(packet)\r\n        let offset = 0\r\n\r\n        while (offset < packet.byteLength) {\r\n            const packetEntityId = dataView.getUint32(offset)\r\n            offset += 4\r\n            const operationType = dataView.getUint8(offset)\r\n            offset += 1\r\n            let componentId = -1\r\n            let targetId = -1\r\n            \r\n            if (operationType === OperationType.AddComponent || \r\n                operationType === OperationType.RemoveComponent ||\r\n                operationType === OperationType.AddRelation ||\r\n                operationType === OperationType.RemoveRelation) {\r\n                componentId = dataView.getUint8(offset)\r\n                offset += 1\r\n                \r\n                if (operationType === OperationType.AddRelation || operationType === OperationType.RemoveRelation) {\r\n                    targetId = dataView.getUint32(offset)\r\n                    offset += 4\r\n                }\r\n            }\r\n\r\n            const component = components[componentId]\r\n            let worldEntityId = currentMapping.get(packetEntityId)\r\n\r\n            if (operationType === OperationType.AddEntity) {\r\n                if (worldEntityId === undefined) {\r\n                    worldEntityId = addEntity(world)\r\n                    currentMapping.set(packetEntityId, worldEntityId)\r\n                    addComponent(world, worldEntityId, networkedTag)\r\n                } else {\r\n                    // TODO: figure out if this should ignore, throw, warn, or if the observer serializer should maybe do a snapshot on first call?\r\n                    // throw new Error(`Entity with ID ${packetEntityId} already exists in the mapping.`)\r\n                    console.warn(`Attempted to deserialize addEntity with ID ${packetEntityId}, but it has already been deserialzied and exists in the mapping.`)\r\n                }\r\n            } else if (worldEntityId !== undefined && entityExists(world, worldEntityId)) {\r\n                if (operationType === OperationType.RemoveEntity) {\r\n                    removeEntity(world, worldEntityId)\r\n                    currentMapping.delete(packetEntityId)\r\n                } else if (operationType === OperationType.AddComponent) {\r\n                    addComponent(world, worldEntityId, component)\r\n                } else if (operationType === OperationType.RemoveComponent) {\r\n                    removeComponent(world, worldEntityId, component)\r\n                } else if (operationType === OperationType.AddRelation) {\r\n                    const worldTargetId = currentMapping.get(targetId)\r\n                    if (worldTargetId !== undefined) {\r\n                        const relationComponent = component(worldTargetId)\r\n                        addComponent(world, worldEntityId, relationComponent)\r\n                        offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\r\n                    }\r\n                } else if (operationType === OperationType.RemoveRelation) {\r\n                    const worldTargetId = currentMapping.get(targetId)\r\n                    if (worldTargetId !== undefined) {\r\n                        removeComponent(world, worldEntityId, component(worldTargetId))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return currentMapping\r\n    }\r\n}\r\n", "\r\n/**\r\n * Symbols representing different data types for serialization.\r\n */\r\nexport const $u8 = Symbol.for('bitecs-u8'), $i8 = Symbol.for('bitecs-i8'), $u16 = Symbol.for('bitecs-u16'), $i16 = Symbol.for('bitecs-i16'),\r\n    $u32 = Symbol.for('bitecs-u32'), $i32 = Symbol.for('bitecs-i32'), $f32 = Symbol.for('bitecs-f32'), $f64 = Symbol.for('bitecs-f64'),\r\n    $arr = Symbol.for('bitecs-arr')\r\n\r\n/**\r\n * Union type of all possible TypedArray types.\r\n */\r\nexport type TypedArray = \r\n    | Int8Array\r\n    | Uint8Array\r\n    | Int16Array\r\n    | Uint16Array\r\n    | Int32Array\r\n    | Uint32Array\r\n    | Float32Array\r\n    | Float64Array\r\n\r\n/**\r\n * Union type of all possible type symbols.\r\n */\r\nexport type TypeSymbol = typeof $u8 | typeof $i8 | typeof $u16 | typeof $i16 | typeof $u32 | typeof $i32 | typeof $f32 | typeof $f64\r\n\r\n/**\r\n * Type representing a primitive brand, which is either a number array with a symbol property or a TypedArray.\r\n */\r\nexport type PrimitiveBrand = (number[] & { [key: symbol]: true }) | TypedArray\r\n\r\n/**\r\n * Type representing a component reference, which is a record mapping string keys to either\r\n * a PrimitiveBrand (number array with type symbol) or TypedArray values.\r\n * Used to define the structure of components that can be serialized.\r\n */\r\ntype ComponentRef = Record<string, PrimitiveBrand | TypedArray>\r\n\r\n/**\r\n * Creates a function that tags an array with a type symbol for serialization.\r\n * @param {TypeSymbol} symbol - The type symbol to tag the array with.\r\n * @returns {Function} A function that tags an array with the given type symbol.\r\n */\r\nconst typeTagForSerialization = (symbol: TypeSymbol) => (a: number[] = []): PrimitiveBrand =>\r\n    Object.defineProperty(a, symbol, { value: true, enumerable: false, writable: false, configurable: false }) as PrimitiveBrand\r\n\r\n/**\r\n * Functions to create arrays tagged with specific type symbols.\r\n */\r\nexport const u8 = typeTagForSerialization($u8),     i8 = typeTagForSerialization($i8),\r\n            u16 = typeTagForSerialization($u16),    i16 = typeTagForSerialization($i16),\r\n            u32 = typeTagForSerialization($u32),    i32 = typeTagForSerialization($i32),\r\n            f32 = typeTagForSerialization($f32),    f64 = typeTagForSerialization($f64)\r\n\r\n/**\r\n * Object containing setter functions for each data type.\r\n */\r\nconst typeSetters = {\r\n    [$u8]: (view: DataView, offset: number, value: number) => { view.setUint8(offset, value); return 1; },\r\n    [$i8]: (view: DataView, offset: number, value: number) => { view.setInt8(offset, value); return 1; },\r\n    [$u16]: (view: DataView, offset: number, value: number) => { view.setUint16(offset, value); return 2; },\r\n    [$i16]: (view: DataView, offset: number, value: number) => { view.setInt16(offset, value); return 2; },\r\n    [$u32]: (view: DataView, offset: number, value: number) => { view.setUint32(offset, value); return 4; },\r\n    [$i32]: (view: DataView, offset: number, value: number) => { view.setInt32(offset, value); return 4; },\r\n    [$f32]: (view: DataView, offset: number, value: number) => { view.setFloat32(offset, value); return 4; },\r\n    [$f64]: (view: DataView, offset: number, value: number) => { view.setFloat64(offset, value); return 8; }\r\n}\r\n\r\n/**\r\n * Object containing getter functions for each data type.\r\n */\r\nconst typeGetters = {\r\n    [$u8]: (view: DataView, offset: number) => ({ value: view.getUint8(offset), size: 1 }),\r\n    [$i8]: (view: DataView, offset: number) => ({ value: view.getInt8(offset), size: 1 }),\r\n    [$u16]: (view: DataView, offset: number) => ({ value: view.getUint16(offset), size: 2 }),\r\n    [$i16]: (view: DataView, offset: number) => ({ value: view.getInt16(offset), size: 2 }),\r\n    [$u32]: (view: DataView, offset: number) => ({ value: view.getUint32(offset), size: 4 }),\r\n    [$i32]: (view: DataView, offset: number) => ({ value: view.getInt32(offset), size: 4 }),\r\n    [$f32]: (view: DataView, offset: number) => ({ value: view.getFloat32(offset), size: 4 }),\r\n    [$f64]: (view: DataView, offset: number) => ({ value: view.getFloat64(offset), size: 8 })\r\n}\r\n\r\nexport const array = <T extends any[] = []>(type: TypeSymbol = $f32)=>  {\r\n    const arr = [];\r\n\r\n    Object.defineProperty(arr, $arr, { value: type, enumerable: false, writable: false, configurable: false })\r\n\r\n    return arr as T[];\r\n}\r\n\r\n/**\r\n * Checks if a value is a TypedArray or branded array\r\n */\r\nfunction isTypedArrayOrBranded(arr: any): arr is PrimitiveBrand | TypedArray {\r\n    return arr && (\r\n        ArrayBuffer.isView(arr) || \r\n        (Array.isArray(arr) && typeof arr === 'object')\r\n    )\r\n}\r\n\r\n/**\r\n * Gets the type symbol for an array\r\n */\r\nfunction getTypeForArray(arr: PrimitiveBrand | TypedArray): TypeSymbol {\r\n    // Check for branded arrays first\r\n    for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64] as TypeSymbol[]) {\r\n        if (symbol in arr) return symbol\r\n    }\r\n    // Then check TypedArrays\r\n    if (arr instanceof Int8Array) return $i8\r\n    if (arr instanceof Uint8Array) return $u8\r\n    if (arr instanceof Int16Array) return $i16\r\n    if (arr instanceof Uint16Array) return $u16\r\n    if (arr instanceof Int32Array) return $i32\r\n    if (arr instanceof Uint32Array) return $u32\r\n    if (arr instanceof Float32Array) return $f32\r\n    return $f64\r\n}\r\n\r\n/**\r\n * Creates a serializer function for a component.\r\n * @param {ComponentRef} component - The component to create a serializer for.\r\n * @returns {Function} A function that serializes the component.\r\n */\r\nexport const createComponentSerializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\r\n    // Handle direct array case\r\n    if (isTypedArrayOrBranded(component)) {\r\n        const type = getTypeForArray(component)\r\n        const setter = typeSetters[type]\r\n        return (view: DataView, offset: number, index: number) => {\r\n            let bytesWritten = 0\r\n            bytesWritten += typeSetters[$u32](view, offset, index)\r\n            bytesWritten += setter(view, offset + bytesWritten, component[index])\r\n            return bytesWritten\r\n        }\r\n    }\r\n\r\n    // Handle component case\r\n    const props = Object.keys(component)\r\n    const types = props.map(prop => {\r\n        const arr = component[prop]\r\n        if (!isTypedArrayOrBranded(arr)) {\r\n            throw new Error(`Invalid array type for property ${prop}`)\r\n        }\r\n        return getTypeForArray(arr)\r\n    })\r\n    const setters = types.map(type => typeSetters[type as keyof typeof typeSetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\r\n    return (view: DataView, offset: number, index: number) => {\r\n        let bytesWritten = 0\r\n        // Write index first\r\n        bytesWritten += typeSetters[$u32](view, offset + bytesWritten, index)\r\n        for (let i = 0; i < props.length; i++) {\r\n            const elementType: TypeSymbol = component[props[i]][$arr]\r\n            const componentValue = component[props[i]][index]\r\n            if (elementType === undefined) {\r\n                bytesWritten += setters[i](view, offset + bytesWritten, componentValue)\r\n                continue\r\n            }\r\n            const isArray = Array.isArray(componentValue)\r\n            bytesWritten += typeSetters[$u8](view, offset + bytesWritten, isArray ? 1 : 0)\r\n            if (!isArray) {\r\n                continue;\r\n            }\r\n            const arr = componentValue as number[]\r\n            const length = arr.length\r\n            bytesWritten += typeSetters[$u32](view, offset + bytesWritten, length)\r\n            for (let j = 0; j < length; j++) {\r\n                bytesWritten += typeSetters[elementType](view, offset + bytesWritten, arr[j])\r\n            }\r\n        }\r\n        return bytesWritten\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deserializer function for a component.\r\n * @param {ComponentRef} component - The component to create a deserializer for.\r\n * @returns {Function} A function that deserializes the component.\r\n */\r\nexport const createComponentDeserializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\r\n    // Handle direct array case\r\n    if (isTypedArrayOrBranded(component)) {\r\n        const type = getTypeForArray(component)\r\n        const getter = typeGetters[type]\r\n        return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\r\n            let bytesRead = 0\r\n            const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset)\r\n            bytesRead += indexSize\r\n            const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\r\n            const { value, size } = getter(view, offset + bytesRead)\r\n            component[index] = value\r\n            return bytesRead + size\r\n        }\r\n    }\r\n\r\n    // Handle component case\r\n    const props = Object.keys(component)\r\n    const types = props.map(prop => {\r\n        const arr = component[prop]\r\n        if (!isTypedArrayOrBranded(arr)) {\r\n            throw new Error(`Invalid array type for property ${prop}`)\r\n        }\r\n        return getTypeForArray(arr)\r\n    })\r\n    const getters = types.map(type => typeGetters[type as keyof typeof typeGetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\r\n    return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\r\n        let bytesRead = 0\r\n\r\n        const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset + bytesRead)\r\n        bytesRead += indexSize\r\n        \r\n        const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\r\n        \r\n        for (let i = 0; i < props.length; i++) {\r\n            const elementType: TypeSymbol = component[props[i]][$arr]\r\n            if (elementType === undefined) {\r\n                const { value, size } = getters[i](view, offset + bytesRead)\r\n                component[props[i]][index] = value\r\n                bytesRead += size\r\n                continue\r\n            }\r\n            const isArrayResult = typeGetters[$u8](view, offset + bytesRead)\r\n            bytesRead += isArrayResult.size\r\n            if (!isArrayResult.value) {\r\n                continue\r\n            }\r\n            const arrayLengthResult = typeGetters[$u32](view, offset + bytesRead)\r\n            bytesRead += arrayLengthResult.size;\r\n\r\n            const arr = new Array(arrayLengthResult.value) as any;\r\n            for (let j = 0; j < arr.length; j++) {\r\n                const { value, size } = typeGetters[elementType](view, offset + bytesRead)\r\n                bytesRead += size\r\n                arr[j] = value\r\n            }\r\n            component[props[i]][index] = arr\r\n        }\r\n        return bytesRead\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a serializer function for Structure of Arrays (SoA) data.\r\n * @param {ComponentRef[]} components - The components to serialize.\r\n * @param {ArrayBuffer} [buffer] - The buffer to use for serialization.\r\n * @returns {Function} A function that serializes the SoA data.\r\n */\r\nexport const createSoASerializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\r\n    const view = new DataView(buffer)\r\n    const componentSerializers = components.map(createComponentSerializer)\r\n    return (indices: number[] | readonly number[]): ArrayBuffer => {\r\n        let offset = 0\r\n        for (let i = 0; i < indices.length; i++) {\r\n            const index = indices[i]\r\n            for (let j = 0; j < componentSerializers.length; j++) {\r\n                offset += componentSerializers[j](view, offset, index)\r\n            }\r\n        }\r\n        return buffer.slice(0, offset)\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deserializer function for Structure of Arrays (SoA) data.\r\n * @param {ComponentRef[]} components - The components to deserialize.\r\n * @returns {Function} A function that deserializes the SoA data.\r\n */\r\nexport const createSoADeserializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[]) => {\r\n    const componentDeserializers = components.map(createComponentDeserializer)\r\n    return (packet: ArrayBuffer, entityIdMapping?: Map<number, number>): void => {\r\n        const view = new DataView(packet)\r\n        let offset = 0\r\n        while (offset < packet.byteLength) {\r\n            for (let i = 0; i < componentDeserializers.length; i++) {\r\n                offset += componentDeserializers[i](view, offset, entityIdMapping)\r\n            }\r\n        }\r\n    }\r\n}\r\n", "\r\nimport { createObserverSerializer, createObserverDeserializer } from '../serialization/ObserverSerializer'\r\nimport { createSoASerializer, createSoADeserializer } from '../serialization/SoASerializer'\r\nimport { IWorld, Component, IComponentProp } from './index'\r\n\r\nexport type Serializer<W extends IWorld = IWorld> = (world: W, ents: number[]) => ArrayBuffer\r\nexport type Deserializer<W extends IWorld = IWorld> = (world: W, packet: ArrayBuffer, mode?: DESERIALIZE_MODE) => number[]\r\n\r\nexport function defineSerializer<W extends IWorld = IWorld>(components: Component[] | IComponentProp[], maxBytes?: number): Serializer<W> {\r\n  const initSet = new WeakSet<W>();\r\n  let serializeObservations: () => ArrayBuffer, serializeData: (indices: number[]) => ArrayBuffer;\r\n  return (world: W, ents: number[]) => {\r\n    if (!initSet.has(world)) {\r\n      initSet.add(world);\r\n      serializeObservations = createObserverSerializer(world, components[0], components);\r\n      serializeData = createSoASerializer(components as Component[]);\r\n    }\r\n    const observerData = serializeObservations();\r\n    const soaData = serializeData(ents);\r\n    // Combine observer and soa data into a single ArrayBuffer\r\n    const combinedData = new ArrayBuffer(observerData.byteLength + soaData.byteLength);\r\n    const combinedView = new Uint8Array(combinedData);\r\n    combinedView.set(new Uint8Array(observerData), 0);\r\n    combinedView.set(new Uint8Array(soaData), observerData.byteLength);\r\n    return combinedData;\r\n  }\r\n}\r\n\r\nexport function defineDeserializer<W extends IWorld = IWorld>(components: Component[] | IComponentProp[]): Deserializer<W> {\r\n  const initSet = new WeakSet<W>();\r\n  let deserializeObservations: any, deserializeData: any\r\n  return (world: W, packet: ArrayBuffer, mode: any): number[] => {\r\n    if (!initSet.has(world)) {\r\n      initSet.add(world);\r\n      deserializeObservations = createObserverDeserializer(world, components[0], components);\r\n      deserializeData = createSoADeserializer(components);\r\n    }\r\n    const observerDataLength = deserializeObservations(packet, mode);\r\n    const soaData = packet.slice(observerDataLength);\r\n    return deserializeData(soaData, mode);\r\n  }\r\n}\r\n\r\nexport enum DESERIALIZE_MODE {\r\n    REPLACE,\r\n    APPEND,\r\n    MAP\r\n}"],
  "mappings": "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",
  "names": ["observe", "onAdd", "onRemove", "DESERIALIZE_MODE", "observe", "onAdd", "onRemove", "addComponent", "removeComponent", "schema", "max"]
}
