{
  "version": 3,
  "sources": ["../../src/legacy/index.ts", "../../src/serialization/ObserverSerializer.ts", "../../src/serialization/SoASerializer.ts", "../../src/legacy/serialization.ts"],
  "sourcesContent": ["import {\r\n  ComponentRef,\r\n  observe,\r\n  onAdd,\r\n  onRemove,\r\n  query,\r\n  EntityId,\r\n  addComponent as ecsAddComponent,\r\n  hasComponent as ecsHasComponent,\r\n  removeComponent as ecsRemoveComponent\r\n} from 'bitecs'\r\n\r\nexport interface IWorld { }\r\n\r\nexport type ComponentProp = TypedArray | Array<TypedArray>\r\n\r\nexport interface IComponentProp {\r\n}\r\n\r\nexport interface IComponent {\r\n}\r\n\r\nexport type Component = IComponent | ComponentType<ISchema>\r\n\r\nexport type QueryModifier = (c: IComponent[]) => IComponent | QueryModifier\r\n\r\nexport type Query<W extends IWorld = IWorld> = (world: W, clearDiff?: Boolean) => number[]\r\n\r\nexport const $modifier = Symbol(\"$modifier\")\r\n\r\nfunction modifier(c, mod) {\r\n  const inner = () => [c, mod]\r\n  inner[$modifier] = true\r\n  return inner\r\n}\r\n\r\nexport const Not = (c: Component | ISchema): QueryModifier => modifier(c, 'not')\r\nexport const Or = (c: Component | ISchema): QueryModifier => modifier(c, 'or')\r\nexport const Changed = (c: Component | ISchema): QueryModifier => modifier(c, 'changed')\r\n\r\nexport function defineQuery<W extends IWorld = IWorld>(components: (Component | QueryModifier)[]): Query<W> {\r\n  const queryFn = (world: IWorld) => query(world, components)\r\n  queryFn.components = components\r\n  return queryFn as unknown as Query<W>\r\n}\r\n\r\nexport function enterQuery<W extends IWorld = IWorld>(queryFn: Query<W>): Query<W> {\r\n  let queue: number[] = []\r\n  const initSet = new WeakSet<IWorld>()\r\n  return (world: W) => {\r\n    if (!initSet.has(world)) {\r\n      observe(world, onAdd(...(queryFn as any).components), (eid: EntityId) => queue.push(eid))\r\n      initSet.add(world)\r\n    }\r\n    const results = queue.slice()\r\n    queue.length = 0\r\n    return results\r\n  }\r\n}\r\n\r\nexport function exitQuery<W extends IWorld = IWorld>(queryFn: Query<W>): Query<W> {\r\n  let queue: number[] = []\r\n  const initSet = new WeakSet<IWorld>()\r\n  return (world: W) => {\r\n    if (!initSet.has(world)) {\r\n      observe(world, onRemove(...(queryFn as any).components), (eid: EntityId) => queue.push(eid))\r\n      initSet.add(world)\r\n    }\r\n    const results = queue.slice()\r\n    queue.length = 0\r\n    return results\r\n  }\r\n}\r\n\r\nexport const addComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\r\n  ecsAddComponent(world, eid, component)\r\n\r\nexport const hasComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\r\n  ecsHasComponent(world, eid, component)\r\n\r\nexport const removeComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\r\n  ecsRemoveComponent(world, eid, component)\r\n\r\nexport interface ISchema {\r\n  [key: string]: Type | ListType | ISchema\r\n}\r\n\r\nexport type Type =\r\n  | 'i8'\r\n  | 'ui8'\r\n  | 'ui8c'\r\n  | 'i16'\r\n  | 'ui16'\r\n  | 'i32'\r\n  | 'ui32'\r\n  | 'f32'\r\n  | 'f64'\r\n  | 'eid'\r\n\r\nexport type ListType = readonly [Type, number];\r\n\r\nexport const Types = {\r\n  i8: 'i8' as Type,\r\n  ui8: 'ui8' as Type,\r\n  ui8c: 'ui8c' as Type,\r\n  i16: 'i16' as Type,\r\n  ui16: 'ui16' as Type,\r\n  i32: 'i32' as Type,\r\n  ui32: 'ui32' as Type,\r\n  f32: 'f32' as Type,\r\n  f64: 'f64' as Type,\r\n  eid: 'eid' as Type\r\n};\r\n\r\nexport type TypedArray =\r\n  | Uint8Array\r\n  | Int8Array\r\n  | Uint8ClampedArray\r\n  | Int16Array\r\n  | Uint16Array\r\n  | Int32Array\r\n  | Uint32Array\r\n  | Float32Array\r\n  | Float64Array\r\n\r\nexport type ArrayByType = {\r\n  'i8': Int8Array;\r\n  'ui8': Uint8Array;\r\n  'ui8c': Uint8ClampedArray;\r\n  'i16': Int16Array;\r\n  'ui16': Uint16Array;\r\n  'i32': Int32Array;\r\n  'ui32': Uint32Array;\r\n  'f32': Float32Array;\r\n  'f64': Float64Array;\r\n  'eid': Uint32Array;\r\n}\r\n\r\n// ... existing code ...\r\n\r\nconst arrayByTypeMap: { [key in Type]: any } = {\r\n  'i8': Int8Array,\r\n  'ui8': Uint8Array,\r\n  'ui8c': Uint8ClampedArray,\r\n  'i16': Int16Array,\r\n  'ui16': Uint16Array,\r\n  'i32': Int32Array,\r\n  'ui32': Uint32Array,\r\n  'f32': Float32Array,\r\n  'f64': Float64Array,\r\n  'eid': Uint32Array,\r\n};\r\n\r\nexport type ComponentType<T extends ISchema> = {\r\n  [key in keyof T]:\r\n  T[key] extends Type\r\n  ? ArrayByType[T[key]]\r\n  : T[key] extends [infer RT, number]\r\n  ? RT extends Type\r\n  ? Array<ArrayByType[RT]>\r\n  : unknown\r\n  : T[key] extends ISchema\r\n  ? ComponentType<T[key]>\r\n  : unknown;\r\n};\r\n\r\nexport const defineComponent = <T extends ISchema>(schema: T, max: number = 1e5): ComponentType<T> => {\r\n  const createSoA = <U extends ISchema>(schema: U, max: number): ComponentType<U> => {\r\n    const component = {} as ComponentType<U>\r\n    for (const key in schema) {\r\n      if (Array.isArray(schema[key])) {\r\n        const [type, length] = schema[key] as [Type, number]\r\n        component[key] = Array.from({ length }, () => new arrayByTypeMap[type](max)) as any\r\n      } else if (typeof schema[key] === 'object') {\r\n        component[key] = createSoA(schema[key] as ISchema, max) as any\r\n      } else {\r\n        const type = schema[key] as Type;\r\n        const TypeConstructor = arrayByTypeMap[type];\r\n        if (TypeConstructor) {\r\n          component[key] = new TypeConstructor(max) as any;\r\n        } else {\r\n          throw new Error(`Unsupported type: ${schema[key]}`);\r\n        }\r\n      }\r\n    }\r\n    return component\r\n  }\r\n  return createSoA(schema, max)\r\n}\r\n\r\nexport * from './serialization'", "import {\r\n    addComponent,\r\n    removeComponent,\r\n    addEntity,\r\n    removeEntity,\r\n    observe,\r\n    onAdd,\r\n    onRemove,\r\n    World,\r\n    ComponentRef,\r\n    entityExists,\r\n    isRelation,\r\n    getRelationTargets,\r\n    Wildcard,\r\n    EntityId\r\n} from 'bitecs'\r\n\r\nenum OperationType {\r\n    AddEntity = 0,\r\n    RemoveEntity = 1,\r\n    AddComponent = 2,\r\n    RemoveComponent = 3,\r\n    AddRelation = 4,\r\n    RemoveRelation = 5,\r\n}\r\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\r\n\r\n/**\r\n * Serializes relation data for a specific entity\r\n */\r\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\r\n    if (!data) return offset\r\n    \r\n    // Handle array data (AoS) - defaults to f64\r\n    if (Array.isArray(data)) {\r\n        const value = data[eid]\r\n        if (value !== undefined) {\r\n            dataView.setFloat64(offset, value)\r\n            return offset + 8\r\n        }\r\n        return offset\r\n    }\r\n    \r\n    // Handle object data (SoA)\r\n    if (typeof data === 'object') {\r\n        const keys = Object.keys(data).sort()\r\n        for (const key of keys) {\r\n            const arr = data[key]\r\n            const value = arr[eid]\r\n            \r\n            if (value !== undefined) {\r\n                if (arr instanceof Int8Array || $i8 in arr) {\r\n                    dataView.setInt8(offset, value)\r\n                    offset += 1\r\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\r\n                    dataView.setUint8(offset, value)\r\n                    offset += 1\r\n                } else if (arr instanceof Int16Array || $i16 in arr) {\r\n                    dataView.setInt16(offset, value)\r\n                    offset += 2\r\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\r\n                    dataView.setUint16(offset, value)\r\n                    offset += 2\r\n                } else if (arr instanceof Int32Array || $i32 in arr) {\r\n                    dataView.setInt32(offset, value)\r\n                    offset += 4\r\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\r\n                    dataView.setUint32(offset, value)\r\n                    offset += 4\r\n                } else if (arr instanceof Float32Array || $f32 in arr) {\r\n                    dataView.setFloat32(offset, value)\r\n                    offset += 4\r\n                } else {\r\n                    // Default to f64\r\n                    dataView.setFloat64(offset, value)\r\n                    offset += 8\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return offset\r\n}\r\n\r\n/**\r\n * Deserializes relation data for a specific entity\r\n */\r\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\r\n    if (!data) return offset\r\n    \r\n    // Handle array data (AoS) - defaults to f64\r\n    if (Array.isArray(data)) {\r\n        data[eid] = dataView.getFloat64(offset)\r\n        return offset + 8\r\n    }\r\n    \r\n    // Handle object data (SoA)\r\n    if (typeof data === 'object') {\r\n        const keys = Object.keys(data).sort()\r\n        for (const key of keys) {\r\n            const arr = data[key]\r\n            \r\n            if (arr instanceof Int8Array || $i8 in arr) {\r\n                arr[eid] = dataView.getInt8(offset)\r\n                offset += 1\r\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\r\n                arr[eid] = dataView.getUint8(offset)\r\n                offset += 1\r\n            } else if (arr instanceof Int16Array || $i16 in arr) {\r\n                arr[eid] = dataView.getInt16(offset)\r\n                offset += 2\r\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\r\n                arr[eid] = dataView.getUint16(offset)\r\n                offset += 2\r\n            } else if (arr instanceof Int32Array || $i32 in arr) {\r\n                arr[eid] = dataView.getInt32(offset)\r\n                offset += 4\r\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\r\n                arr[eid] = dataView.getUint32(offset)\r\n                offset += 4\r\n            } else if (arr instanceof Float32Array || $f32 in arr) {\r\n                arr[eid] = dataView.getFloat32(offset)\r\n                offset += 4\r\n            } else {\r\n                // Default to f64\r\n                arr[eid] = dataView.getFloat64(offset)\r\n                offset += 8\r\n            }\r\n        }\r\n    }\r\n    \r\n    return offset\r\n}\r\n\r\n/**\r\n * Creates a serializer for observing and serializing changes in networked entities.\r\n */\r\nexport const createObserverSerializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], buffer = new ArrayBuffer(1024 * 1024 * 100)) => {\r\n    const dataView = new DataView(buffer)\r\n    let offset = 0\r\n    const queue: [number, OperationType, number, number?, any?][] = []\r\n    const relationTargets = new Map<number, Map<number, number>>()\r\n    \r\n    observe(world, onAdd(networkedTag), (eid: EntityId) => {\r\n        queue.push([eid, OperationType.AddEntity, -1])\r\n    })\r\n\r\n    observe(world, onRemove(networkedTag), (eid: EntityId) => {\r\n        queue.push([eid, OperationType.RemoveEntity, -1])\r\n        relationTargets.delete(eid)\r\n    })\r\n\r\n    components.forEach((component, i) => {\r\n        if (isRelation(component)) {\r\n            observe(world, onAdd(networkedTag, component(Wildcard)), (eid: EntityId) => {\r\n                const targets = getRelationTargets(world, eid, component)\r\n                for (const target of targets) {\r\n                    if (!relationTargets.has(eid)) {\r\n                        relationTargets.set(eid, new Map())\r\n                    }\r\n                    relationTargets.get(eid).set(i, target)\r\n                    const relationData = component(target)\r\n                    queue.push([eid, OperationType.AddRelation, i, target, relationData])\r\n                }\r\n            })\r\n\r\n            observe(world, onRemove(networkedTag, component(Wildcard)), (eid: EntityId) => {\r\n                const targetMap = relationTargets.get(eid)\r\n                if (targetMap) {\r\n                    const target = targetMap.get(i)\r\n                    if (target !== undefined) {\r\n                        queue.push([eid, OperationType.RemoveRelation, i, target])\r\n                        targetMap.delete(i)\r\n                        if (targetMap.size === 0) {\r\n                            relationTargets.delete(eid)\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        } else {\r\n            observe(world, onAdd(networkedTag, component), (eid: EntityId) => {\r\n                queue.push([eid, OperationType.AddComponent, i])\r\n            })\r\n\r\n            observe(world, onRemove(networkedTag, component), (eid: EntityId) => {\r\n                queue.push([eid, OperationType.RemoveComponent, i])\r\n            })\r\n        }\r\n    })\r\n    \r\n    return () => {\r\n        offset = 0\r\n        \r\n        for (let i = 0; i < queue.length; i++) {\r\n            const [entityId, type, componentId, targetId, relationData] = queue[i]\r\n            dataView.setUint32(offset, entityId)\r\n            offset += 4\r\n            dataView.setUint8(offset, type)\r\n            offset += 1\r\n            if (type === OperationType.AddComponent || \r\n                type === OperationType.RemoveComponent || \r\n                type === OperationType.AddRelation ||\r\n                type === OperationType.RemoveRelation) {\r\n                dataView.setUint8(offset, componentId)\r\n                offset += 1\r\n                \r\n                if (type === OperationType.AddRelation || type === OperationType.RemoveRelation) {\r\n                    dataView.setUint32(offset, targetId)\r\n                    offset += 4\r\n                    \r\n                    if (type === OperationType.AddRelation && relationData) {\r\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        queue.length = 0\r\n\r\n        return buffer.slice(0, offset)\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deserializer for applying serialized changes to a world.\r\n */\r\nexport const createObserverDeserializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], constructorMapping?: Map<number, number>) => {\r\n    let entityIdMapping = constructorMapping || new Map<number, number>()\r\n    \r\n    return (packet: ArrayBuffer, overrideMapping?: Map<number, number>) => {\r\n        // Allow overriding the mapping for this call\r\n        const currentMapping = overrideMapping || entityIdMapping\r\n        const dataView = new DataView(packet)\r\n        let offset = 0\r\n\r\n        while (offset < packet.byteLength) {\r\n            const packetEntityId = dataView.getUint32(offset)\r\n            offset += 4\r\n            const operationType = dataView.getUint8(offset)\r\n            offset += 1\r\n            let componentId = -1\r\n            let targetId = -1\r\n            \r\n            if (operationType === OperationType.AddComponent || \r\n                operationType === OperationType.RemoveComponent ||\r\n                operationType === OperationType.AddRelation ||\r\n                operationType === OperationType.RemoveRelation) {\r\n                componentId = dataView.getUint8(offset)\r\n                offset += 1\r\n                \r\n                if (operationType === OperationType.AddRelation || operationType === OperationType.RemoveRelation) {\r\n                    targetId = dataView.getUint32(offset)\r\n                    offset += 4\r\n                }\r\n            }\r\n\r\n            const component = components[componentId]\r\n            let worldEntityId = currentMapping.get(packetEntityId)\r\n\r\n            if (operationType === OperationType.AddEntity) {\r\n                if (worldEntityId === undefined) {\r\n                    worldEntityId = addEntity(world)\r\n                    currentMapping.set(packetEntityId, worldEntityId)\r\n                    addComponent(world, worldEntityId, networkedTag)\r\n                } else {\r\n                    // TODO: figure out if this should ignore, throw, warn, or if the observer serializer should maybe do a snapshot on first call?\r\n                    // throw new Error(`Entity with ID ${packetEntityId} already exists in the mapping.`)\r\n                    console.warn(`Attempted to deserialize addEntity with ID ${packetEntityId}, but it has already been deserialzied and exists in the mapping.`)\r\n                }\r\n            } else if (worldEntityId !== undefined && entityExists(world, worldEntityId)) {\r\n                if (operationType === OperationType.RemoveEntity) {\r\n                    removeEntity(world, worldEntityId)\r\n                    currentMapping.delete(packetEntityId)\r\n                } else if (operationType === OperationType.AddComponent) {\r\n                    addComponent(world, worldEntityId, component)\r\n                } else if (operationType === OperationType.RemoveComponent) {\r\n                    removeComponent(world, worldEntityId, component)\r\n                } else if (operationType === OperationType.AddRelation) {\r\n                    const worldTargetId = currentMapping.get(targetId)\r\n                    if (worldTargetId !== undefined) {\r\n                        const relationComponent = component(worldTargetId)\r\n                        addComponent(world, worldEntityId, relationComponent)\r\n                        offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\r\n                    }\r\n                } else if (operationType === OperationType.RemoveRelation) {\r\n                    const worldTargetId = currentMapping.get(targetId)\r\n                    if (worldTargetId !== undefined) {\r\n                        removeComponent(world, worldEntityId, component(worldTargetId))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return currentMapping\r\n    }\r\n}\r\n", "\r\n/**\r\n * Symbols representing different data types for serialization.\r\n */\r\nexport const $u8 = Symbol.for('bitecs-u8'), $i8 = Symbol.for('bitecs-i8'), $u16 = Symbol.for('bitecs-u16'), $i16 = Symbol.for('bitecs-i16'),\r\n    $u32 = Symbol.for('bitecs-u32'), $i32 = Symbol.for('bitecs-i32'), $f32 = Symbol.for('bitecs-f32'), $f64 = Symbol.for('bitecs-f64'),\r\n    $arr = Symbol.for('bitecs-arr')\r\n\r\n/**\r\n * Union type of all possible TypedArray types.\r\n */\r\nexport type TypedArray = \r\n    | Int8Array\r\n    | Uint8Array\r\n    | Int16Array\r\n    | Uint16Array\r\n    | Int32Array\r\n    | Uint32Array\r\n    | Float32Array\r\n    | Float64Array\r\n\r\n/**\r\n * Union type of all possible type symbols.\r\n */\r\nexport type TypeSymbol = typeof $u8 | typeof $i8 | typeof $u16 | typeof $i16 | typeof $u32 | typeof $i32 | typeof $f32 | typeof $f64\r\n\r\n/**\r\n * Type representing a primitive brand, which is either a number array with a symbol property or a TypedArray.\r\n */\r\nexport type PrimitiveBrand = (number[] & { [key: symbol]: true }) | TypedArray\r\n\r\n/**\r\n * Type representing a component reference, which is a record mapping string keys to either\r\n * a PrimitiveBrand (number array with type symbol) or TypedArray values.\r\n * Used to define the structure of components that can be serialized.\r\n */\r\ntype ComponentRef = Record<string, PrimitiveBrand | TypedArray>\r\n\r\n/**\r\n * Creates a function that tags an array with a type symbol for serialization.\r\n * @param {TypeSymbol} symbol - The type symbol to tag the array with.\r\n * @returns {Function} A function that tags an array with the given type symbol.\r\n */\r\nconst typeTagForSerialization = (symbol: TypeSymbol) => (a: number[] = []): PrimitiveBrand =>\r\n    Object.defineProperty(a, symbol, { value: true, enumerable: false, writable: false, configurable: false }) as PrimitiveBrand\r\n\r\n/**\r\n * Functions to create arrays tagged with specific type symbols.\r\n */\r\nexport const u8 = typeTagForSerialization($u8),     i8 = typeTagForSerialization($i8),\r\n            u16 = typeTagForSerialization($u16),    i16 = typeTagForSerialization($i16),\r\n            u32 = typeTagForSerialization($u32),    i32 = typeTagForSerialization($i32),\r\n            f32 = typeTagForSerialization($f32),    f64 = typeTagForSerialization($f64)\r\n\r\n/**\r\n * Object containing setter functions for each data type.\r\n */\r\nconst typeSetters = {\r\n    [$u8]: (view: DataView, offset: number, value: number) => { view.setUint8(offset, value); return 1; },\r\n    [$i8]: (view: DataView, offset: number, value: number) => { view.setInt8(offset, value); return 1; },\r\n    [$u16]: (view: DataView, offset: number, value: number) => { view.setUint16(offset, value); return 2; },\r\n    [$i16]: (view: DataView, offset: number, value: number) => { view.setInt16(offset, value); return 2; },\r\n    [$u32]: (view: DataView, offset: number, value: number) => { view.setUint32(offset, value); return 4; },\r\n    [$i32]: (view: DataView, offset: number, value: number) => { view.setInt32(offset, value); return 4; },\r\n    [$f32]: (view: DataView, offset: number, value: number) => { view.setFloat32(offset, value); return 4; },\r\n    [$f64]: (view: DataView, offset: number, value: number) => { view.setFloat64(offset, value); return 8; }\r\n}\r\n\r\n/**\r\n * Object containing getter functions for each data type.\r\n */\r\nconst typeGetters = {\r\n    [$u8]: (view: DataView, offset: number) => ({ value: view.getUint8(offset), size: 1 }),\r\n    [$i8]: (view: DataView, offset: number) => ({ value: view.getInt8(offset), size: 1 }),\r\n    [$u16]: (view: DataView, offset: number) => ({ value: view.getUint16(offset), size: 2 }),\r\n    [$i16]: (view: DataView, offset: number) => ({ value: view.getInt16(offset), size: 2 }),\r\n    [$u32]: (view: DataView, offset: number) => ({ value: view.getUint32(offset), size: 4 }),\r\n    [$i32]: (view: DataView, offset: number) => ({ value: view.getInt32(offset), size: 4 }),\r\n    [$f32]: (view: DataView, offset: number) => ({ value: view.getFloat32(offset), size: 4 }),\r\n    [$f64]: (view: DataView, offset: number) => ({ value: view.getFloat64(offset), size: 8 })\r\n}\r\n\r\nexport const array = <T extends any[] = []>(type: TypeSymbol = $f32)=>  {\r\n    const arr = [];\r\n\r\n    Object.defineProperty(arr, $arr, { value: type, enumerable: false, writable: false, configurable: false })\r\n\r\n    return arr as T[];\r\n}\r\n\r\n/**\r\n * Checks if a value is a TypedArray or branded array\r\n */\r\nfunction isTypedArrayOrBranded(arr: any): arr is PrimitiveBrand | TypedArray {\r\n    return arr && (\r\n        ArrayBuffer.isView(arr) || \r\n        (Array.isArray(arr) && typeof arr === 'object')\r\n    )\r\n}\r\n\r\n/**\r\n * Gets the type symbol for an array\r\n */\r\nfunction getTypeForArray(arr: PrimitiveBrand | TypedArray): TypeSymbol {\r\n    // Check for branded arrays first\r\n    for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64] as TypeSymbol[]) {\r\n        if (symbol in arr) return symbol\r\n    }\r\n    // Then check TypedArrays\r\n    if (arr instanceof Int8Array) return $i8\r\n    if (arr instanceof Uint8Array) return $u8\r\n    if (arr instanceof Int16Array) return $i16\r\n    if (arr instanceof Uint16Array) return $u16\r\n    if (arr instanceof Int32Array) return $i32\r\n    if (arr instanceof Uint32Array) return $u32\r\n    if (arr instanceof Float32Array) return $f32\r\n    return $f64\r\n}\r\n\r\n/**\r\n * Creates a serializer function for a component.\r\n * @param {ComponentRef} component - The component to create a serializer for.\r\n * @returns {Function} A function that serializes the component.\r\n */\r\nexport const createComponentSerializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\r\n    // Handle direct array case\r\n    if (isTypedArrayOrBranded(component)) {\r\n        const type = getTypeForArray(component)\r\n        const setter = typeSetters[type]\r\n        return (view: DataView, offset: number, index: number) => {\r\n            let bytesWritten = 0\r\n            bytesWritten += typeSetters[$u32](view, offset, index)\r\n            bytesWritten += setter(view, offset + bytesWritten, component[index])\r\n            return bytesWritten\r\n        }\r\n    }\r\n\r\n    // Handle component case\r\n    const props = Object.keys(component)\r\n    const types = props.map(prop => {\r\n        const arr = component[prop]\r\n        if (!isTypedArrayOrBranded(arr)) {\r\n            throw new Error(`Invalid array type for property ${prop}`)\r\n        }\r\n        return getTypeForArray(arr)\r\n    })\r\n    const setters = types.map(type => typeSetters[type as keyof typeof typeSetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\r\n    return (view: DataView, offset: number, index: number) => {\r\n        let bytesWritten = 0\r\n        // Write index first\r\n        bytesWritten += typeSetters[$u32](view, offset + bytesWritten, index)\r\n        for (let i = 0; i < props.length; i++) {\r\n            const elementType: TypeSymbol = component[props[i]][$arr]\r\n            if (elementType !== undefined) {\r\n                const arr = component[props[i]][index] as any;\r\n                const length = arr.length;\r\n                bytesWritten += typeSetters[$u32](view, offset + bytesWritten, length)\r\n                for (let j = 0; j < length; j++) {\r\n                    bytesWritten += typeSetters[elementType](view, offset + bytesWritten, arr[j])\r\n                }\r\n            } else {\r\n                bytesWritten += setters[i](view, offset + bytesWritten, component[props[i]][index])\r\n            }\r\n        }\r\n        return bytesWritten\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deserializer function for a component.\r\n * @param {ComponentRef} component - The component to create a deserializer for.\r\n * @returns {Function} A function that deserializes the component.\r\n */\r\nexport const createComponentDeserializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\r\n    // Handle direct array case\r\n    if (isTypedArrayOrBranded(component)) {\r\n        const type = getTypeForArray(component)\r\n        const getter = typeGetters[type]\r\n        return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\r\n            let bytesRead = 0\r\n            const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset)\r\n            bytesRead += indexSize\r\n            const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\r\n            const { value, size } = getter(view, offset + bytesRead)\r\n            component[index] = value\r\n            return bytesRead + size\r\n        }\r\n    }\r\n\r\n    // Handle component case\r\n    const props = Object.keys(component)\r\n    const types = props.map(prop => {\r\n        const arr = component[prop]\r\n        if (!isTypedArrayOrBranded(arr)) {\r\n            throw new Error(`Invalid array type for property ${prop}`)\r\n        }\r\n        return getTypeForArray(arr)\r\n    })\r\n    const getters = types.map(type => typeGetters[type as keyof typeof typeGetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\r\n    return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\r\n        let bytesRead = 0\r\n\r\n        const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset + bytesRead)\r\n        bytesRead += indexSize\r\n        \r\n        const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\r\n        \r\n        for (let i = 0; i < props.length; i++) {\r\n            const elementType: TypeSymbol = component[props[i]][$arr]\r\n            if (elementType !== undefined) {\r\n                const { value, size } = typeGetters[$u32](view, offset + bytesRead)\r\n                const arr = new Array(value) as any;\r\n                bytesRead += size;\r\n                for (let j = 0; j < value; j++) {\r\n                    const { value, size } = typeGetters[elementType](view, offset + bytesRead)\r\n                    bytesRead += size\r\n                    arr[j] = value\r\n                }\r\n                component[props[i]][index] = arr\r\n            } else {\r\n                const { value, size } = getters[i](view, offset + bytesRead)\r\n                component[props[i]][index] = value\r\n                bytesRead += size\r\n            }\r\n        }\r\n        return bytesRead\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a serializer function for Structure of Arrays (SoA) data.\r\n * @param {ComponentRef[]} components - The components to serialize.\r\n * @param {ArrayBuffer} [buffer] - The buffer to use for serialization.\r\n * @returns {Function} A function that serializes the SoA data.\r\n */\r\nexport const createSoASerializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\r\n    const view = new DataView(buffer)\r\n    const componentSerializers = components.map(createComponentSerializer)\r\n    return (indices: number[] | readonly number[]): ArrayBuffer => {\r\n        let offset = 0\r\n        for (let i = 0; i < indices.length; i++) {\r\n            const index = indices[i]\r\n            for (let j = 0; j < componentSerializers.length; j++) {\r\n                offset += componentSerializers[j](view, offset, index)\r\n            }\r\n        }\r\n        return buffer.slice(0, offset)\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deserializer function for Structure of Arrays (SoA) data.\r\n * @param {ComponentRef[]} components - The components to deserialize.\r\n * @returns {Function} A function that deserializes the SoA data.\r\n */\r\nexport const createSoADeserializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[]) => {\r\n    const componentDeserializers = components.map(createComponentDeserializer)\r\n    return (packet: ArrayBuffer, entityIdMapping?: Map<number, number>): void => {\r\n        const view = new DataView(packet)\r\n        let offset = 0\r\n        while (offset < packet.byteLength) {\r\n            for (let i = 0; i < componentDeserializers.length; i++) {\r\n                offset += componentDeserializers[i](view, offset, entityIdMapping)\r\n            }\r\n        }\r\n    }\r\n}\r\n", "\r\nimport { createObserverSerializer, createObserverDeserializer } from '../serialization/ObserverSerializer'\r\nimport { createSoASerializer, createSoADeserializer } from '../serialization/SoASerializer'\r\nimport { IWorld, Component, IComponentProp } from './index'\r\n\r\nexport type Serializer<W extends IWorld = IWorld> = (world: W, ents: number[]) => ArrayBuffer\r\nexport type Deserializer<W extends IWorld = IWorld> = (world: W, packet: ArrayBuffer, mode?: DESERIALIZE_MODE) => number[]\r\n\r\nexport function defineSerializer<W extends IWorld = IWorld>(components: Component[] | IComponentProp[], maxBytes?: number): Serializer<W> {\r\n  const initSet = new WeakSet<W>();\r\n  let serializeObservations: () => ArrayBuffer, serializeData: (indices: number[]) => ArrayBuffer;\r\n  return (world: W, ents: number[]) => {\r\n    if (!initSet.has(world)) {\r\n      initSet.add(world);\r\n      serializeObservations = createObserverSerializer(world, components[0], components);\r\n      serializeData = createSoASerializer(components as Component[]);\r\n    }\r\n    const observerData = serializeObservations();\r\n    const soaData = serializeData(ents);\r\n    // Combine observer and soa data into a single ArrayBuffer\r\n    const combinedData = new ArrayBuffer(observerData.byteLength + soaData.byteLength);\r\n    const combinedView = new Uint8Array(combinedData);\r\n    combinedView.set(new Uint8Array(observerData), 0);\r\n    combinedView.set(new Uint8Array(soaData), observerData.byteLength);\r\n    return combinedData;\r\n  }\r\n}\r\n\r\nexport function defineDeserializer<W extends IWorld = IWorld>(components: Component[] | IComponentProp[]): Deserializer<W> {\r\n  const initSet = new WeakSet<W>();\r\n  let deserializeObservations: any, deserializeData: any\r\n  return (world: W, packet: ArrayBuffer, mode: any): number[] => {\r\n    if (!initSet.has(world)) {\r\n      initSet.add(world);\r\n      deserializeObservations = createObserverDeserializer(world, components[0], components);\r\n      deserializeData = createSoADeserializer(components);\r\n    }\r\n    const observerDataLength = deserializeObservations(packet, mode);\r\n    const soaData = packet.slice(observerDataLength);\r\n    return deserializeData(soaData, mode);\r\n  }\r\n}\r\n\r\nexport enum DESERIALIZE_MODE {\r\n    REPLACE,\r\n    APPEND,\r\n    MAP\r\n}"],
  "mappings": "AAAA,OAEE,WAAAA,EACA,SAAAC,GACA,YAAAC,GACA,SAAAC,GAEA,gBAAgBC,GAChB,gBAAgBC,GAChB,mBAAmBC,OACd,SCVP,OACI,gBAAAC,EACA,mBAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,WAAAC,EACA,SAAAC,EACA,YAAAC,EAGA,gBAAAC,EACA,cAAAC,EACA,sBAAAC,EACA,YAAAC,MAEG,SCXA,IAAMC,EAAM,OAAO,IAAI,WAAW,EAAGC,EAAM,OAAO,IAAI,WAAW,EAAGC,EAAO,OAAO,IAAI,YAAY,EAAGC,EAAO,OAAO,IAAI,YAAY,EACtIC,EAAO,OAAO,IAAI,YAAY,EAAGC,EAAO,OAAO,IAAI,YAAY,EAAGC,EAAO,OAAO,IAAI,YAAY,EAAGC,EAAO,OAAO,IAAI,YAAY,EACjIC,EAAO,OAAO,IAAI,YAAY,EAqC5BC,EAA2BC,GAAuB,CAACC,EAAc,CAAC,IACpE,OAAO,eAAeA,EAAGD,EAAQ,CAAE,MAAO,GAAM,WAAY,GAAO,SAAU,GAAO,aAAc,EAAM,CAAC,EAKhGE,GAAKH,EAAwBT,CAAG,EAAOa,GAAKJ,EAAwBR,CAAG,EACxEa,GAAML,EAAwBP,CAAI,EAAMa,GAAMN,EAAwBN,CAAI,EAC1Ea,GAAMP,EAAwBL,CAAI,EAAMa,GAAMR,EAAwBJ,CAAI,EAC1Ea,GAAMT,EAAwBH,CAAI,EAAMa,GAAMV,EAAwBF,CAAI,EAKhFa,EAAc,CAChB,CAACpB,CAAG,EAAG,CAACqB,EAAgBC,EAAgBC,KAAoBF,EAAK,SAASC,EAAQC,CAAK,EAAU,GACjG,CAACtB,CAAG,EAAG,CAACoB,EAAgBC,EAAgBC,KAAoBF,EAAK,QAAQC,EAAQC,CAAK,EAAU,GAChG,CAACrB,CAAI,EAAG,CAACmB,EAAgBC,EAAgBC,KAAoBF,EAAK,UAAUC,EAAQC,CAAK,EAAU,GACnG,CAACpB,CAAI,EAAG,CAACkB,EAAgBC,EAAgBC,KAAoBF,EAAK,SAASC,EAAQC,CAAK,EAAU,GAClG,CAACnB,CAAI,EAAG,CAACiB,EAAgBC,EAAgBC,KAAoBF,EAAK,UAAUC,EAAQC,CAAK,EAAU,GACnG,CAAClB,CAAI,EAAG,CAACgB,EAAgBC,EAAgBC,KAAoBF,EAAK,SAASC,EAAQC,CAAK,EAAU,GAClG,CAACjB,CAAI,EAAG,CAACe,EAAgBC,EAAgBC,KAAoBF,EAAK,WAAWC,EAAQC,CAAK,EAAU,GACpG,CAAChB,CAAI,EAAG,CAACc,EAAgBC,EAAgBC,KAAoBF,EAAK,WAAWC,EAAQC,CAAK,EAAU,EACxG,EAKMC,EAAc,CAChB,CAACxB,CAAG,EAAG,CAACqB,EAAgBC,KAAoB,CAAE,MAAOD,EAAK,SAASC,CAAM,EAAG,KAAM,CAAE,GACpF,CAACrB,CAAG,EAAG,CAACoB,EAAgBC,KAAoB,CAAE,MAAOD,EAAK,QAAQC,CAAM,EAAG,KAAM,CAAE,GACnF,CAACpB,CAAI,EAAG,CAACmB,EAAgBC,KAAoB,CAAE,MAAOD,EAAK,UAAUC,CAAM,EAAG,KAAM,CAAE,GACtF,CAACnB,CAAI,EAAG,CAACkB,EAAgBC,KAAoB,CAAE,MAAOD,EAAK,SAASC,CAAM,EAAG,KAAM,CAAE,GACrF,CAAClB,CAAI,EAAG,CAACiB,EAAgBC,KAAoB,CAAE,MAAOD,EAAK,UAAUC,CAAM,EAAG,KAAM,CAAE,GACtF,CAACjB,CAAI,EAAG,CAACgB,EAAgBC,KAAoB,CAAE,MAAOD,EAAK,SAASC,CAAM,EAAG,KAAM,CAAE,GACrF,CAAChB,CAAI,EAAG,CAACe,EAAgBC,KAAoB,CAAE,MAAOD,EAAK,WAAWC,CAAM,EAAG,KAAM,CAAE,GACvF,CAACf,CAAI,EAAG,CAACc,EAAgBC,KAAoB,CAAE,MAAOD,EAAK,WAAWC,CAAM,EAAG,KAAM,CAAE,EAC3F,EAaA,SAASG,EAAsBC,EAA8C,CACzE,OAAOA,IACH,YAAY,OAAOA,CAAG,GACrB,MAAM,QAAQA,CAAG,GAAK,OAAOA,GAAQ,SAE9C,CAKA,SAASC,EAAgBD,EAA8C,CAEnE,QAAWE,IAAU,CAACC,EAAKC,EAAKC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,CAAI,EAC9D,GAAIR,KAAUF,EAAK,OAAOE,EAG9B,OAAIF,aAAe,UAAkBI,EACjCJ,aAAe,WAAmBG,EAClCH,aAAe,WAAmBM,EAClCN,aAAe,YAAoBK,EACnCL,aAAe,WAAmBQ,EAClCR,aAAe,YAAoBO,EACnCP,aAAe,aAAqBS,EACjCC,CACX,CAOO,IAAMC,EAA6BC,GAA0D,CAEhG,GAAIb,EAAsBa,CAAS,EAAG,CAClC,IAAMC,EAAOZ,EAAgBW,CAAS,EAChCE,EAASC,EAAYF,CAAI,EAC/B,MAAO,CAACG,EAAgBC,EAAgBC,IAAkB,CACtD,IAAIC,EAAe,EACnB,OAAAA,GAAgBJ,EAAYR,CAAI,EAAES,EAAMC,EAAQC,CAAK,EACrDC,GAAgBL,EAAOE,EAAMC,EAASE,EAAcP,EAAUM,CAAK,CAAC,EAC7DC,CACX,CACJ,CAGA,IAAMC,EAAQ,OAAO,KAAKR,CAAS,EAQ7BS,EAPQD,EAAM,IAAIE,GAAQ,CAC5B,IAAMtB,EAAMY,EAAUU,CAAI,EAC1B,GAAI,CAACvB,EAAsBC,CAAG,EAC1B,MAAM,IAAI,MAAM,mCAAmCsB,CAAI,EAAE,EAE7D,OAAOrB,EAAgBD,CAAG,CAC9B,CAAC,EACqB,IAAIa,GAAQE,EAAYF,CAAgC,IAAM,IAAM,CAAE,MAAM,IAAI,MAAM,iCAAiC,CAAG,EAAE,EAClJ,MAAO,CAACG,EAAgBC,EAAgBC,IAAkB,CACtD,IAAIC,EAAe,EAEnBA,GAAgBJ,EAAYR,CAAI,EAAES,EAAMC,EAASE,EAAcD,CAAK,EACpE,QAASK,EAAI,EAAGA,EAAIH,EAAM,OAAQG,IAAK,CACnC,IAAMC,EAA0BZ,EAAUQ,EAAMG,CAAC,CAAC,EAAEE,CAAI,EACxD,GAAID,IAAgB,OAAW,CAC3B,IAAMxB,EAAMY,EAAUQ,EAAMG,CAAC,CAAC,EAAEL,CAAK,EAC/BQ,EAAS1B,EAAI,OACnBmB,GAAgBJ,EAAYR,CAAI,EAAES,EAAMC,EAASE,EAAcO,CAAM,EACrE,QAASC,EAAI,EAAGA,EAAID,EAAQC,IACxBR,GAAgBJ,EAAYS,CAAW,EAAER,EAAMC,EAASE,EAAcnB,EAAI2B,CAAC,CAAC,CAEpF,MACIR,GAAgBE,EAAQE,CAAC,EAAEP,EAAMC,EAASE,EAAcP,EAAUQ,EAAMG,CAAC,CAAC,EAAEL,CAAK,CAAC,CAE1F,CACA,OAAOC,CACX,CACJ,EAOaS,EAA+BhB,GAA0D,CAElG,GAAIb,EAAsBa,CAAS,EAAG,CAClC,IAAMC,EAAOZ,EAAgBW,CAAS,EAChCiB,EAASC,EAAYjB,CAAI,EAC/B,MAAO,CAACG,EAAgBC,EAAgBc,IAA0C,CAC9E,IAAIC,EAAY,EACV,CAAE,MAAOC,EAAe,KAAMC,CAAU,EAAIJ,EAAYvB,CAAI,EAAES,EAAMC,CAAM,EAChFe,GAAaE,EACb,IAAMhB,EAAQa,EAAkBA,EAAgB,IAAIE,CAAa,GAAKA,EAAgBA,EAChF,CAAE,MAAAE,EAAO,KAAAC,CAAK,EAAIP,EAAOb,EAAMC,EAASe,CAAS,EACvD,OAAApB,EAAUM,CAAK,EAAIiB,EACZH,EAAYI,CACvB,CACJ,CAGA,IAAMhB,EAAQ,OAAO,KAAKR,CAAS,EAQ7ByB,EAPQjB,EAAM,IAAIE,GAAQ,CAC5B,IAAMtB,EAAMY,EAAUU,CAAI,EAC1B,GAAI,CAACvB,EAAsBC,CAAG,EAC1B,MAAM,IAAI,MAAM,mCAAmCsB,CAAI,EAAE,EAE7D,OAAOrB,EAAgBD,CAAG,CAC9B,CAAC,EACqB,IAAIa,GAAQiB,EAAYjB,CAAgC,IAAM,IAAM,CAAE,MAAM,IAAI,MAAM,iCAAiC,CAAG,EAAE,EAClJ,MAAO,CAACG,EAAgBC,EAAgBc,IAA0C,CAC9E,IAAIC,EAAY,EAEV,CAAE,MAAOC,EAAe,KAAMC,CAAU,EAAIJ,EAAYvB,CAAI,EAAES,EAAMC,EAASe,CAAS,EAC5FA,GAAaE,EAEb,IAAMhB,EAAQa,EAAkBA,EAAgB,IAAIE,CAAa,GAAKA,EAAgBA,EAEtF,QAASV,EAAI,EAAGA,EAAIH,EAAM,OAAQG,IAAK,CACnC,IAAMC,EAA0BZ,EAAUQ,EAAMG,CAAC,CAAC,EAAEE,CAAI,EACxD,GAAID,IAAgB,OAAW,CAC3B,GAAM,CAAE,MAAAW,EAAO,KAAAC,CAAK,EAAIN,EAAYvB,CAAI,EAAES,EAAMC,EAASe,CAAS,EAC5DhC,EAAM,IAAI,MAAMmC,CAAK,EAC3BH,GAAaI,EACb,QAAST,EAAI,EAAGA,EAAIQ,EAAOR,IAAK,CAC5B,GAAM,CAAE,MAAAQ,EAAO,KAAAC,CAAK,EAAIN,EAAYN,CAAW,EAAER,EAAMC,EAASe,CAAS,EACzEA,GAAaI,EACbpC,EAAI2B,CAAC,EAAIQ,CACb,CACAvB,EAAUQ,EAAMG,CAAC,CAAC,EAAEL,CAAK,EAAIlB,CACjC,KAAO,CACH,GAAM,CAAE,MAAAmC,EAAO,KAAAC,CAAK,EAAIC,EAAQd,CAAC,EAAEP,EAAMC,EAASe,CAAS,EAC3DpB,EAAUQ,EAAMG,CAAC,CAAC,EAAEL,CAAK,EAAIiB,EAC7BH,GAAaI,CACjB,CACJ,CACA,OAAOJ,CACX,CACJ,EAQaM,EAAsB,CAACC,EAA4DC,EAAsB,IAAI,YAAY,KAAO,KAAO,GAAG,IAAM,CACzJ,IAAMxB,EAAO,IAAI,SAASwB,CAAM,EAC1BC,EAAuBF,EAAW,IAAI5B,CAAyB,EACrE,OAAQ+B,GAAuD,CAC3D,IAAIzB,EAAS,EACb,QAASM,EAAI,EAAGA,EAAImB,EAAQ,OAAQnB,IAAK,CACrC,IAAML,EAAQwB,EAAQnB,CAAC,EACvB,QAASI,EAAI,EAAGA,EAAIc,EAAqB,OAAQd,IAC7CV,GAAUwB,EAAqBd,CAAC,EAAEX,EAAMC,EAAQC,CAAK,CAE7D,CACA,OAAOsB,EAAO,MAAM,EAAGvB,CAAM,CACjC,CACJ,EAOa0B,EAAyBJ,GAA+D,CACjG,IAAMK,EAAyBL,EAAW,IAAIX,CAA2B,EACzE,MAAO,CAACiB,EAAqBd,IAAgD,CACzE,IAAMf,EAAO,IAAI,SAAS6B,CAAM,EAC5B5B,EAAS,EACb,KAAOA,EAAS4B,EAAO,YACnB,QAAStB,EAAI,EAAGA,EAAIqB,EAAuB,OAAQrB,IAC/CN,GAAU2B,EAAuBrB,CAAC,EAAEP,EAAMC,EAAQc,CAAe,CAG7E,CACJ,ED5OA,SAASe,EAAsBC,EAAWC,EAAaC,EAAoBC,EAAgB,CACvF,GAAI,CAACH,EAAM,OAAOG,EAGlB,GAAI,MAAM,QAAQH,CAAI,EAAG,CACrB,IAAMI,EAAQJ,EAAKC,CAAG,EACtB,OAAIG,IAAU,QACVF,EAAS,WAAWC,EAAQC,CAAK,EAC1BD,EAAS,GAEbA,CACX,CAGA,GAAI,OAAOH,GAAS,SAAU,CAC1B,IAAMK,EAAO,OAAO,KAAKL,CAAI,EAAE,KAAK,EACpC,QAAWM,KAAOD,EAAM,CACpB,IAAME,EAAMP,EAAKM,CAAG,EACdF,EAAQG,EAAIN,CAAG,EAEjBG,IAAU,SACNG,aAAe,WAAaC,KAAOD,GACnCL,EAAS,QAAQC,EAAQC,CAAK,EAC9BD,GAAU,GACHI,aAAe,YAAcE,KAAOF,GAC3CL,EAAS,SAASC,EAAQC,CAAK,EAC/BD,GAAU,GACHI,aAAe,YAAcG,KAAQH,GAC5CL,EAAS,SAASC,EAAQC,CAAK,EAC/BD,GAAU,GACHI,aAAe,aAAeI,KAAQJ,GAC7CL,EAAS,UAAUC,EAAQC,CAAK,EAChCD,GAAU,GACHI,aAAe,YAAcK,KAAQL,GAC5CL,EAAS,SAASC,EAAQC,CAAK,EAC/BD,GAAU,GACHI,aAAe,aAAeM,KAAQN,GAC7CL,EAAS,UAAUC,EAAQC,CAAK,EAChCD,GAAU,GACHI,aAAe,cAAgBO,KAAQP,GAC9CL,EAAS,WAAWC,EAAQC,CAAK,EACjCD,GAAU,IAGVD,EAAS,WAAWC,EAAQC,CAAK,EACjCD,GAAU,GAGtB,CACJ,CAEA,OAAOA,CACX,CAKA,SAASY,GAAwBf,EAAWC,EAAaC,EAAoBC,EAAgB,CACzF,GAAI,CAACH,EAAM,OAAOG,EAGlB,GAAI,MAAM,QAAQH,CAAI,EAClB,OAAAA,EAAKC,CAAG,EAAIC,EAAS,WAAWC,CAAM,EAC/BA,EAAS,EAIpB,GAAI,OAAOH,GAAS,SAAU,CAC1B,IAAMK,EAAO,OAAO,KAAKL,CAAI,EAAE,KAAK,EACpC,QAAWM,KAAOD,EAAM,CACpB,IAAME,EAAMP,EAAKM,CAAG,EAEhBC,aAAe,WAAaC,KAAOD,GACnCA,EAAIN,CAAG,EAAIC,EAAS,QAAQC,CAAM,EAClCA,GAAU,GACHI,aAAe,YAAcE,KAAOF,GAC3CA,EAAIN,CAAG,EAAIC,EAAS,SAASC,CAAM,EACnCA,GAAU,GACHI,aAAe,YAAcG,KAAQH,GAC5CA,EAAIN,CAAG,EAAIC,EAAS,SAASC,CAAM,EACnCA,GAAU,GACHI,aAAe,aAAeI,KAAQJ,GAC7CA,EAAIN,CAAG,EAAIC,EAAS,UAAUC,CAAM,EACpCA,GAAU,GACHI,aAAe,YAAcK,KAAQL,GAC5CA,EAAIN,CAAG,EAAIC,EAAS,SAASC,CAAM,EACnCA,GAAU,GACHI,aAAe,aAAeM,KAAQN,GAC7CA,EAAIN,CAAG,EAAIC,EAAS,UAAUC,CAAM,EACpCA,GAAU,GACHI,aAAe,cAAgBO,KAAQP,GAC9CA,EAAIN,CAAG,EAAIC,EAAS,WAAWC,CAAM,EACrCA,GAAU,IAGVI,EAAIN,CAAG,EAAIC,EAAS,WAAWC,CAAM,EACrCA,GAAU,EAElB,CACJ,CAEA,OAAOA,CACX,CAKO,IAAMa,EAA2B,CAACC,EAAcC,EAA4BC,EAA4BC,EAAS,IAAI,YAAY,KAAO,KAAO,GAAG,IAAM,CAC3J,IAAMlB,EAAW,IAAI,SAASkB,CAAM,EAChCjB,EAAS,EACPkB,EAA0D,CAAC,EAC3DC,EAAkB,IAAI,IAE5B,OAAAC,EAAQN,EAAOO,EAAMN,CAAY,EAAIjB,GAAkB,CACnDoB,EAAM,KAAK,CAACpB,EAAK,EAAyB,EAAE,CAAC,CACjD,CAAC,EAEDsB,EAAQN,EAAOQ,EAASP,CAAY,EAAIjB,GAAkB,CACtDoB,EAAM,KAAK,CAACpB,EAAK,EAA4B,EAAE,CAAC,EAChDqB,EAAgB,OAAOrB,CAAG,CAC9B,CAAC,EAEDkB,EAAW,QAAQ,CAACO,EAAWC,IAAM,CAC7BC,EAAWF,CAAS,GACpBH,EAAQN,EAAOO,EAAMN,EAAcQ,EAAUG,CAAQ,CAAC,EAAI5B,GAAkB,CACxE,IAAM6B,EAAUC,EAAmBd,EAAOhB,EAAKyB,CAAS,EACxD,QAAWM,KAAUF,EAAS,CACrBR,EAAgB,IAAIrB,CAAG,GACxBqB,EAAgB,IAAIrB,EAAK,IAAI,GAAK,EAEtCqB,EAAgB,IAAIrB,CAAG,EAAE,IAAI0B,EAAGK,CAAM,EACtC,IAAMC,EAAeP,EAAUM,CAAM,EACrCX,EAAM,KAAK,CAACpB,EAAK,EAA2B0B,EAAGK,EAAQC,CAAY,CAAC,CACxE,CACJ,CAAC,EAEDV,EAAQN,EAAOQ,EAASP,EAAcQ,EAAUG,CAAQ,CAAC,EAAI5B,GAAkB,CAC3E,IAAMiC,EAAYZ,EAAgB,IAAIrB,CAAG,EACzC,GAAIiC,EAAW,CACX,IAAMF,EAASE,EAAU,IAAIP,CAAC,EAC1BK,IAAW,SACXX,EAAM,KAAK,CAACpB,EAAK,EAA8B0B,EAAGK,CAAM,CAAC,EACzDE,EAAU,OAAOP,CAAC,EACdO,EAAU,OAAS,GACnBZ,EAAgB,OAAOrB,CAAG,EAGtC,CACJ,CAAC,IAEDsB,EAAQN,EAAOO,EAAMN,EAAcQ,CAAS,EAAIzB,GAAkB,CAC9DoB,EAAM,KAAK,CAACpB,EAAK,EAA4B0B,CAAC,CAAC,CACnD,CAAC,EAEDJ,EAAQN,EAAOQ,EAASP,EAAcQ,CAAS,EAAIzB,GAAkB,CACjEoB,EAAM,KAAK,CAACpB,EAAK,EAA+B0B,CAAC,CAAC,CACtD,CAAC,EAET,CAAC,EAEM,IAAM,CACTxB,EAAS,EAET,QAASwB,EAAI,EAAGA,EAAIN,EAAM,OAAQM,IAAK,CACnC,GAAM,CAACQ,EAAUC,EAAMC,EAAaC,EAAUL,CAAY,EAAIZ,EAAMM,CAAC,EACrEzB,EAAS,UAAUC,EAAQgC,CAAQ,EACnChC,GAAU,EACVD,EAAS,SAASC,EAAQiC,CAAI,EAC9BjC,GAAU,GACNiC,IAAS,GACTA,IAAS,GACTA,IAAS,GACTA,IAAS,KACTlC,EAAS,SAASC,EAAQkC,CAAW,EACrClC,GAAU,GAENiC,IAAS,GAA6BA,IAAS,KAC/ClC,EAAS,UAAUC,EAAQmC,CAAQ,EACnCnC,GAAU,EAENiC,IAAS,GAA6BH,IACtC9B,EAASJ,EAAsBkC,EAAcE,EAAUjC,EAAUC,CAAM,IAIvF,CACA,OAAAkB,EAAM,OAAS,EAERD,EAAO,MAAM,EAAGjB,CAAM,CACjC,CACJ,EAKaoC,EAA6B,CAACtB,EAAcC,EAA4BC,EAA4BqB,IAA6C,CAC1J,IAAIC,EAAkBD,GAAsB,IAAI,IAEhD,MAAO,CAACE,EAAqBC,IAA0C,CAEnE,IAAMC,EAAiBD,GAAmBF,EACpCvC,EAAW,IAAI,SAASwC,CAAM,EAChCvC,EAAS,EAEb,KAAOA,EAASuC,EAAO,YAAY,CAC/B,IAAMG,EAAiB3C,EAAS,UAAUC,CAAM,EAChDA,GAAU,EACV,IAAM2C,EAAgB5C,EAAS,SAASC,CAAM,EAC9CA,GAAU,EACV,IAAIkC,EAAc,GACdC,EAAW,IAEXQ,IAAkB,GAClBA,IAAkB,GAClBA,IAAkB,GAClBA,IAAkB,KAClBT,EAAcnC,EAAS,SAASC,CAAM,EACtCA,GAAU,GAEN2C,IAAkB,GAA6BA,IAAkB,KACjER,EAAWpC,EAAS,UAAUC,CAAM,EACpCA,GAAU,IAIlB,IAAMuB,EAAYP,EAAWkB,CAAW,EACpCU,EAAgBH,EAAe,IAAIC,CAAc,EAErD,GAAIC,IAAkB,EACdC,IAAkB,QAClBA,EAAgBC,EAAU/B,CAAK,EAC/B2B,EAAe,IAAIC,EAAgBE,CAAa,EAChDE,EAAahC,EAAO8B,EAAe7B,CAAY,GAI/C,QAAQ,KAAK,8CAA8C2B,CAAc,mEAAmE,UAEzIE,IAAkB,QAAaG,EAAajC,EAAO8B,CAAa,GACvE,GAAID,IAAkB,EAClBK,EAAalC,EAAO8B,CAAa,EACjCH,EAAe,OAAOC,CAAc,UAC7BC,IAAkB,EACzBG,EAAahC,EAAO8B,EAAerB,CAAS,UACrCoB,IAAkB,EACzBM,EAAgBnC,EAAO8B,EAAerB,CAAS,UACxCoB,IAAkB,EAA2B,CACpD,IAAMO,EAAgBT,EAAe,IAAIN,CAAQ,EACjD,GAAIe,IAAkB,OAAW,CAC7B,IAAMC,EAAoB5B,EAAU2B,CAAa,EACjDJ,EAAahC,EAAO8B,EAAeO,CAAiB,EACpDnD,EAASY,GAAwBuC,EAAmBP,EAAe7C,EAAUC,CAAM,CACvF,CACJ,SAAW2C,IAAkB,EAA8B,CACvD,IAAMO,EAAgBT,EAAe,IAAIN,CAAQ,EAC7Ce,IAAkB,QAClBD,EAAgBnC,EAAO8B,EAAerB,EAAU2B,CAAa,CAAC,CAEtE,EAER,CAEA,OAAOT,CACX,CACJ,EE9RO,SAASW,GAA4CC,EAA4CC,EAAkC,CACxI,IAAMC,EAAU,IAAI,QAChBC,EAA0CC,EAC9C,MAAO,CAACC,EAAUC,IAAmB,CAC9BJ,EAAQ,IAAIG,CAAK,IACpBH,EAAQ,IAAIG,CAAK,EACjBF,EAAwBI,EAAyBF,EAAOL,EAAW,CAAC,EAAGA,CAAU,EACjFI,EAAgBI,EAAoBR,CAAyB,GAE/D,IAAMS,EAAeN,EAAsB,EACrCO,EAAUN,EAAcE,CAAI,EAE5BK,EAAe,IAAI,YAAYF,EAAa,WAAaC,EAAQ,UAAU,EAC3EE,EAAe,IAAI,WAAWD,CAAY,EAChD,OAAAC,EAAa,IAAI,IAAI,WAAWH,CAAY,EAAG,CAAC,EAChDG,EAAa,IAAI,IAAI,WAAWF,CAAO,EAAGD,EAAa,UAAU,EAC1DE,CACT,CACF,CAEO,SAASE,GAA8Cb,EAA6D,CACzH,IAAME,EAAU,IAAI,QAChBY,EAA8BC,EAClC,MAAO,CAACV,EAAUW,EAAqBC,IAAwB,CACxDf,EAAQ,IAAIG,CAAK,IACpBH,EAAQ,IAAIG,CAAK,EACjBS,EAA0BI,EAA2Bb,EAAOL,EAAW,CAAC,EAAGA,CAAU,EACrFe,EAAkBI,EAAsBnB,CAAU,GAEpD,IAAMoB,EAAqBN,EAAwBE,EAAQC,CAAI,EACzDP,EAAUM,EAAO,MAAMI,CAAkB,EAC/C,OAAOL,EAAgBL,EAASO,CAAI,CACtC,CACF,CAEO,IAAKI,QACRA,IAAA,qBACAA,IAAA,mBACAA,IAAA,aAHQA,QAAA,IHfL,IAAMC,GAAY,OAAO,WAAW,EAE3C,SAASC,EAASC,EAAGC,EAAK,CACxB,IAAMC,EAAQ,IAAM,CAACF,EAAGC,CAAG,EAC3B,OAAAC,EAAMJ,EAAS,EAAI,GACZI,CACT,CAEO,IAAMC,GAAOH,GAA0CD,EAASC,EAAG,KAAK,EAClEI,GAAMJ,GAA0CD,EAASC,EAAG,IAAI,EAChEK,GAAWL,GAA0CD,EAASC,EAAG,SAAS,EAEhF,SAASM,GAAuCC,EAAqD,CAC1G,IAAMC,EAAWC,GAAkBC,GAAMD,EAAOF,CAAU,EAC1D,OAAAC,EAAQ,WAAaD,EACdC,CACT,CAEO,SAASG,GAAsCH,EAA6B,CACjF,IAAII,EAAkB,CAAC,EACjBC,EAAU,IAAI,QACpB,OAAQJ,GAAa,CACdI,EAAQ,IAAIJ,CAAK,IACpBK,EAAQL,EAAOM,GAAM,GAAIP,EAAgB,UAAU,EAAIQ,GAAkBJ,EAAM,KAAKI,CAAG,CAAC,EACxFH,EAAQ,IAAIJ,CAAK,GAEnB,IAAMQ,EAAUL,EAAM,MAAM,EAC5B,OAAAA,EAAM,OAAS,EACRK,CACT,CACF,CAEO,SAASC,GAAqCV,EAA6B,CAChF,IAAII,EAAkB,CAAC,EACjBC,EAAU,IAAI,QACpB,OAAQJ,GAAa,CACdI,EAAQ,IAAIJ,CAAK,IACpBK,EAAQL,EAAOU,GAAS,GAAIX,EAAgB,UAAU,EAAIQ,GAAkBJ,EAAM,KAAKI,CAAG,CAAC,EAC3FH,EAAQ,IAAIJ,CAAK,GAEnB,IAAMQ,EAAUL,EAAM,MAAM,EAC5B,OAAAA,EAAM,OAAS,EACRK,CACT,CACF,CAEO,IAAMG,GAAe,CAACX,EAAeY,EAAyBL,IACnEM,GAAgBb,EAAOO,EAAKK,CAAS,EAE1BE,GAAe,CAACd,EAAeY,EAAyBL,IACnEQ,GAAgBf,EAAOO,EAAKK,CAAS,EAE1BI,GAAkB,CAAChB,EAAeY,EAAyBL,IACtEU,GAAmBjB,EAAOO,EAAKK,CAAS,EAoB7BM,GAAQ,CACnB,GAAI,KACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,IAAK,MACL,IAAK,MACL,IAAK,KACP,EA4BMC,EAAyC,CAC7C,GAAM,UACN,IAAO,WACP,KAAQ,kBACR,IAAO,WACP,KAAQ,YACR,IAAO,WACP,KAAQ,YACR,IAAO,aACP,IAAO,aACP,IAAO,WACT,EAeaC,GAAkB,CAAoBC,EAAWC,EAAc,MAA0B,CACpG,IAAMC,EAAY,CAAoBF,EAAWC,IAAkC,CACjF,IAAMV,EAAY,CAAC,EACnB,QAAWY,KAAOH,EAChB,GAAI,MAAM,QAAQA,EAAOG,CAAG,CAAC,EAAG,CAC9B,GAAM,CAACC,EAAMC,CAAM,EAAIL,EAAOG,CAAG,EACjCZ,EAAUY,CAAG,EAAI,MAAM,KAAK,CAAE,OAAAE,CAAO,EAAG,IAAM,IAAIP,EAAeM,CAAI,EAAEH,CAAG,CAAC,CAC7E,SAAW,OAAOD,EAAOG,CAAG,GAAM,SAChCZ,EAAUY,CAAG,EAAID,EAAUF,EAAOG,CAAG,EAAcF,CAAG,MACjD,CACL,IAAMG,EAAOJ,EAAOG,CAAG,EACjBG,EAAkBR,EAAeM,CAAI,EAC3C,GAAIE,EACFf,EAAUY,CAAG,EAAI,IAAIG,EAAgBL,CAAG,MAExC,OAAM,IAAI,MAAM,qBAAqBD,EAAOG,CAAG,CAAC,EAAE,CAEtD,CAEF,OAAOZ,CACT,EACA,OAAOW,EAAUF,EAAQC,CAAG,CAC9B",
  "names": ["observe", "onAdd", "onRemove", "query", "ecsAddComponent", "ecsHasComponent", "ecsRemoveComponent", "addComponent", "removeComponent", "addEntity", "removeEntity", "observe", "onAdd", "onRemove", "entityExists", "isRelation", "getRelationTargets", "Wildcard", "$u8", "$i8", "$u16", "$i16", "$u32", "$i32", "$f32", "$f64", "$arr", "typeTagForSerialization", "symbol", "a", "u8", "i8", "u16", "i16", "u32", "i32", "f32", "f64", "typeSetters", "view", "offset", "value", "typeGetters", "isTypedArrayOrBranded", "arr", "getTypeForArray", "symbol", "$u8", "$i8", "$u16", "$i16", "$u32", "$i32", "$f32", "$f64", "createComponentSerializer", "component", "type", "setter", "typeSetters", "view", "offset", "index", "bytesWritten", "props", "setters", "prop", "i", "elementType", "$arr", "length", "j", "createComponentDeserializer", "getter", "typeGetters", "entityIdMapping", "bytesRead", "originalIndex", "indexSize", "value", "size", "getters", "createSoASerializer", "components", "buffer", "componentSerializers", "indices", "createSoADeserializer", "componentDeserializers", "packet", "serializeRelationData", "data", "eid", "dataView", "offset", "value", "keys", "key", "arr", "$i8", "$u8", "$i16", "$u16", "$i32", "$u32", "$f32", "deserializeRelationData", "createObserverSerializer", "world", "networkedTag", "components", "buffer", "queue", "relationTargets", "observe", "onAdd", "onRemove", "component", "i", "isRelation", "Wildcard", "targets", "getRelationTargets", "target", "relationData", "targetMap", "entityId", "type", "componentId", "targetId", "createObserverDeserializer", "constructorMapping", "entityIdMapping", "packet", "overrideMapping", "currentMapping", "packetEntityId", "operationType", "worldEntityId", "addEntity", "addComponent", "entityExists", "removeEntity", "removeComponent", "worldTargetId", "relationComponent", "defineSerializer", "components", "maxBytes", "initSet", "serializeObservations", "serializeData", "world", "ents", "createObserverSerializer", "createSoASerializer", "observerData", "soaData", "combinedData", "combinedView", "defineDeserializer", "deserializeObservations", "deserializeData", "packet", "mode", "createObserverDeserializer", "createSoADeserializer", "observerDataLength", "DESERIALIZE_MODE", "$modifier", "modifier", "c", "mod", "inner", "Not", "Or", "Changed", "defineQuery", "components", "queryFn", "world", "query", "enterQuery", "queue", "initSet", "observe", "onAdd", "eid", "results", "exitQuery", "onRemove", "addComponent", "component", "ecsAddComponent", "hasComponent", "ecsHasComponent", "removeComponent", "ecsRemoveComponent", "Types", "arrayByTypeMap", "defineComponent", "schema", "max", "createSoA", "key", "type", "length", "TypeConstructor"]
}
