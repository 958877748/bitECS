{
  "version": 3,
  "sources": ["../../src/legacy/index.ts", "../../src/serialization/ObserverSerializer.ts", "../../src/serialization/SoASerializer.ts", "../../src/legacy/serialization.ts"],
  "sourcesContent": ["import { ComponentRef, observe, onAdd, onRemove, query, EntityId } from '../core'\nimport {\n  addComponent as ecsAddComponent,\n  hasComponent as ecsHasComponent,\n  removeComponent as ecsRemoveComponent\n} from '../core'\n\nexport interface IWorld { }\n\nexport type ComponentProp = TypedArray | Array<TypedArray>\n\nexport interface IComponentProp {\n}\n\nexport interface IComponent {\n}\n\nexport type Component = IComponent | ComponentType<ISchema>\n\nexport type QueryModifier = (c: IComponent[]) => IComponent | QueryModifier\n\nexport type Query<W extends IWorld = IWorld> = (world: W, clearDiff?: Boolean) => number[]\n\nexport const $modifier = Symbol(\"$modifier\")\n\nfunction modifier(c, mod) {\n  const inner = () => [c, mod]\n  inner[$modifier] = true\n  return inner\n}\n\nexport const Not = (c: Component | ISchema): QueryModifier => modifier(c, 'not')\nexport const Or = (c: Component | ISchema): QueryModifier => modifier(c, 'or')\nexport const Changed = (c: Component | ISchema): QueryModifier => modifier(c, 'changed')\n\nexport function defineQuery<W extends IWorld = IWorld>(components: (Component | QueryModifier)[]): Query<W> {\n  const queryFn = (world: IWorld) => query(world, components)\n  queryFn.components = components\n  return queryFn as unknown as Query<W>\n}\n\nexport function enterQuery<W extends IWorld = IWorld>(queryFn: Query<W>): Query<W> {\n  let queue: number[] = []\n  const initSet = new WeakSet<IWorld>()\n  return (world: W) => {\n    if (!initSet.has(world)) {\n      observe(world, onAdd(...(queryFn as any).components), (eid: EntityId) => queue.push(eid))\n      initSet.add(world)\n    }\n    const results = queue.slice()\n    queue.length = 0\n    return results\n  }\n}\n\nexport function exitQuery<W extends IWorld = IWorld>(queryFn: Query<W>): Query<W> {\n  let queue: number[] = []\n  const initSet = new WeakSet<IWorld>()\n  return (world: W) => {\n    if (!initSet.has(world)) {\n      observe(world, onRemove(...(queryFn as any).terms), (eid: EntityId) => queue.push(eid))\n      initSet.add(world)\n    }\n    const results = queue.slice()\n    queue.length = 0\n    return results\n  }\n}\n\nexport const addComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\n  ecsAddComponent(world, eid, component)\n\nexport const hasComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\n  ecsHasComponent(world, eid, component)\n\nexport const removeComponent = (world: IWorld, component: ComponentRef, eid: EntityId) =>\n  ecsRemoveComponent(world, eid, component)\n\nexport interface ISchema {\n  [key: string]: Type | ListType | ISchema\n}\n\nexport type Type =\n  | 'i8'\n  | 'ui8'\n  | 'ui8c'\n  | 'i16'\n  | 'ui16'\n  | 'i32'\n  | 'ui32'\n  | 'f32'\n  | 'f64'\n  | 'eid'\n\nexport type ListType = readonly [Type, number];\n\nexport const Types = {\n  i8: 'i8' as Type,\n  ui8: 'ui8' as Type,\n  ui8c: 'ui8c' as Type,\n  i16: 'i16' as Type,\n  ui16: 'ui16' as Type,\n  i32: 'i32' as Type,\n  ui32: 'ui32' as Type,\n  f32: 'f32' as Type,\n  f64: 'f64' as Type,\n  eid: 'eid' as Type\n};\n\nexport type TypedArray =\n  | Uint8Array\n  | Int8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array\n\nexport type ArrayByType = {\n  'i8': Int8Array;\n  'ui8': Uint8Array;\n  'ui8c': Uint8ClampedArray;\n  'i16': Int16Array;\n  'ui16': Uint16Array;\n  'i32': Int32Array;\n  'ui32': Uint32Array;\n  'f32': Float32Array;\n  'f64': Float64Array;\n  'eid': Uint32Array;\n}\n\n// ... existing code ...\n\nconst arrayByTypeMap: { [key in Type]: any } = {\n  'i8': Int8Array,\n  'ui8': Uint8Array,\n  'ui8c': Uint8ClampedArray,\n  'i16': Int16Array,\n  'ui16': Uint16Array,\n  'i32': Int32Array,\n  'ui32': Uint32Array,\n  'f32': Float32Array,\n  'f64': Float64Array,\n  'eid': Uint32Array,\n};\n\nexport type ComponentType<T extends ISchema> = {\n  [key in keyof T]:\n  T[key] extends Type\n  ? ArrayByType[T[key]]\n  : T[key] extends [infer RT, number]\n  ? RT extends Type\n  ? Array<ArrayByType[RT]>\n  : unknown\n  : T[key] extends ISchema\n  ? ComponentType<T[key]>\n  : unknown;\n};\n\nexport const defineComponent = <T extends ISchema>(schema: T, max: number = 1e5): ComponentType<T> => {\n  const createSoA = <U extends ISchema>(schema: U, max: number): ComponentType<U> => {\n    const component = {} as ComponentType<U>\n    for (const key in schema) {\n      if (Array.isArray(schema[key])) {\n        const [type, length] = schema[key] as [Type, number]\n        component[key] = Array.from({ length }, () => new arrayByTypeMap[type](max)) as any\n      } else if (typeof schema[key] === 'object') {\n        component[key] = createSoA(schema[key] as ISchema, max) as any\n      } else {\n        const type = schema[key] as Type;\n        const TypeConstructor = arrayByTypeMap[type];\n        if (TypeConstructor) {\n          component[key] = new TypeConstructor(max) as any;\n        } else {\n          throw new Error(`Unsupported type: ${schema[key]}`);\n        }\n      }\n    }\n    return component\n  }\n  return createSoA(schema, max)\n}\n\nexport * from './serialization'", "import {\n    addComponent,\n    removeComponent,\n    addEntity,\n    removeEntity,\n    observe,\n    onAdd,\n    onRemove,\n    World,\n    ComponentRef,\n} from '../core'\nimport { EntityId } from '../core/Entity'\n\nenum OperationType {\n    AddEntity = 0,\n    RemoveEntity = 1,\n    AddComponent = 2,\n    RemoveComponent = 3\n}\n\n/**\n * Creates a serializer for observing and serializing changes in networked entities.\n * @param {World} world - The ECS world object.\n * @param {any} networkedTag - The component used to tag networked entities.\n * @param {any[]} components - An array of components to observe for changes.\n * @param {ArrayBuffer} [buffer=new ArrayBuffer(1024 * 1024 * 100)] - The buffer to use for serialization.\n * @returns {Function} A function that, when called, serializes the queued changes and returns a slice of the buffer.\n */\nexport const createObserverSerializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], buffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const dataView = new DataView(buffer)\n    let offset = 0\n    const queue: [number, OperationType, number][] = []\n    \n    observe(world, onAdd(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.AddEntity, -1])\n    })\n\n    observe(world, onRemove(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.RemoveEntity, -1])\n    })\n\n    components.forEach((component, i) => {\n        observe(world, onAdd(networkedTag, component), (eid: EntityId) => {\n            queue.push([eid, OperationType.AddComponent, i])\n        })\n\n        observe(world, onRemove(networkedTag, component), (eid: EntityId) => {\n            queue.push([eid, OperationType.RemoveComponent, i])\n        })\n    })\n\n    return () => {\n        offset = 0\n        \n        for (let i = 0; i < queue.length; i++) {\n            const [entityId, type, componentId] = queue[i]\n            dataView.setUint32(offset, entityId)\n            offset += 4\n            dataView.setUint8(offset, type)\n            offset += 1\n            dataView.setUint8(offset, componentId)\n            offset += 1\n        }\n        queue.length = 0\n\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer for applying serialized changes to a world.\n * @param {World} world - The ECS world object.\n * @param {any} networkedTag - The component used to tag networked entities.\n * @param {any[]} components - An array of components that can be added or removed.\n * @returns {Function} A function that takes a serialized packet and an optional entity ID mapping, and applies the changes to the world.\n */\nexport const createObserverDeserializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[]) => {\n    return (packet: ArrayBuffer, entityIdMapping: Map<number, number> = new Map()) => {\n        const dataView = new DataView(packet)\n        let offset = 0\n\n        while (offset < packet.byteLength) {\n            const packetEntityId = dataView.getUint32(offset)\n            offset += 4\n            const operationType = dataView.getUint8(offset)\n            offset += 1\n            const componentId = dataView.getUint8(offset)\n            offset += 1\n\n            const component = components[componentId]\n\n            let worldEntityId = entityIdMapping.get(packetEntityId)\n            if (worldEntityId === undefined) {\n                worldEntityId = addEntity(world)\n                entityIdMapping.set(packetEntityId, worldEntityId)\n            }\n            if (operationType === OperationType.AddEntity) {\n                addComponent(world, worldEntityId, networkedTag)\n            } else if (operationType === OperationType.RemoveEntity) {\n                removeEntity(world, worldEntityId)\n            } else if (operationType === OperationType.AddComponent) {\n                addComponent(world, worldEntityId, component)\n            } else if (operationType === OperationType.RemoveComponent) {\n                removeComponent(world, worldEntityId, component)\n            }\n        }\n\n        return entityIdMapping\n    }\n}\n", "import { ComponentRef } from \"../core\"\n\n/**\n * Symbols representing different data types for serialization.\n */\nconst $u8 = Symbol('u8'), $i8 = Symbol('i8'), $u16 = Symbol('u16'), $i16 = Symbol('i16'),\n    $u32 = Symbol('u32'), $i32 = Symbol('i32'), $f32 = Symbol('f32'), $f64 = Symbol('f64')\n\n/**\n * Union type of all possible TypedArray types.\n */\nexport type TypedArray = \n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array\n\n/**\n * Union type of all possible type symbols.\n */\nexport type TypeSymbol = typeof $u8 | typeof $i8 | typeof $u16 | typeof $i16 | typeof $u32 | typeof $i32 | typeof $f32 | typeof $f64\n\n/**\n * Type representing a primitive brand, which is either a number array with a symbol property or a TypedArray.\n */\nexport type PrimitiveBrand = (number[] & { [key: symbol]: true }) | TypedArray\n\n/**\n * Creates a function that tags an array with a type symbol for serialization.\n * @param {TypeSymbol} symbol - The type symbol to tag the array with.\n * @returns {Function} A function that tags an array with the given type symbol.\n */\nconst typeTagForSerialization = (symbol: TypeSymbol) => (a: number[] = []): PrimitiveBrand => \n    Object.defineProperty(a, symbol, { value: true, enumerable: false, writable: false, configurable: false }) as PrimitiveBrand\n\n/**\n * Functions to create arrays tagged with specific type symbols.\n */\nexport const u8 = typeTagForSerialization($u8),     i8 = typeTagForSerialization($i8),\n            u16 = typeTagForSerialization($u16),    i16 = typeTagForSerialization($i16),\n            u32 = typeTagForSerialization($u32),    i32 = typeTagForSerialization($i32),\n            f32 = typeTagForSerialization($f32),    f64 = typeTagForSerialization($f64)\n\n/**\n * Object containing setter functions for each data type.\n */\nconst typeSetters = {\n    [$u8]: (view: DataView, offset: number, value: number) => { view.setUint8(offset, value); return 1; },\n    [$i8]: (view: DataView, offset: number, value: number) => { view.setInt8(offset, value); return 1; },\n    [$u16]: (view: DataView, offset: number, value: number) => { view.setUint16(offset, value); return 2; },\n    [$i16]: (view: DataView, offset: number, value: number) => { view.setInt16(offset, value); return 2; },\n    [$u32]: (view: DataView, offset: number, value: number) => { view.setUint32(offset, value); return 4; },\n    [$i32]: (view: DataView, offset: number, value: number) => { view.setInt32(offset, value); return 4; },\n    [$f32]: (view: DataView, offset: number, value: number) => { view.setFloat32(offset, value); return 4; },\n    [$f64]: (view: DataView, offset: number, value: number) => { view.setFloat64(offset, value); return 8; }\n}\n\n/**\n * Object containing getter functions for each data type.\n */\nconst typeGetters = {\n    [$u8]: (view: DataView, offset: number) => ({ value: view.getUint8(offset), size: 1 }),\n    [$i8]: (view: DataView, offset: number) => ({ value: view.getInt8(offset), size: 1 }),\n    [$u16]: (view: DataView, offset: number) => ({ value: view.getUint16(offset), size: 2 }),\n    [$i16]: (view: DataView, offset: number) => ({ value: view.getInt16(offset), size: 2 }),\n    [$u32]: (view: DataView, offset: number) => ({ value: view.getUint32(offset), size: 4 }),\n    [$i32]: (view: DataView, offset: number) => ({ value: view.getInt32(offset), size: 4 }),\n    [$f32]: (view: DataView, offset: number) => ({ value: view.getFloat32(offset), size: 4 }),\n    [$f64]: (view: DataView, offset: number) => ({ value: view.getFloat64(offset), size: 8 })\n}\n\n/**\n * Creates a serializer function for a component.\n * @param {ComponentRef} component - The component to create a serializer for.\n * @returns {Function} A function that serializes the component.\n */\nexport const createComponentSerializer = (component: ComponentRef) => {\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64]) {\n            if (symbol in arr) return symbol\n        }\n        return $f64; // default to float64 if no type is specified\n    })\n    const setters = types.map(type => typeSetters[type as keyof typeof typeSetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, index: number) => {\n        let bytesWritten = 0\n        // Write index first\n        bytesWritten += typeSetters[$u32](view, offset + bytesWritten, index)\n        for (let i = 0; i < props.length; i++) {\n            bytesWritten += setters[i](view, offset + bytesWritten, component[props[i]][index])\n        }\n        return bytesWritten\n    }\n}\n\n/**\n * Creates a deserializer function for a component.\n * @param {ComponentRef} component - The component to create a deserializer for.\n * @returns {Function} A function that deserializes the component.\n */\nexport const createComponentDeserializer = (component: ComponentRef) => {\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64]) {\n            if (symbol in arr) return symbol\n        }\n        return $f64; // default to float64 if no type is specified\n    })\n    const getters = types.map(type => typeGetters[type as keyof typeof typeGetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\n        let bytesRead = 0\n\n        const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset + bytesRead)\n        bytesRead += indexSize\n        \n        const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\n        \n        for (let i = 0; i < props.length; i++) {\n            const { value, size } = getters[i](view, offset + bytesRead)\n            component[props[i]][index] = value\n            bytesRead += size\n        }\n        return bytesRead\n    }\n}\n\n/**\n * Creates a serializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to serialize.\n * @param {ArrayBuffer} [buffer] - The buffer to use for serialization.\n * @returns {Function} A function that serializes the SoA data.\n */\nexport const createSoASerializer = (components: ComponentRef[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const view = new DataView(buffer)\n    const componentSerializers = components.map(createComponentSerializer)\n    return (indices: number[]): ArrayBuffer => {\n        let offset = 0\n        for (let i = 0; i < indices.length; i++) {\n            const index = indices[i]\n            for (let j = 0; j < componentSerializers.length; j++) {\n                offset += componentSerializers[j](view, offset, index)\n            }\n        }\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to deserialize.\n * @returns {Function} A function that deserializes the SoA data.\n */\nexport const createSoADeserializer = (components: ComponentRef[]) => {\n    const componentDeserializers = components.map(createComponentDeserializer)\n    return (packet: ArrayBuffer, entityIdMapping?: Map<number, number>): void => {\n        const view = new DataView(packet)\n        let offset = 0\n        while (offset < packet.byteLength) {\n            for (let i = 0; i < componentDeserializers.length; i++) {\n                offset += componentDeserializers[i](view, offset, entityIdMapping)\n            }\n        }\n    }\n}\n", "\nimport { createObserverSerializer, createObserverDeserializer } from '../serialization/ObserverSerializer'\nimport { createSoASerializer, createSoADeserializer } from '../serialization/SoASerializer'\nimport { IWorld, Component, IComponentProp, query } from '../core'\n\nexport type Serializer<W extends IWorld = IWorld> = (target: W | number[]) => ArrayBuffer\nexport type Deserializer<W extends IWorld = IWorld> = (world: W, packet: ArrayBuffer, mode?: 'full' | 'partial') => number[]\n\nexport function defineSerializer<W extends IWorld = IWorld>(components: Component[] | IComponentProp[], maxBytes?: number): Serializer<W> {\n  const initSet = new WeakSet<Component[] | IComponentProp[]>();\n  let serializeObservations: () => ArrayBuffer, serializeData: (indices: number[]) => ArrayBuffer;\n  return (world: W | number[]) => {\n    if (!initSet.has(components)) {\n      initSet.add(components);\n      serializeObservations = createObserverSerializer(world, components[0], components);\n      serializeData = createSoASerializer(components as Component[]);\n    }\n    const observerData = serializeObservations();\n    const soaData = serializeData(query(world, components) as number[]);\n    // Combine observer and soa data into a single ArrayBuffer\n    const combinedData = new ArrayBuffer(observerData.byteLength + soaData.byteLength);\n    const combinedView = new Uint8Array(combinedData);\n    combinedView.set(new Uint8Array(observerData), 0);\n    combinedView.set(new Uint8Array(soaData), observerData.byteLength);\n    return combinedData;\n  }\n}\n\nexport function defineDeserializer<W extends IWorld = IWorld>(components: Component[] | IComponentProp[]): Deserializer<W> {\n  const initSet = new WeakSet<Component[] | IComponentProp[]>();\n  let deserializeObservations: any, deserializeData: any\n  return (world: W, packet: ArrayBuffer, mode: any): number[] => {\n    if (!initSet.has(components)) {\n      initSet.add(components);\n      deserializeObservations = createObserverDeserializer(world, components[0], components);\n      deserializeData = createSoADeserializer(components);\n    }\n    const observerDataLength = deserializeObservations(packet, mode);\n    const soaData = packet.slice(observerDataLength);\n    return deserializeData(soaData, mode);\n  }\n}\n\nexport enum DESERIALIZE_MODE {\n    REPLACE,\n    APPEND,\n    MAP\n}"],
  "mappings": "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",
  "names": ["addComponent", "removeComponent", "import_core", "import_core", "DESERIALIZE_MODE", "addComponent", "ecsAddComponent", "ecsHasComponent", "removeComponent", "ecsRemoveComponent", "schema", "max"]
}
