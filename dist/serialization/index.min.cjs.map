{
  "version": 3,
  "sources": ["../../src/serialization/index.ts", "../../src/serialization/SoASerializer.ts", "../../src/serialization/SnapshotSerializer.ts", "../../src/serialization/ObserverSerializer.ts"],
  "sourcesContent": ["\nexport {\n    createSoASerializer,\n    createSoADeserializer,\n    u8, i8, u16, i16, u32, i32, f32, f64,\n    type PrimitiveBrand\n} from './SoASerializer'\n\nexport {\n    createSnapshotSerializer,\n    createSnapshotDeserializer\n} from './SnapshotSerializer'\n\nexport {\n    createObserverSerializer,\n    createObserverDeserializer\n} from './ObserverSerializer';", "import { ComponentRef } from \"bitecs\"\n\n/**\n * Symbols representing different data types for serialization.\n */\nexport const $u8 = Symbol('u8'), $i8 = Symbol('i8'), $u16 = Symbol('u16'), $i16 = Symbol('i16'),\n    $u32 = Symbol('u32'), $i32 = Symbol('i32'), $f32 = Symbol('f32'), $f64 = Symbol('f64')\n\n/**\n * Union type of all possible TypedArray types.\n */\nexport type TypedArray = \n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array\n\n/**\n * Union type of all possible type symbols.\n */\nexport type TypeSymbol = typeof $u8 | typeof $i8 | typeof $u16 | typeof $i16 | typeof $u32 | typeof $i32 | typeof $f32 | typeof $f64\n\n/**\n * Type representing a primitive brand, which is either a number array with a symbol property or a TypedArray.\n */\nexport type PrimitiveBrand = (number[] & { [key: symbol]: true }) | TypedArray\n\n/**\n * Creates a function that tags an array with a type symbol for serialization.\n * @param {TypeSymbol} symbol - The type symbol to tag the array with.\n * @returns {Function} A function that tags an array with the given type symbol.\n */\nconst typeTagForSerialization = (symbol: TypeSymbol) => (a: number[] = []): PrimitiveBrand => \n    Object.defineProperty(a, symbol, { value: true, enumerable: false, writable: false, configurable: false }) as PrimitiveBrand\n\n/**\n * Functions to create arrays tagged with specific type symbols.\n */\nexport const u8 = typeTagForSerialization($u8),     i8 = typeTagForSerialization($i8),\n            u16 = typeTagForSerialization($u16),    i16 = typeTagForSerialization($i16),\n            u32 = typeTagForSerialization($u32),    i32 = typeTagForSerialization($i32),\n            f32 = typeTagForSerialization($f32),    f64 = typeTagForSerialization($f64)\n\n/**\n * Object containing setter functions for each data type.\n */\nconst typeSetters = {\n    [$u8]: (view: DataView, offset: number, value: number) => { view.setUint8(offset, value); return 1; },\n    [$i8]: (view: DataView, offset: number, value: number) => { view.setInt8(offset, value); return 1; },\n    [$u16]: (view: DataView, offset: number, value: number) => { view.setUint16(offset, value); return 2; },\n    [$i16]: (view: DataView, offset: number, value: number) => { view.setInt16(offset, value); return 2; },\n    [$u32]: (view: DataView, offset: number, value: number) => { view.setUint32(offset, value); return 4; },\n    [$i32]: (view: DataView, offset: number, value: number) => { view.setInt32(offset, value); return 4; },\n    [$f32]: (view: DataView, offset: number, value: number) => { view.setFloat32(offset, value); return 4; },\n    [$f64]: (view: DataView, offset: number, value: number) => { view.setFloat64(offset, value); return 8; }\n}\n\n/**\n * Object containing getter functions for each data type.\n */\nconst typeGetters = {\n    [$u8]: (view: DataView, offset: number) => ({ value: view.getUint8(offset), size: 1 }),\n    [$i8]: (view: DataView, offset: number) => ({ value: view.getInt8(offset), size: 1 }),\n    [$u16]: (view: DataView, offset: number) => ({ value: view.getUint16(offset), size: 2 }),\n    [$i16]: (view: DataView, offset: number) => ({ value: view.getInt16(offset), size: 2 }),\n    [$u32]: (view: DataView, offset: number) => ({ value: view.getUint32(offset), size: 4 }),\n    [$i32]: (view: DataView, offset: number) => ({ value: view.getInt32(offset), size: 4 }),\n    [$f32]: (view: DataView, offset: number) => ({ value: view.getFloat32(offset), size: 4 }),\n    [$f64]: (view: DataView, offset: number) => ({ value: view.getFloat64(offset), size: 8 })\n}\n\n/**\n * Creates a serializer function for a component.\n * @param {ComponentRef} component - The component to create a serializer for.\n * @returns {Function} A function that serializes the component.\n */\nexport const createComponentSerializer = (component: ComponentRef) => {\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64]) {\n            if (symbol in arr) return symbol\n        }\n        return $f64; // default to float64 if no type is specified\n    })\n    const setters = types.map(type => typeSetters[type as keyof typeof typeSetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, index: number) => {\n        let bytesWritten = 0\n        // Write index first\n        bytesWritten += typeSetters[$u32](view, offset + bytesWritten, index)\n        for (let i = 0; i < props.length; i++) {\n            bytesWritten += setters[i](view, offset + bytesWritten, component[props[i]][index])\n        }\n        return bytesWritten\n    }\n}\n\n/**\n * Creates a deserializer function for a component.\n * @param {ComponentRef} component - The component to create a deserializer for.\n * @returns {Function} A function that deserializes the component.\n */\nexport const createComponentDeserializer = (component: ComponentRef) => {\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64]) {\n            if (symbol in arr) return symbol\n        }\n        return $f64; // default to float64 if no type is specified\n    })\n    const getters = types.map(type => typeGetters[type as keyof typeof typeGetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\n        let bytesRead = 0\n\n        const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset + bytesRead)\n        bytesRead += indexSize\n        \n        const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\n        \n        for (let i = 0; i < props.length; i++) {\n            const { value, size } = getters[i](view, offset + bytesRead)\n            component[props[i]][index] = value\n            bytesRead += size\n        }\n        return bytesRead\n    }\n}\n\n/**\n * Creates a serializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to serialize.\n * @param {ArrayBuffer} [buffer] - The buffer to use for serialization.\n * @returns {Function} A function that serializes the SoA data.\n */\nexport const createSoASerializer = (components: ComponentRef[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const view = new DataView(buffer)\n    const componentSerializers = components.map(createComponentSerializer)\n    return (indices: number[]): ArrayBuffer => {\n        let offset = 0\n        for (let i = 0; i < indices.length; i++) {\n            const index = indices[i]\n            for (let j = 0; j < componentSerializers.length; j++) {\n                offset += componentSerializers[j](view, offset, index)\n            }\n        }\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to deserialize.\n * @returns {Function} A function that deserializes the SoA data.\n */\nexport const createSoADeserializer = (components: ComponentRef[]) => {\n    const componentDeserializers = components.map(createComponentDeserializer)\n    return (packet: ArrayBuffer, entityIdMapping?: Map<number, number>): void => {\n        const view = new DataView(packet)\n        let offset = 0\n        while (offset < packet.byteLength) {\n            for (let i = 0; i < componentDeserializers.length; i++) {\n                offset += componentDeserializers[i](view, offset, entityIdMapping)\n            }\n        }\n    }\n}\n", "import { createSoASerializer, createSoADeserializer, PrimitiveBrand } from './SoASerializer'\nimport {\n    addComponent,\n    hasComponent,\n    World,\n    getAllEntities,\n    addEntity,\n    isRelation,\n    getRelationTargets,\n    Wildcard,\n    Relation,\n    ComponentRef\n} from 'bitecs'\n\n/**\n * Creates a snapshot serializer for the given world and components.\n * @param {World} world - The ECS world object.\n * @param {Record<string, PrimitiveBrand>[]} components - An array of component definitions.\n * @param {ArrayBuffer} [buffer=new ArrayBuffer(1024 * 1024 * 100)] - The buffer to use for serialization.\n * @returns {Function} A function that, when called, serializes the world state and returns a slice of the buffer.\n */\nexport const createSnapshotSerializer = (world: World, components: (Record<string, PrimitiveBrand> | ComponentRef)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const dataView = new DataView(buffer)\n    let offset = 0\n\n    /**\n     * Serializes entity-component relationships.\n     * @param {number[]} entities - An array of entity IDs.\n     */\n    const serializeEntityComponentRelationships = (entities: number[]) => {\n        const entityCount = entities.length\n        \n        // Write entity count\n        dataView.setUint32(offset, entityCount)\n        offset += 4\n\n        // Serialize entity-component relationships\n        for (let i = 0; i < entityCount; i++) {\n            const entityId = entities[i]\n            let componentCount = 0\n            \n            dataView.setUint32(offset, entityId)\n            offset += 4\n            \n            const componentCountOffset = offset\n            offset += 1\n            \n            for (let j = 0; j < components.length; j++) {\n                const component = components[j]\n                if (isRelation(component)) {\n                    const targets = getRelationTargets(world, entityId, component as Relation<any>)\n                    for (const target of targets) {\n                        dataView.setUint8(offset, j)\n                        offset += 1\n                        dataView.setUint32(offset, target)\n                        offset += 4\n                        componentCount++\n                    }\n                } else if (hasComponent(world, entityId, component)) {\n                    dataView.setUint8(offset, j)\n                    offset += 1\n                    componentCount++\n                }\n            }\n            \n            dataView.setUint8(componentCountOffset, componentCount)\n        }\n    }\n\n    /**\n     * Serializes component data for all entities.\n     * @param {number[]} entities - An array of entity IDs.\n     */\n    const serializeComponentData = (entities: number[]) => {\n        const soaSerializer = createSoASerializer(components, buffer.slice(offset))\n        const componentData = soaSerializer(entities)\n        new Uint8Array(buffer).set(new Uint8Array(componentData), offset)\n        offset += componentData.byteLength\n    }\n\n    return () => {\n        offset = 0\n        const entities = getAllEntities(world)\n        serializeEntityComponentRelationships(entities)\n        serializeComponentData(entities)\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a snapshot deserializer for the given world and components.\n * @param {World} world - The ECS world object.\n * @param {Record<string, PrimitiveBrand>[]} components - An array of component definitions.\n * @returns {Function} A function that takes a serialized packet and deserializes it into the world, returning a map of packet entity IDs to world entity IDs.\n */\nexport const createSnapshotDeserializer = (world: World, components: (Record<string, PrimitiveBrand> | ComponentRef)[]) => {\n    const soaDeserializer = createSoADeserializer(components)\n\n    return (packet: ArrayBuffer): Map<number, number> => {\n        const dataView = new DataView(packet)\n        let offset = 0\n        const entityIdMap = new Map<number, number>()\n\n        // Read entity count\n        const entityCount = dataView.getUint32(offset)\n        offset += 4\n\n        // Deserialize entity-component relationships\n        for (let entityIndex = 0; entityIndex < entityCount; entityIndex++) {\n            const packetEntityId = dataView.getUint32(offset)\n            offset += 4\n\n            const worldEntityId = addEntity(world)\n            entityIdMap.set(packetEntityId, worldEntityId)\n\n            const componentCount = dataView.getUint8(offset)\n            offset += 1\n\n            for (let i = 0; i < componentCount; i++) {\n                const componentIndex = dataView.getUint8(offset)\n                offset += 1\n                const component = components[componentIndex]\n                \n                if (isRelation(component)) {\n                    const targetId = dataView.getUint32(offset)\n                    offset += 4\n                    // We need to wait until all entities are created before adding relations\n                    // Store relation info to add later\n                    if (!entityIdMap.has(targetId)) {\n                        const worldTargetId = addEntity(world)\n                        entityIdMap.set(targetId, worldTargetId)\n                    }\n                    const worldTargetId = entityIdMap.get(targetId)\n                    addComponent(world, worldEntityId, (component as (target: any) => any)(worldTargetId))\n                } else {\n                    addComponent(world, worldEntityId, component)\n                }\n            }\n        }\n\n        // Deserialize component data\n        soaDeserializer(packet.slice(offset), entityIdMap)\n\n        return entityIdMap\n    }\n}\n", "import {\n    addComponent,\n    removeComponent,\n    addEntity,\n    removeEntity,\n    observe,\n    onAdd,\n    onRemove,\n    World,\n    ComponentRef,\n    entityExists,\n    isRelation,\n    getRelationTargets,\n    Wildcard,\n    EntityId\n} from 'bitecs'\n\nenum OperationType {\n    AddEntity = 0,\n    RemoveEntity = 1,\n    AddComponent = 2,\n    RemoveComponent = 3,\n    AddRelation = 4,\n    RemoveRelation = 5,\n}\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\n\n/**\n * Serializes relation data for a specific entity\n */\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        const value = data[eid]\n        if (value !== undefined) {\n            dataView.setFloat64(offset, value)\n            return offset + 8\n        }\n        return offset\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            const value = arr[eid]\n            \n            if (value !== undefined) {\n                if (arr instanceof Int8Array || $i8 in arr) {\n                    dataView.setInt8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\n                    dataView.setUint8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Int16Array || $i16 in arr) {\n                    dataView.setInt16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\n                    dataView.setUint16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Int32Array || $i32 in arr) {\n                    dataView.setInt32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\n                    dataView.setUint32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Float32Array || $f32 in arr) {\n                    dataView.setFloat32(offset, value)\n                    offset += 4\n                } else {\n                    // Default to f64\n                    dataView.setFloat64(offset, value)\n                    offset += 8\n                }\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Deserializes relation data for a specific entity\n */\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        data[eid] = dataView.getFloat64(offset)\n        return offset + 8\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            \n            if (arr instanceof Int8Array || $i8 in arr) {\n                arr[eid] = dataView.getInt8(offset)\n                offset += 1\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\n                arr[eid] = dataView.getUint8(offset)\n                offset += 1\n            } else if (arr instanceof Int16Array || $i16 in arr) {\n                arr[eid] = dataView.getInt16(offset)\n                offset += 2\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\n                arr[eid] = dataView.getUint16(offset)\n                offset += 2\n            } else if (arr instanceof Int32Array || $i32 in arr) {\n                arr[eid] = dataView.getInt32(offset)\n                offset += 4\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\n                arr[eid] = dataView.getUint32(offset)\n                offset += 4\n            } else if (arr instanceof Float32Array || $f32 in arr) {\n                arr[eid] = dataView.getFloat32(offset)\n                offset += 4\n            } else {\n                // Default to f64\n                arr[eid] = dataView.getFloat64(offset)\n                offset += 8\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Creates a serializer for observing and serializing changes in networked entities.\n */\nexport const createObserverSerializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], buffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const dataView = new DataView(buffer)\n    let offset = 0\n    const queue: [number, OperationType, number, number?, any?][] = []\n    const relationTargets = new Map<number, Map<number, number>>()\n    \n    observe(world, onAdd(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.AddEntity, -1])\n    })\n\n    observe(world, onRemove(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.RemoveEntity, -1])\n        relationTargets.delete(eid)\n    })\n\n    components.forEach((component, i) => {\n        if (isRelation(component)) {\n            observe(world, onAdd(networkedTag, component(Wildcard)), (eid: EntityId) => {\n                const targets = getRelationTargets(world, eid, component)\n                for (const target of targets) {\n                    if (!relationTargets.has(eid)) {\n                        relationTargets.set(eid, new Map())\n                    }\n                    relationTargets.get(eid).set(i, target)\n                    const relationData = component(target)\n                    queue.push([eid, OperationType.AddRelation, i, target, relationData])\n                }\n            })\n\n            observe(world, onRemove(networkedTag, component(Wildcard)), (eid: EntityId) => {\n                const targetMap = relationTargets.get(eid)\n                if (targetMap) {\n                    const target = targetMap.get(i)\n                    if (target !== undefined) {\n                        queue.push([eid, OperationType.RemoveRelation, i, target])\n                        targetMap.delete(i)\n                        if (targetMap.size === 0) {\n                            relationTargets.delete(eid)\n                        }\n                    }\n                }\n            })\n        } else {\n            observe(world, onAdd(networkedTag, component), (eid: EntityId) => {\n                queue.push([eid, OperationType.AddComponent, i])\n            })\n\n            observe(world, onRemove(networkedTag, component), (eid: EntityId) => {\n                queue.push([eid, OperationType.RemoveComponent, i])\n            })\n        }\n    })\n    \n    return () => {\n        offset = 0\n        \n        for (let i = 0; i < queue.length; i++) {\n            const [entityId, type, componentId, targetId, relationData] = queue[i]\n            dataView.setUint32(offset, entityId)\n            offset += 4\n            dataView.setUint8(offset, type)\n            offset += 1\n            if (type === OperationType.AddComponent || \n                type === OperationType.RemoveComponent || \n                type === OperationType.AddRelation ||\n                type === OperationType.RemoveRelation) {\n                dataView.setUint8(offset, componentId)\n                offset += 1\n                \n                if (type === OperationType.AddRelation || type === OperationType.RemoveRelation) {\n                    dataView.setUint32(offset, targetId)\n                    offset += 4\n                    \n                    if (type === OperationType.AddRelation && relationData) {\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\n                    }\n                }\n            }\n        }\n        queue.length = 0\n\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer for applying serialized changes to a world.\n */\nexport const createObserverDeserializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], entityIdMapping: Map<number, number> = new Map()) => {\n    return (packet: ArrayBuffer) => {\n        const dataView = new DataView(packet)\n        let offset = 0\n\n        while (offset < packet.byteLength) {\n            const packetEntityId = dataView.getUint32(offset)\n            offset += 4\n            const operationType = dataView.getUint8(offset)\n            offset += 1\n            let componentId = -1\n            let targetId = -1\n            \n            if (operationType === OperationType.AddComponent || \n                operationType === OperationType.RemoveComponent ||\n                operationType === OperationType.AddRelation ||\n                operationType === OperationType.RemoveRelation) {\n                componentId = dataView.getUint8(offset)\n                offset += 1\n                \n                if (operationType === OperationType.AddRelation || operationType === OperationType.RemoveRelation) {\n                    targetId = dataView.getUint32(offset)\n                    offset += 4\n                }\n            }\n\n            const component = components[componentId]\n            let worldEntityId = entityIdMapping.get(packetEntityId)\n\n            if (operationType === OperationType.AddEntity) {\n                if (worldEntityId === undefined) {\n                    worldEntityId = addEntity(world)\n                    entityIdMapping.set(packetEntityId, worldEntityId)\n                    addComponent(world, worldEntityId, networkedTag)\n                } else {\n                    throw new Error(`Entity with ID ${packetEntityId} already exists in the mapping.`)\n                }\n            } else if (worldEntityId !== undefined && entityExists(world, worldEntityId)) {\n                if (operationType === OperationType.RemoveEntity) {\n                    removeEntity(world, worldEntityId)\n                } else if (operationType === OperationType.AddComponent) {\n                    addComponent(world, worldEntityId, component)\n                } else if (operationType === OperationType.RemoveComponent) {\n                    removeComponent(world, worldEntityId, component)\n                } else if (operationType === OperationType.AddRelation) {\n                    const worldTargetId = entityIdMapping.get(targetId)\n                    if (worldTargetId !== undefined) {\n                        const relationComponent = component(worldTargetId)\n                        addComponent(world, worldEntityId, relationComponent)\n                        offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\n                    }\n                } else if (operationType === OperationType.RemoveRelation) {\n                    const worldTargetId = entityIdMapping.get(targetId)\n                    if (worldTargetId !== undefined) {\n                        removeComponent(world, worldEntityId, component(worldTargetId))\n                    }\n                }\n            }\n        }\n\n        return entityIdMapping\n    }\n}\n"],
  "mappings": "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",
  "names": ["serialization_exports", "__export", "createObserverDeserializer", "createObserverSerializer", "createSnapshotDeserializer", "createSnapshotSerializer", "createSoADeserializer", "createSoASerializer", "f32", "f64", "i16", "i32", "i8", "u16", "u32", "u8", "__toCommonJS", "$u8", "$i8", "$u16", "$i16", "$u32", "$i32", "$f32", "$f64", "typeTagForSerialization", "symbol", "a", "u8", "i8", "u16", "i16", "u32", "i32", "f32", "f64", "typeSetters", "view", "offset", "value", "typeGetters", "createComponentSerializer", "component", "props", "setters", "prop", "arr", "type", "index", "bytesWritten", "i", "createComponentDeserializer", "getters", "entityIdMapping", "bytesRead", "originalIndex", "indexSize", "size", "createSoASerializer", "components", "buffer", "componentSerializers", "indices", "j", "createSoADeserializer", "componentDeserializers", "packet", "import_bitecs", "createSnapshotSerializer", "world", "components", "buffer", "dataView", "offset", "serializeEntityComponentRelationships", "entities", "entityCount", "i", "entityId", "componentCount", "componentCountOffset", "j", "component", "targets", "target", "serializeComponentData", "componentData", "createSoASerializer", "createSnapshotDeserializer", "soaDeserializer", "createSoADeserializer", "packet", "entityIdMap", "entityIndex", "packetEntityId", "worldEntityId", "componentIndex", "targetId", "worldTargetId", "import_bitecs", "serializeRelationData", "data", "eid", "dataView", "offset", "value", "keys", "key", "arr", "$i8", "$u8", "$i16", "$u16", "$i32", "$u32", "$f32", "deserializeRelationData", "createObserverSerializer", "world", "networkedTag", "components", "buffer", "queue", "relationTargets", "component", "i", "targets", "target", "relationData", "targetMap", "entityId", "type", "componentId", "targetId", "createObserverDeserializer", "entityIdMapping", "packet", "packetEntityId", "operationType", "worldEntityId", "worldTargetId", "relationComponent"]
}
