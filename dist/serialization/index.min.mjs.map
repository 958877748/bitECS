{
  "version": 3,
  "sources": ["../../src/serialization/SoASerializer.ts", "../../src/serialization/SnapshotSerializer.ts", "../../src/serialization/ObserverSerializer.ts"],
  "sourcesContent": ["\r\n/**\r\n * Symbols representing different data types for serialization.\r\n */\r\nexport const $u8 = Symbol.for('bitecs-u8'), $i8 = Symbol.for('bitecs-i8'), $u16 = Symbol.for('bitecs-u16'), $i16 = Symbol.for('bitecs-i16'),\r\n    $u32 = Symbol.for('bitecs-u32'), $i32 = Symbol.for('bitecs-i32'), $f32 = Symbol.for('bitecs-f32'), $f64 = Symbol.for('bitecs-f64'),\r\n    $arr = Symbol.for('bitecs-arr')\r\n\r\n/**\r\n * Union type of all possible TypedArray types.\r\n */\r\nexport type TypedArray = \r\n    | Int8Array\r\n    | Uint8Array\r\n    | Int16Array\r\n    | Uint16Array\r\n    | Int32Array\r\n    | Uint32Array\r\n    | Float32Array\r\n    | Float64Array\r\n\r\n/**\r\n * Union type of all possible type symbols.\r\n */\r\nexport type TypeSymbol = typeof $u8 | typeof $i8 | typeof $u16 | typeof $i16 | typeof $u32 | typeof $i32 | typeof $f32 | typeof $f64\r\n\r\n/**\r\n * Type representing a primitive brand, which is either a number array with a symbol property or a TypedArray.\r\n */\r\nexport type PrimitiveBrand = (number[] & { [key: symbol]: true }) | TypedArray\r\n\r\n/**\r\n * Type representing a component reference, which is a record mapping string keys to either\r\n * a PrimitiveBrand (number array with type symbol) or TypedArray values.\r\n * Used to define the structure of components that can be serialized.\r\n */\r\ntype ComponentRef = Record<string, PrimitiveBrand | TypedArray>\r\n\r\n/**\r\n * Creates a function that tags an array with a type symbol for serialization.\r\n * @param {TypeSymbol} symbol - The type symbol to tag the array with.\r\n * @returns {Function} A function that tags an array with the given type symbol.\r\n */\r\nconst typeTagForSerialization = (symbol: TypeSymbol) => (a: number[] = []): PrimitiveBrand =>\r\n    Object.defineProperty(a, symbol, { value: true, enumerable: false, writable: false, configurable: false }) as PrimitiveBrand\r\n\r\n/**\r\n * Functions to create arrays tagged with specific type symbols.\r\n */\r\nexport const u8 = typeTagForSerialization($u8),     i8 = typeTagForSerialization($i8),\r\n            u16 = typeTagForSerialization($u16),    i16 = typeTagForSerialization($i16),\r\n            u32 = typeTagForSerialization($u32),    i32 = typeTagForSerialization($i32),\r\n            f32 = typeTagForSerialization($f32),    f64 = typeTagForSerialization($f64)\r\n\r\n/**\r\n * Object containing setter functions for each data type.\r\n */\r\nconst typeSetters = {\r\n    [$u8]: (view: DataView, offset: number, value: number) => { view.setUint8(offset, value); return 1; },\r\n    [$i8]: (view: DataView, offset: number, value: number) => { view.setInt8(offset, value); return 1; },\r\n    [$u16]: (view: DataView, offset: number, value: number) => { view.setUint16(offset, value); return 2; },\r\n    [$i16]: (view: DataView, offset: number, value: number) => { view.setInt16(offset, value); return 2; },\r\n    [$u32]: (view: DataView, offset: number, value: number) => { view.setUint32(offset, value); return 4; },\r\n    [$i32]: (view: DataView, offset: number, value: number) => { view.setInt32(offset, value); return 4; },\r\n    [$f32]: (view: DataView, offset: number, value: number) => { view.setFloat32(offset, value); return 4; },\r\n    [$f64]: (view: DataView, offset: number, value: number) => { view.setFloat64(offset, value); return 8; }\r\n}\r\n\r\n/**\r\n * Object containing getter functions for each data type.\r\n */\r\nconst typeGetters = {\r\n    [$u8]: (view: DataView, offset: number) => ({ value: view.getUint8(offset), size: 1 }),\r\n    [$i8]: (view: DataView, offset: number) => ({ value: view.getInt8(offset), size: 1 }),\r\n    [$u16]: (view: DataView, offset: number) => ({ value: view.getUint16(offset), size: 2 }),\r\n    [$i16]: (view: DataView, offset: number) => ({ value: view.getInt16(offset), size: 2 }),\r\n    [$u32]: (view: DataView, offset: number) => ({ value: view.getUint32(offset), size: 4 }),\r\n    [$i32]: (view: DataView, offset: number) => ({ value: view.getInt32(offset), size: 4 }),\r\n    [$f32]: (view: DataView, offset: number) => ({ value: view.getFloat32(offset), size: 4 }),\r\n    [$f64]: (view: DataView, offset: number) => ({ value: view.getFloat64(offset), size: 8 })\r\n}\r\n\r\nexport const array = <T extends any[] = []>(type: TypeSymbol = $f32)=>  {\r\n    const arr = [];\r\n\r\n    Object.defineProperty(arr, $arr, { value: type, enumerable: false, writable: false, configurable: false })\r\n\r\n    return arr as T[];\r\n}\r\n\r\n/**\r\n * Checks if a value is a TypedArray or branded array\r\n */\r\nfunction isTypedArrayOrBranded(arr: any): arr is PrimitiveBrand | TypedArray {\r\n    return arr && (\r\n        ArrayBuffer.isView(arr) || \r\n        (Array.isArray(arr) && typeof arr === 'object')\r\n    )\r\n}\r\n\r\n/**\r\n * Gets the type symbol for an array\r\n */\r\nfunction getTypeForArray(arr: PrimitiveBrand | TypedArray): TypeSymbol {\r\n    // Check for branded arrays first\r\n    for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64] as TypeSymbol[]) {\r\n        if (symbol in arr) return symbol\r\n    }\r\n    // Then check TypedArrays\r\n    if (arr instanceof Int8Array) return $i8\r\n    if (arr instanceof Uint8Array) return $u8\r\n    if (arr instanceof Int16Array) return $i16\r\n    if (arr instanceof Uint16Array) return $u16\r\n    if (arr instanceof Int32Array) return $i32\r\n    if (arr instanceof Uint32Array) return $u32\r\n    if (arr instanceof Float32Array) return $f32\r\n    return $f64\r\n}\r\n\r\n/**\r\n * Creates a serializer function for a component.\r\n * @param {ComponentRef} component - The component to create a serializer for.\r\n * @returns {Function} A function that serializes the component.\r\n */\r\nexport const createComponentSerializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\r\n    // Handle direct array case\r\n    if (isTypedArrayOrBranded(component)) {\r\n        const type = getTypeForArray(component)\r\n        const setter = typeSetters[type]\r\n        return (view: DataView, offset: number, index: number) => {\r\n            let bytesWritten = 0\r\n            bytesWritten += typeSetters[$u32](view, offset, index)\r\n            bytesWritten += setter(view, offset + bytesWritten, component[index])\r\n            return bytesWritten\r\n        }\r\n    }\r\n\r\n    // Handle component case\r\n    const props = Object.keys(component)\r\n    const types = props.map(prop => {\r\n        const arr = component[prop]\r\n        if (!isTypedArrayOrBranded(arr)) {\r\n            throw new Error(`Invalid array type for property ${prop}`)\r\n        }\r\n        return getTypeForArray(arr)\r\n    })\r\n    const setters = types.map(type => typeSetters[type as keyof typeof typeSetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\r\n    return (view: DataView, offset: number, index: number) => {\r\n        let bytesWritten = 0\r\n        // Write index first\r\n        bytesWritten += typeSetters[$u32](view, offset + bytesWritten, index)\r\n        for (let i = 0; i < props.length; i++) {\r\n            const elementType: TypeSymbol = component[props[i]][$arr]\r\n            const componentValue = component[props[i]][index]\r\n            if (elementType === undefined) {\r\n                bytesWritten += setters[i](view, offset + bytesWritten, componentValue)\r\n                continue\r\n            }\r\n            const isArray = Array.isArray(componentValue)\r\n            bytesWritten += typeSetters[$u8](view, offset + bytesWritten, isArray ? 1 : 0)\r\n            if (!isArray) {\r\n                continue;\r\n            }\r\n            const arr = componentValue as number[]\r\n            const length = arr.length\r\n            bytesWritten += typeSetters[$u32](view, offset + bytesWritten, length)\r\n            for (let j = 0; j < length; j++) {\r\n                bytesWritten += typeSetters[elementType](view, offset + bytesWritten, arr[j])\r\n            }\r\n        }\r\n        return bytesWritten\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deserializer function for a component.\r\n * @param {ComponentRef} component - The component to create a deserializer for.\r\n * @returns {Function} A function that deserializes the component.\r\n */\r\nexport const createComponentDeserializer = (component: ComponentRef | PrimitiveBrand | TypedArray) => {\r\n    // Handle direct array case\r\n    if (isTypedArrayOrBranded(component)) {\r\n        const type = getTypeForArray(component)\r\n        const getter = typeGetters[type]\r\n        return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\r\n            let bytesRead = 0\r\n            const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset)\r\n            bytesRead += indexSize\r\n            const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\r\n            const { value, size } = getter(view, offset + bytesRead)\r\n            component[index] = value\r\n            return bytesRead + size\r\n        }\r\n    }\r\n\r\n    // Handle component case\r\n    const props = Object.keys(component)\r\n    const types = props.map(prop => {\r\n        const arr = component[prop]\r\n        if (!isTypedArrayOrBranded(arr)) {\r\n            throw new Error(`Invalid array type for property ${prop}`)\r\n        }\r\n        return getTypeForArray(arr)\r\n    })\r\n    const getters = types.map(type => typeGetters[type as keyof typeof typeGetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\r\n    return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\r\n        let bytesRead = 0\r\n\r\n        const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset + bytesRead)\r\n        bytesRead += indexSize\r\n        \r\n        const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\r\n        \r\n        for (let i = 0; i < props.length; i++) {\r\n            const elementType: TypeSymbol = component[props[i]][$arr]\r\n            if (elementType === undefined) {\r\n                const { value, size } = getters[i](view, offset + bytesRead)\r\n                component[props[i]][index] = value\r\n                bytesRead += size\r\n                continue\r\n            }\r\n            const isArrayResult = typeGetters[$u8](view, offset + bytesRead)\r\n            bytesRead += isArrayResult.size\r\n            if (!isArrayResult.value) {\r\n                continue\r\n            }\r\n            const arrayLengthResult = typeGetters[$u32](view, offset + bytesRead)\r\n            bytesRead += arrayLengthResult.size;\r\n\r\n            const arr = new Array(arrayLengthResult.value) as any;\r\n            for (let j = 0; j < arr.length; j++) {\r\n                const { value, size } = typeGetters[elementType](view, offset + bytesRead)\r\n                bytesRead += size\r\n                arr[j] = value\r\n            }\r\n            component[props[i]][index] = arr\r\n        }\r\n        return bytesRead\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a serializer function for Structure of Arrays (SoA) data.\r\n * @param {ComponentRef[]} components - The components to serialize.\r\n * @param {ArrayBuffer} [buffer] - The buffer to use for serialization.\r\n * @returns {Function} A function that serializes the SoA data.\r\n */\r\nexport const createSoASerializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\r\n    const view = new DataView(buffer)\r\n    const componentSerializers = components.map(createComponentSerializer)\r\n    return (indices: number[] | readonly number[]): ArrayBuffer => {\r\n        let offset = 0\r\n        for (let i = 0; i < indices.length; i++) {\r\n            const index = indices[i]\r\n            for (let j = 0; j < componentSerializers.length; j++) {\r\n                offset += componentSerializers[j](view, offset, index)\r\n            }\r\n        }\r\n        return buffer.slice(0, offset)\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deserializer function for Structure of Arrays (SoA) data.\r\n * @param {ComponentRef[]} components - The components to deserialize.\r\n * @returns {Function} A function that deserializes the SoA data.\r\n */\r\nexport const createSoADeserializer = (components: (ComponentRef | PrimitiveBrand | TypedArray)[]) => {\r\n    const componentDeserializers = components.map(createComponentDeserializer)\r\n    return (packet: ArrayBuffer, entityIdMapping?: Map<number, number>): void => {\r\n        const view = new DataView(packet)\r\n        let offset = 0\r\n        while (offset < packet.byteLength) {\r\n            for (let i = 0; i < componentDeserializers.length; i++) {\r\n                offset += componentDeserializers[i](view, offset, entityIdMapping)\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { createSoASerializer, createSoADeserializer, PrimitiveBrand } from './SoASerializer'\r\nimport {\r\n    addComponent,\r\n    hasComponent,\r\n    World,\r\n    getAllEntities,\r\n    addEntity,\r\n    isRelation,\r\n    getRelationTargets,\r\n    Wildcard,\r\n    Relation,\r\n    ComponentRef,\r\n    query\r\n} from 'bitecs'\r\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\r\n\r\n/**\r\n * Serializes relation data for a specific entity\r\n */\r\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\r\n    if (!data) return offset\r\n    \r\n    // Handle array data (AoS) - defaults to f64\r\n    if (Array.isArray(data)) {\r\n        const value = data[eid]\r\n        if (value !== undefined) {\r\n            dataView.setFloat64(offset, value)\r\n            return offset + 8\r\n        }\r\n        return offset\r\n    }\r\n    \r\n    // Handle object data (SoA)\r\n    if (typeof data === 'object') {\r\n        const keys = Object.keys(data).sort()\r\n        for (const key of keys) {\r\n            const arr = data[key]\r\n            const value = arr[eid]\r\n            \r\n            if (value !== undefined) {\r\n                if (arr instanceof Int8Array || $i8 in arr) {\r\n                    dataView.setInt8(offset, value)\r\n                    offset += 1\r\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\r\n                    dataView.setUint8(offset, value)\r\n                    offset += 1\r\n                } else if (arr instanceof Int16Array || $i16 in arr) {\r\n                    dataView.setInt16(offset, value)\r\n                    offset += 2\r\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\r\n                    dataView.setUint16(offset, value)\r\n                    offset += 2\r\n                } else if (arr instanceof Int32Array || $i32 in arr) {\r\n                    dataView.setInt32(offset, value)\r\n                    offset += 4\r\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\r\n                    dataView.setUint32(offset, value)\r\n                    offset += 4\r\n                } else if (arr instanceof Float32Array || $f32 in arr) {\r\n                    dataView.setFloat32(offset, value)\r\n                    offset += 4\r\n                } else {\r\n                    // Default to f64\r\n                    dataView.setFloat64(offset, value)\r\n                    offset += 8\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return offset\r\n}\r\n\r\n/**\r\n * Deserializes relation data for a specific entity\r\n */\r\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\r\n    if (!data) return offset\r\n    \r\n    // Handle array data (AoS) - defaults to f64\r\n    if (Array.isArray(data)) {\r\n        data[eid] = dataView.getFloat64(offset)\r\n        return offset + 8\r\n    }\r\n    \r\n    // Handle object data (SoA)\r\n    if (typeof data === 'object') {\r\n        const keys = Object.keys(data).sort()\r\n        for (const key of keys) {\r\n            const arr = data[key]\r\n            \r\n            if (arr instanceof Int8Array || $i8 in arr) {\r\n                arr[eid] = dataView.getInt8(offset)\r\n                offset += 1\r\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\r\n                arr[eid] = dataView.getUint8(offset)\r\n                offset += 1\r\n            } else if (arr instanceof Int16Array || $i16 in arr) {\r\n                arr[eid] = dataView.getInt16(offset)\r\n                offset += 2\r\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\r\n                arr[eid] = dataView.getUint16(offset)\r\n                offset += 2\r\n            } else if (arr instanceof Int32Array || $i32 in arr) {\r\n                arr[eid] = dataView.getInt32(offset)\r\n                offset += 4\r\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\r\n                arr[eid] = dataView.getUint32(offset)\r\n                offset += 4\r\n            } else if (arr instanceof Float32Array || $f32 in arr) {\r\n                arr[eid] = dataView.getFloat32(offset)\r\n                offset += 4\r\n            } else {\r\n                // Default to f64\r\n                arr[eid] = dataView.getFloat64(offset)\r\n                offset += 8\r\n            }\r\n        }\r\n    }\r\n    \r\n    return offset\r\n}\r\n\r\n/**\r\n * Creates a snapshot serializer for the given world and components.\r\n * @param {World} world - The ECS world object.\r\n * @param {Record<string, PrimitiveBrand>[]} components - An array of component definitions.\r\n * @param {ArrayBuffer} [buffer=new ArrayBuffer(1024 * 1024 * 100)] - The buffer to use for serialization.\r\n * @returns {Function} A function that, when called, serializes the world state and returns a slice of the buffer.\r\n */\r\nexport const createSnapshotSerializer = (world: World, components: (Record<string, PrimitiveBrand> | ComponentRef)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\r\n    const dataView = new DataView(buffer)\r\n    let offset = 0\r\n\r\n    /**\r\n     * Serializes entity-component relationships.\r\n     * @param {number[]} entities - An array of entity IDs.\r\n     */\r\n    const serializeEntityComponentRelationships = (entities: readonly number[]) => {\r\n        const entityCount = entities.length\r\n        \r\n        // Write entity count\r\n        dataView.setUint32(offset, entityCount)\r\n        offset += 4\r\n\r\n        // Serialize entity-component relationships\r\n        for (let i = 0; i < entityCount; i++) {\r\n            const entityId = entities[i]\r\n            let componentCount = 0\r\n            \r\n            dataView.setUint32(offset, entityId)\r\n            offset += 4\r\n            \r\n            const componentCountOffset = offset\r\n            offset += 1\r\n            \r\n            for (let j = 0; j < components.length; j++) {\r\n                const component = components[j]\r\n                if (isRelation(component)) {\r\n                    const targets = getRelationTargets(world, entityId, component as Relation<any>)\r\n                    for (const target of targets) {\r\n                        dataView.setUint8(offset, j)\r\n                        offset += 1\r\n                        dataView.setUint32(offset, target)\r\n                        offset += 4\r\n                        const relationData = (component as any)(target)\r\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\r\n                        componentCount++\r\n                    }\r\n                } else if (hasComponent(world, entityId, component)) {\r\n                    dataView.setUint8(offset, j)\r\n                    offset += 1\r\n                    componentCount++\r\n                }\r\n            }\r\n            \r\n            dataView.setUint8(componentCountOffset, componentCount)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes component data for all entities.\r\n     * @param {number[]} entities - An array of entity IDs.\r\n     */\r\n    const serializeComponentData = (entities: readonly number[]) => {\r\n        const soaSerializer = createSoASerializer(components, buffer.slice(offset))\r\n        const componentData = soaSerializer(entities)\r\n        new Uint8Array(buffer).set(new Uint8Array(componentData), offset)\r\n        offset += componentData.byteLength\r\n    }\r\n\r\n    return () => {\r\n        offset = 0\r\n        const entities = getAllEntities(world)\r\n        serializeEntityComponentRelationships(entities)\r\n        serializeComponentData(entities)\r\n        return buffer.slice(0, offset)\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a snapshot deserializer for the given world and components.\r\n * @param {World} world - The ECS world object.\r\n * @param {Record<string, PrimitiveBrand>[]} components - An array of component definitions.\r\n * @returns {Function} A function that takes a serialized packet and deserializes it into the world, returning a map of packet entity IDs to world entity IDs.\r\n */\r\nexport const createSnapshotDeserializer = (world: World, components: (Record<string, PrimitiveBrand> | ComponentRef)[], constructorMapping?: Map<number, number>) => {\r\n    let entityIdMapping = constructorMapping || new Map<number, number>()\r\n    const soaDeserializer = createSoADeserializer(components)\r\n\r\n    return (packet: ArrayBuffer, overrideMapping?: Map<number, number>): Map<number, number> => {\r\n        const currentMapping = overrideMapping || entityIdMapping\r\n        const dataView = new DataView(packet)\r\n        let offset = 0\r\n\r\n        // Read entity count\r\n        const entityCount = dataView.getUint32(offset)\r\n        offset += 4\r\n\r\n        // Deserialize entity-component relationships\r\n        for (let entityIndex = 0; entityIndex < entityCount; entityIndex++) {\r\n            const packetEntityId = dataView.getUint32(offset)\r\n            offset += 4\r\n\r\n            let worldEntityId = currentMapping.get(packetEntityId)\r\n            if (worldEntityId === undefined) {\r\n                worldEntityId = addEntity(world)\r\n                currentMapping.set(packetEntityId, worldEntityId)\r\n            }\r\n\r\n            const componentCount = dataView.getUint8(offset)\r\n            offset += 1\r\n\r\n            for (let i = 0; i < componentCount; i++) {\r\n                const componentIndex = dataView.getUint8(offset)\r\n                offset += 1\r\n                const component = components[componentIndex]\r\n                \r\n                if (isRelation(component)) {\r\n                    const targetId = dataView.getUint32(offset)\r\n                    offset += 4\r\n                    let worldTargetId = currentMapping.get(targetId)\r\n                    if (worldTargetId === undefined) {\r\n                        worldTargetId = addEntity(world)\r\n                        currentMapping.set(targetId, worldTargetId)\r\n                    }\r\n                    const relationComponent = (component as (target: any) => any)(worldTargetId)\r\n                    addComponent(world, worldEntityId, relationComponent)\r\n                    offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\r\n                } else {\r\n                    addComponent(world, worldEntityId, component)\r\n                }\r\n            }\r\n        }\r\n\r\n        // Deserialize component data\r\n        soaDeserializer(packet.slice(offset), currentMapping)\r\n\r\n        return currentMapping\r\n    }\r\n}\r\n\r\n\r\nexport const test = (w:any) => {\r\n    return w === Wildcard\r\n}", "import {\r\n    addComponent,\r\n    removeComponent,\r\n    addEntity,\r\n    removeEntity,\r\n    observe,\r\n    onAdd,\r\n    onRemove,\r\n    World,\r\n    ComponentRef,\r\n    entityExists,\r\n    isRelation,\r\n    getRelationTargets,\r\n    Wildcard,\r\n    EntityId\r\n} from 'bitecs'\r\n\r\nenum OperationType {\r\n    AddEntity = 0,\r\n    RemoveEntity = 1,\r\n    AddComponent = 2,\r\n    RemoveComponent = 3,\r\n    AddRelation = 4,\r\n    RemoveRelation = 5,\r\n}\r\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\r\n\r\n/**\r\n * Serializes relation data for a specific entity\r\n */\r\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\r\n    if (!data) return offset\r\n    \r\n    // Handle array data (AoS) - defaults to f64\r\n    if (Array.isArray(data)) {\r\n        const value = data[eid]\r\n        if (value !== undefined) {\r\n            dataView.setFloat64(offset, value)\r\n            return offset + 8\r\n        }\r\n        return offset\r\n    }\r\n    \r\n    // Handle object data (SoA)\r\n    if (typeof data === 'object') {\r\n        const keys = Object.keys(data).sort()\r\n        for (const key of keys) {\r\n            const arr = data[key]\r\n            const value = arr[eid]\r\n            \r\n            if (value !== undefined) {\r\n                if (arr instanceof Int8Array || $i8 in arr) {\r\n                    dataView.setInt8(offset, value)\r\n                    offset += 1\r\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\r\n                    dataView.setUint8(offset, value)\r\n                    offset += 1\r\n                } else if (arr instanceof Int16Array || $i16 in arr) {\r\n                    dataView.setInt16(offset, value)\r\n                    offset += 2\r\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\r\n                    dataView.setUint16(offset, value)\r\n                    offset += 2\r\n                } else if (arr instanceof Int32Array || $i32 in arr) {\r\n                    dataView.setInt32(offset, value)\r\n                    offset += 4\r\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\r\n                    dataView.setUint32(offset, value)\r\n                    offset += 4\r\n                } else if (arr instanceof Float32Array || $f32 in arr) {\r\n                    dataView.setFloat32(offset, value)\r\n                    offset += 4\r\n                } else {\r\n                    // Default to f64\r\n                    dataView.setFloat64(offset, value)\r\n                    offset += 8\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return offset\r\n}\r\n\r\n/**\r\n * Deserializes relation data for a specific entity\r\n */\r\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\r\n    if (!data) return offset\r\n    \r\n    // Handle array data (AoS) - defaults to f64\r\n    if (Array.isArray(data)) {\r\n        data[eid] = dataView.getFloat64(offset)\r\n        return offset + 8\r\n    }\r\n    \r\n    // Handle object data (SoA)\r\n    if (typeof data === 'object') {\r\n        const keys = Object.keys(data).sort()\r\n        for (const key of keys) {\r\n            const arr = data[key]\r\n            \r\n            if (arr instanceof Int8Array || $i8 in arr) {\r\n                arr[eid] = dataView.getInt8(offset)\r\n                offset += 1\r\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\r\n                arr[eid] = dataView.getUint8(offset)\r\n                offset += 1\r\n            } else if (arr instanceof Int16Array || $i16 in arr) {\r\n                arr[eid] = dataView.getInt16(offset)\r\n                offset += 2\r\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\r\n                arr[eid] = dataView.getUint16(offset)\r\n                offset += 2\r\n            } else if (arr instanceof Int32Array || $i32 in arr) {\r\n                arr[eid] = dataView.getInt32(offset)\r\n                offset += 4\r\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\r\n                arr[eid] = dataView.getUint32(offset)\r\n                offset += 4\r\n            } else if (arr instanceof Float32Array || $f32 in arr) {\r\n                arr[eid] = dataView.getFloat32(offset)\r\n                offset += 4\r\n            } else {\r\n                // Default to f64\r\n                arr[eid] = dataView.getFloat64(offset)\r\n                offset += 8\r\n            }\r\n        }\r\n    }\r\n    \r\n    return offset\r\n}\r\n\r\n/**\r\n * Creates a serializer for observing and serializing changes in networked entities.\r\n */\r\nexport const createObserverSerializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], buffer = new ArrayBuffer(1024 * 1024 * 100)) => {\r\n    const dataView = new DataView(buffer)\r\n    let offset = 0\r\n    const queue: [number, OperationType, number, number?, any?][] = []\r\n    const relationTargets = new Map<number, Map<number, number>>()\r\n    \r\n    observe(world, onAdd(networkedTag), (eid: EntityId) => {\r\n        queue.push([eid, OperationType.AddEntity, -1])\r\n    })\r\n\r\n    observe(world, onRemove(networkedTag), (eid: EntityId) => {\r\n        queue.push([eid, OperationType.RemoveEntity, -1])\r\n        relationTargets.delete(eid)\r\n    })\r\n\r\n    components.forEach((component, i) => {\r\n        if (isRelation(component)) {\r\n            observe(world, onAdd(networkedTag, component(Wildcard)), (eid: EntityId) => {\r\n                const targets = getRelationTargets(world, eid, component)\r\n                for (const target of targets) {\r\n                    if (!relationTargets.has(eid)) {\r\n                        relationTargets.set(eid, new Map())\r\n                    }\r\n                    relationTargets.get(eid).set(i, target)\r\n                    const relationData = component(target)\r\n                    queue.push([eid, OperationType.AddRelation, i, target, relationData])\r\n                }\r\n            })\r\n\r\n            observe(world, onRemove(networkedTag, component(Wildcard)), (eid: EntityId) => {\r\n                const targetMap = relationTargets.get(eid)\r\n                if (targetMap) {\r\n                    const target = targetMap.get(i)\r\n                    if (target !== undefined) {\r\n                        queue.push([eid, OperationType.RemoveRelation, i, target])\r\n                        targetMap.delete(i)\r\n                        if (targetMap.size === 0) {\r\n                            relationTargets.delete(eid)\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        } else {\r\n            observe(world, onAdd(networkedTag, component), (eid: EntityId) => {\r\n                queue.push([eid, OperationType.AddComponent, i])\r\n            })\r\n\r\n            observe(world, onRemove(networkedTag, component), (eid: EntityId) => {\r\n                queue.push([eid, OperationType.RemoveComponent, i])\r\n            })\r\n        }\r\n    })\r\n    \r\n    return () => {\r\n        offset = 0\r\n        \r\n        for (let i = 0; i < queue.length; i++) {\r\n            const [entityId, type, componentId, targetId, relationData] = queue[i]\r\n            dataView.setUint32(offset, entityId)\r\n            offset += 4\r\n            dataView.setUint8(offset, type)\r\n            offset += 1\r\n            if (type === OperationType.AddComponent || \r\n                type === OperationType.RemoveComponent || \r\n                type === OperationType.AddRelation ||\r\n                type === OperationType.RemoveRelation) {\r\n                dataView.setUint8(offset, componentId)\r\n                offset += 1\r\n                \r\n                if (type === OperationType.AddRelation || type === OperationType.RemoveRelation) {\r\n                    dataView.setUint32(offset, targetId)\r\n                    offset += 4\r\n                    \r\n                    if (type === OperationType.AddRelation && relationData) {\r\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        queue.length = 0\r\n\r\n        return buffer.slice(0, offset)\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deserializer for applying serialized changes to a world.\r\n */\r\nexport const createObserverDeserializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], constructorMapping?: Map<number, number>) => {\r\n    let entityIdMapping = constructorMapping || new Map<number, number>()\r\n    \r\n    return (packet: ArrayBuffer, overrideMapping?: Map<number, number>) => {\r\n        // Allow overriding the mapping for this call\r\n        const currentMapping = overrideMapping || entityIdMapping\r\n        const dataView = new DataView(packet)\r\n        let offset = 0\r\n\r\n        while (offset < packet.byteLength) {\r\n            const packetEntityId = dataView.getUint32(offset)\r\n            offset += 4\r\n            const operationType = dataView.getUint8(offset)\r\n            offset += 1\r\n            let componentId = -1\r\n            let targetId = -1\r\n            \r\n            if (operationType === OperationType.AddComponent || \r\n                operationType === OperationType.RemoveComponent ||\r\n                operationType === OperationType.AddRelation ||\r\n                operationType === OperationType.RemoveRelation) {\r\n                componentId = dataView.getUint8(offset)\r\n                offset += 1\r\n                \r\n                if (operationType === OperationType.AddRelation || operationType === OperationType.RemoveRelation) {\r\n                    targetId = dataView.getUint32(offset)\r\n                    offset += 4\r\n                }\r\n            }\r\n\r\n            const component = components[componentId]\r\n            let worldEntityId = currentMapping.get(packetEntityId)\r\n\r\n            if (operationType === OperationType.AddEntity) {\r\n                if (worldEntityId === undefined) {\r\n                    worldEntityId = addEntity(world)\r\n                    currentMapping.set(packetEntityId, worldEntityId)\r\n                    addComponent(world, worldEntityId, networkedTag)\r\n                } else {\r\n                    // TODO: figure out if this should ignore, throw, warn, or if the observer serializer should maybe do a snapshot on first call?\r\n                    // throw new Error(`Entity with ID ${packetEntityId} already exists in the mapping.`)\r\n                    console.warn(`Attempted to deserialize addEntity with ID ${packetEntityId}, but it has already been deserialzied and exists in the mapping.`)\r\n                }\r\n            } else if (worldEntityId !== undefined && entityExists(world, worldEntityId)) {\r\n                if (operationType === OperationType.RemoveEntity) {\r\n                    removeEntity(world, worldEntityId)\r\n                    currentMapping.delete(packetEntityId)\r\n                } else if (operationType === OperationType.AddComponent) {\r\n                    addComponent(world, worldEntityId, component)\r\n                } else if (operationType === OperationType.RemoveComponent) {\r\n                    removeComponent(world, worldEntityId, component)\r\n                } else if (operationType === OperationType.AddRelation) {\r\n                    const worldTargetId = currentMapping.get(targetId)\r\n                    if (worldTargetId !== undefined) {\r\n                        const relationComponent = component(worldTargetId)\r\n                        addComponent(world, worldEntityId, relationComponent)\r\n                        offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\r\n                    }\r\n                } else if (operationType === OperationType.RemoveRelation) {\r\n                    const worldTargetId = currentMapping.get(targetId)\r\n                    if (worldTargetId !== undefined) {\r\n                        removeComponent(world, worldEntityId, component(worldTargetId))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return currentMapping\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["$u8", "$i8", "$u16", "$i16", "$u32", "$i32", "$f32", "$f64", "$arr", "typeTagForSerialization", "symbol", "a", "u8", "i8", "u16", "i16", "u32", "i32", "f32", "f64", "typeSetters", "view", "offset", "value", "typeGetters", "array", "type", "arr", "isTypedArrayOrBranded", "getTypeForArray", "createComponentSerializer", "component", "setter", "index", "bytesWritten", "props", "setters", "prop", "i", "elementType", "componentValue", "isArray", "length", "j", "createComponentDeserializer", "getter", "entityIdMapping", "bytesRead", "originalIndex", "indexSize", "size", "getters", "isArrayResult", "arrayLengthResult", "createSoASerializer", "components", "buffer", "componentSerializers", "indices", "createSoADeserializer", "componentDeserializers", "packet", "addComponent", "hasComponent", "getAllEntities", "addEntity", "isRelation", "getRelationTargets", "Wildcard", "serializeRelationData", "data", "eid", "dataView", "offset", "value", "keys", "key", "arr", "$i8", "$u8", "$i16", "$u16", "$i32", "$u32", "$f32", "deserializeRelationData", "createSnapshotSerializer", "world", "components", "buffer", "serializeEntityComponentRelationships", "entities", "entityCount", "i", "entityId", "componentCount", "componentCountOffset", "j", "component", "isRelation", "targets", "getRelationTargets", "target", "relationData", "hasComponent", "serializeComponentData", "componentData", "createSoASerializer", "getAllEntities", "createSnapshotDeserializer", "constructorMapping", "entityIdMapping", "soaDeserializer", "createSoADeserializer", "packet", "overrideMapping", "currentMapping", "entityIndex", "packetEntityId", "worldEntityId", "addEntity", "componentIndex", "targetId", "worldTargetId", "relationComponent", "addComponent", "addComponent", "removeComponent", "addEntity", "removeEntity", "observe", "onAdd", "onRemove", "entityExists", "isRelation", "getRelationTargets", "Wildcard", "serializeRelationData", "data", "eid", "dataView", "offset", "value", "keys", "key", "arr", "$i8", "$u8", "$i16", "$u16", "$i32", "$u32", "$f32", "deserializeRelationData", "createObserverSerializer", "world", "networkedTag", "components", "buffer", "queue", "relationTargets", "observe", "onAdd", "onRemove", "component", "i", "isRelation", "Wildcard", "targets", "getRelationTargets", "target", "relationData", "targetMap", "entityId", "type", "componentId", "targetId", "createObserverDeserializer", "constructorMapping", "entityIdMapping", "packet", "overrideMapping", "currentMapping", "packetEntityId", "operationType", "worldEntityId", "addEntity", "addComponent", "entityExists", "removeEntity", "removeComponent", "worldTargetId", "relationComponent"]
}
