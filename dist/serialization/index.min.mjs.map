{
  "version": 3,
  "sources": ["../../src/serialization/SoASerializer.ts", "../../src/serialization/SnapshotSerializer.ts", "../../src/serialization/ObserverSerializer.ts"],
  "sourcesContent": ["\n/**\n * Symbols representing different data types for serialization.\n */\nexport const $u8 = Symbol.for('bitecs-u8'), $i8 = Symbol.for('bitecs-i8'), $u16 = Symbol.for('bitecs-u16'), $i16 = Symbol.for('bitecs-i16'),\n    $u32 = Symbol.for('bitecs-u32'), $i32 = Symbol.for('bitecs-i32'), $f32 = Symbol.for('bitecs-f32'), $f64 = Symbol.for('bitecs-f64'),\n    $arr = Symbol.for('bitecs-arr')\n\n/**\n * Union type of all possible TypedArray types.\n */\nexport type TypedArray = \n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array\n\n/**\n * Union type of all possible type symbols.\n */\nexport type TypeSymbol = typeof $u8 | typeof $i8 | typeof $u16 | typeof $i16 | typeof $u32 | typeof $i32 | typeof $f32 | typeof $f64\n\n/**\n * Type representing a primitive brand, which is either a number array with a symbol property or a TypedArray.\n */\nexport type PrimitiveBrand = (number[] & { [key: symbol]: true }) | TypedArray\n\n/**\n * Type representing a component reference, which is a record mapping string keys to either\n * a PrimitiveBrand (number array with type symbol), TypedArray, or ArrayType values.\n * Used to define the structure of components that can be serialized.\n */\ntype ComponentRef = Record<string, PrimitiveBrand | TypedArray | ArrayType<any>>\n\ntype ArrayType<T> = T[] & { [$arr]: TypeSymbol | TypeFunction | ArrayType<any> }\n\n/**\n * Creates a function that tags an array with a type symbol for serialization.\n * @param {TypeSymbol} symbol - The type symbol to tag the array with.\n * @returns {Function} A function that tags an array with the given type symbol.\n */\nconst typeTagForSerialization = (symbol: TypeSymbol) => (a: number[] = []): PrimitiveBrand =>\n    Object.defineProperty(a, symbol, { value: true, enumerable: false, writable: false, configurable: false }) as PrimitiveBrand\n\n/**\n * Functions to create arrays tagged with specific type symbols.\n */\nexport const u8 = typeTagForSerialization($u8),     i8 = typeTagForSerialization($i8),\n            u16 = typeTagForSerialization($u16),    i16 = typeTagForSerialization($i16),\n            u32 = typeTagForSerialization($u32),    i32 = typeTagForSerialization($i32),\n            f32 = typeTagForSerialization($f32),    f64 = typeTagForSerialization($f64)\n\n/**\n * Mapping from type functions to their corresponding symbols.\n */\nconst functionToSymbolMap = new Map([\n    [u8, $u8], [i8, $i8], [u16, $u16], [i16, $i16],\n    [u32, $u32], [i32, $i32], [f32, $f32], [f64, $f64]\n])\n\n/**\n * Type representing a type function.\n */\ntype TypeFunction = typeof u8 | typeof i8 | typeof u16 | typeof i16 | typeof u32 | typeof i32 | typeof f32 | typeof f64\n\n/**\n * Object containing setter functions for each data type.\n */\nconst typeSetters = {\n    [$u8]: (view: DataView, offset: number, value: number) => { view.setUint8(offset, value); return 1; },\n    [$i8]: (view: DataView, offset: number, value: number) => { view.setInt8(offset, value); return 1; },\n    [$u16]: (view: DataView, offset: number, value: number) => { view.setUint16(offset, value); return 2; },\n    [$i16]: (view: DataView, offset: number, value: number) => { view.setInt16(offset, value); return 2; },\n    [$u32]: (view: DataView, offset: number, value: number) => { view.setUint32(offset, value); return 4; },\n    [$i32]: (view: DataView, offset: number, value: number) => { view.setInt32(offset, value); return 4; },\n    [$f32]: (view: DataView, offset: number, value: number) => { view.setFloat32(offset, value); return 4; },\n    [$f64]: (view: DataView, offset: number, value: number) => { view.setFloat64(offset, value); return 8; }\n}\n\n/**\n * Object containing getter functions for each data type.\n */\nconst typeGetters = {\n    [$u8]: (view: DataView, offset: number) => ({ value: view.getUint8(offset), size: 1 }),\n    [$i8]: (view: DataView, offset: number) => ({ value: view.getInt8(offset), size: 1 }),\n    [$u16]: (view: DataView, offset: number) => ({ value: view.getUint16(offset), size: 2 }),\n    [$i16]: (view: DataView, offset: number) => ({ value: view.getInt16(offset), size: 2 }),\n    [$u32]: (view: DataView, offset: number) => ({ value: view.getUint32(offset), size: 4 }),\n    [$i32]: (view: DataView, offset: number) => ({ value: view.getInt32(offset), size: 4 }),\n    [$f32]: (view: DataView, offset: number) => ({ value: view.getFloat32(offset), size: 4 }),\n    [$f64]: (view: DataView, offset: number) => ({ value: view.getFloat64(offset), size: 8 })\n}\n\n/**\n * Resolves a type (symbol, function, or array type) to its corresponding symbol.\n */\nfunction resolveTypeToSymbol(type: TypeSymbol | TypeFunction | ArrayType<any>): TypeSymbol {\n    if (typeof type === 'symbol') {\n        return type\n    }\n    if (typeof type === 'function') {\n        const symbol = functionToSymbolMap.get(type as TypeFunction) as TypeSymbol | undefined\n        if (symbol) return symbol\n        throw new Error(`Unknown type function: ${type}`)\n    }\n    if (isArrayType(type)) {\n        return resolveTypeToSymbol(type[$arr])\n    }\n    // Default fallback\n    return $f32\n}\n\nexport const array = <T extends any[] = any[]>(type: TypeSymbol | TypeFunction | ArrayType<any> = f32): ArrayType<T> => {\n    const arr = [] as any[];\n\n    Object.defineProperty(arr, $arr, { value: type, enumerable: false, writable: false, configurable: false })\n\n    return arr as ArrayType<T>;\n}\n\n/**\n * Checks if a value is a TypedArray, branded array, or ArrayType\n */\nfunction isTypedArrayOrBranded(arr: any): arr is PrimitiveBrand | TypedArray | ArrayType<any> {\n    return arr && (\n        ArrayBuffer.isView(arr) || \n        (Array.isArray(arr) && typeof arr === 'object')\n    )\n}\n\n/**\n * Gets the type symbol for an array\n */\nfunction getTypeForArray(arr: PrimitiveBrand | TypedArray | ArrayType<any>): TypeSymbol {\n    // Check for ArrayType first\n    if (isArrayType(arr)) {\n        return resolveTypeToSymbol(arr[$arr])\n    }\n    // Check for branded arrays\n    for (const symbol of [$u8, $i8, $u16, $i16, $u32, $i32, $f32, $f64] as TypeSymbol[]) {\n        if (symbol in arr) return symbol\n    }\n    // Then check TypedArrays\n    if (arr instanceof Int8Array) return $i8\n    if (arr instanceof Uint8Array) return $u8\n    if (arr instanceof Int16Array) return $i16\n    if (arr instanceof Uint16Array) return $u16\n    if (arr instanceof Int32Array) return $i32\n    if (arr instanceof Uint32Array) return $u32\n    if (arr instanceof Float32Array) return $f32\n    return $f64\n}\n\n/**\n * Checks if a value is an array type\n */\nexport function isArrayType(value: any): value is ArrayType<any> {\n    return Array.isArray(value) && $arr in value\n}\n\n/**\n * Gets the element type information for an array type\n */\nexport function getArrayElementType(arrayType: ArrayType<any>): TypeSymbol | TypeFunction | ArrayType<any> {\n    return arrayType[$arr]\n}\n\n/**\n * Serializes an array value to a DataView\n */\nfunction serializeArrayValue(\n    elementType: ArrayType<any> | TypeSymbol | TypeFunction,\n    value: any[],\n    view: DataView,\n    offset: number\n): number {\n    let bytesWritten = 0\n\n    const isArrayDefined = Array.isArray(value) ? 1 : 0\n    bytesWritten += typeSetters[$u8](view, offset, isArrayDefined)\n\n    if (!isArrayDefined) {\n        return bytesWritten\n    }\n\n    bytesWritten += typeSetters[$u32](view, offset + bytesWritten, value.length)\n\n    // Write each element\n    for (let i = 0; i < value.length; i++) {\n        const element = value[i]\n        if (isArrayType(elementType)) {\n            bytesWritten += serializeArrayValue(getArrayElementType(elementType), element, view, offset + bytesWritten)\n        } else {\n            // Primitive type - resolve to symbol\n            const symbol = resolveTypeToSymbol(elementType)\n            bytesWritten += typeSetters[symbol](view, offset + bytesWritten, element)\n        }\n    }\n\n    return bytesWritten\n}\n\n\nfunction deserializeArrayValue(\n    elementType: ArrayType<any> | TypeSymbol | TypeFunction,\n    view: DataView,\n    offset: number\n) {\n    let bytesRead = 0\n\n    const isArrayResult = typeGetters[$u8](view, offset + bytesRead)\n    bytesRead += isArrayResult.size\n    if (!isArrayResult.value) {\n        return { size: bytesRead }\n    }\n\n    const arrayLengthResult = typeGetters[$u32](view, offset + bytesRead)\n    bytesRead += arrayLengthResult.size;\n\n    const arr = new Array(arrayLengthResult.value) as any;\n    for (let i = 0; i < arr.length; i++) {\n        if (isArrayType(elementType)) {\n            const { value, size } = deserializeArrayValue(getArrayElementType(elementType), view, offset + bytesRead)\n            bytesRead += size\n            if (Array.isArray(value)) {\n                arr[i] = value\n            }\n        } else {\n            // Primitive type - resolve to symbol\n            const symbol = resolveTypeToSymbol(elementType)\n            const { value, size } = typeGetters[symbol](view, offset + bytesRead)\n            bytesRead += size\n            arr[i] = value\n        }\n    }\n\n    return { value: arr, size: bytesRead }\n}\n\n/**\n * Creates a serializer function for a component.\n * @param {ComponentRef} component - The component to create a serializer for.\n * @returns {Function} A function that serializes the component.\n */\nexport const createComponentSerializer = (component: ComponentRef | PrimitiveBrand | TypedArray | ArrayType<any>) => {\n    // Handle direct array case\n    if (isTypedArrayOrBranded(component)) {\n        const type = getTypeForArray(component)\n        const setter = typeSetters[type]\n        return (view: DataView, offset: number, index: number) => {\n            let bytesWritten = 0\n            bytesWritten += typeSetters[$u32](view, offset, index)\n            bytesWritten += setter(view, offset + bytesWritten, component[index])\n            return bytesWritten\n        }\n    }\n\n    // Handle component case\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        if (!isTypedArrayOrBranded(arr)) {\n            throw new Error(`Invalid array type for property ${prop}`)\n        }\n        return getTypeForArray(arr)\n    })\n    const setters = types.map(type => typeSetters[type as keyof typeof typeSetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, index: number) => {\n        let bytesWritten = 0\n        // Write index first\n        bytesWritten += typeSetters[$u32](view, offset + bytesWritten, index)\n        for (let i = 0; i < props.length; i++) {\n            const componentProperty = component[props[i]]\n            if (isArrayType(componentProperty)) {\n                bytesWritten += serializeArrayValue(getArrayElementType(componentProperty), componentProperty[index], view, offset + bytesWritten)\n            } else {\n                bytesWritten += setters[i](view, offset + bytesWritten, componentProperty[index])\n            }\n        }\n        return bytesWritten\n    }\n}\n\n/**\n * Creates a deserializer function for a component.\n * @param {ComponentRef} component - The component to create a deserializer for.\n * @returns {Function} A function that deserializes the component.\n */\nexport const createComponentDeserializer = (component: ComponentRef | PrimitiveBrand | TypedArray | ArrayType<any>) => {\n    // Handle direct array case\n    if (isTypedArrayOrBranded(component)) {\n        const type = getTypeForArray(component)\n        const getter = typeGetters[type]\n        return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\n            let bytesRead = 0\n            const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset)\n            bytesRead += indexSize\n            const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\n            const { value, size } = getter(view, offset + bytesRead)\n            component[index] = value\n            return bytesRead + size\n        }\n    }\n\n    // Handle component case\n    const props = Object.keys(component)\n    const types = props.map(prop => {\n        const arr = component[prop]\n        if (!isTypedArrayOrBranded(arr)) {\n            throw new Error(`Invalid array type for property ${prop}`)\n        }\n        return getTypeForArray(arr)\n    })\n    const getters = types.map(type => typeGetters[type as keyof typeof typeGetters] || (() => { throw new Error(`Unsupported or unannotated type`); }))\n    return (view: DataView, offset: number, entityIdMapping?: Map<number, number>) => {\n        let bytesRead = 0\n\n        const { value: originalIndex, size: indexSize } = typeGetters[$u32](view, offset + bytesRead)\n        bytesRead += indexSize\n        \n        const index = entityIdMapping ? entityIdMapping.get(originalIndex) ?? originalIndex : originalIndex\n        \n        for (let i = 0; i < props.length; i++) {\n            const componentProperty = component[props[i]]\n            if (isArrayType(componentProperty)) {\n                const { value, size } = deserializeArrayValue(getArrayElementType(componentProperty), view, offset + bytesRead)\n                if (Array.isArray(value)){\n                    componentProperty[index] = value\n                }\n                bytesRead += size\n            } else {\n                const { value, size } = getters[i](view, offset + bytesRead)\n                component[props[i]][index] = value\n                bytesRead += size\n            }\n        }\n        return bytesRead\n    }\n}\n\n/**\n * Creates a serializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to serialize.\n * @param {ArrayBuffer} [buffer] - The buffer to use for serialization.\n * @returns {Function} A function that serializes the SoA data.\n */\nexport const createSoASerializer = (components: (ComponentRef | PrimitiveBrand | TypedArray | ArrayType<any>)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const view = new DataView(buffer)\n    const componentSerializers = components.map(createComponentSerializer)\n    return (indices: number[] | readonly number[]): ArrayBuffer => {\n        let offset = 0\n        for (let i = 0; i < indices.length; i++) {\n            const index = indices[i]\n            for (let j = 0; j < componentSerializers.length; j++) {\n                offset += componentSerializers[j](view, offset, index)\n            }\n        }\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer function for Structure of Arrays (SoA) data.\n * @param {ComponentRef[]} components - The components to deserialize.\n * @returns {Function} A function that deserializes the SoA data.\n */\nexport const createSoADeserializer = (components: (ComponentRef | PrimitiveBrand | TypedArray | ArrayType<any>)[]) => {\n    const componentDeserializers = components.map(createComponentDeserializer)\n    return (packet: ArrayBuffer, entityIdMapping?: Map<number, number>): void => {\n        const view = new DataView(packet)\n        let offset = 0\n        while (offset < packet.byteLength) {\n            for (let i = 0; i < componentDeserializers.length; i++) {\n                offset += componentDeserializers[i](view, offset, entityIdMapping)\n            }\n        }\n    }\n}\n", "import { createSoASerializer, createSoADeserializer, PrimitiveBrand } from './SoASerializer'\nimport {\n    addComponent,\n    hasComponent,\n    World,\n    getAllEntities,\n    addEntity,\n    isRelation,\n    getRelationTargets,\n    Wildcard,\n    Relation,\n    ComponentRef,\n    query\n} from 'bitecs'\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\n\n/**\n * Serializes relation data for a specific entity\n */\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        const value = data[eid]\n        if (value !== undefined) {\n            dataView.setFloat64(offset, value)\n            return offset + 8\n        }\n        return offset\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            const value = arr[eid]\n            \n            if (value !== undefined) {\n                if (arr instanceof Int8Array || $i8 in arr) {\n                    dataView.setInt8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\n                    dataView.setUint8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Int16Array || $i16 in arr) {\n                    dataView.setInt16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\n                    dataView.setUint16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Int32Array || $i32 in arr) {\n                    dataView.setInt32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\n                    dataView.setUint32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Float32Array || $f32 in arr) {\n                    dataView.setFloat32(offset, value)\n                    offset += 4\n                } else {\n                    // Default to f64\n                    dataView.setFloat64(offset, value)\n                    offset += 8\n                }\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Deserializes relation data for a specific entity\n */\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        data[eid] = dataView.getFloat64(offset)\n        return offset + 8\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            \n            if (arr instanceof Int8Array || $i8 in arr) {\n                arr[eid] = dataView.getInt8(offset)\n                offset += 1\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\n                arr[eid] = dataView.getUint8(offset)\n                offset += 1\n            } else if (arr instanceof Int16Array || $i16 in arr) {\n                arr[eid] = dataView.getInt16(offset)\n                offset += 2\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\n                arr[eid] = dataView.getUint16(offset)\n                offset += 2\n            } else if (arr instanceof Int32Array || $i32 in arr) {\n                arr[eid] = dataView.getInt32(offset)\n                offset += 4\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\n                arr[eid] = dataView.getUint32(offset)\n                offset += 4\n            } else if (arr instanceof Float32Array || $f32 in arr) {\n                arr[eid] = dataView.getFloat32(offset)\n                offset += 4\n            } else {\n                // Default to f64\n                arr[eid] = dataView.getFloat64(offset)\n                offset += 8\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Creates a snapshot serializer for the given world and components.\n * @param {World} world - The ECS world object.\n * @param {Record<string, PrimitiveBrand>[]} components - An array of component definitions.\n * @param {ArrayBuffer} [buffer=new ArrayBuffer(1024 * 1024 * 100)] - The buffer to use for serialization.\n * @returns {Function} A function that, when called, serializes the world state and returns a slice of the buffer.\n */\nexport const createSnapshotSerializer = (world: World, components: (Record<string, PrimitiveBrand> | ComponentRef)[], buffer: ArrayBuffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const dataView = new DataView(buffer)\n    let offset = 0\n\n    /**\n     * Serializes entity-component relationships.\n     * @param {number[]} entities - An array of entity IDs.\n     */\n    const serializeEntityComponentRelationships = (entities: readonly number[]) => {\n        const entityCount = entities.length\n        \n        // Write entity count\n        dataView.setUint32(offset, entityCount)\n        offset += 4\n\n        // Serialize entity-component relationships\n        for (let i = 0; i < entityCount; i++) {\n            const entityId = entities[i]\n            let componentCount = 0\n            \n            dataView.setUint32(offset, entityId)\n            offset += 4\n            \n            const componentCountOffset = offset\n            offset += 1\n            \n            for (let j = 0; j < components.length; j++) {\n                const component = components[j]\n                if (isRelation(component)) {\n                    const targets = getRelationTargets(world, entityId, component as Relation<any>)\n                    for (const target of targets) {\n                        dataView.setUint8(offset, j)\n                        offset += 1\n                        dataView.setUint32(offset, target)\n                        offset += 4\n                        const relationData = (component as any)(target)\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\n                        componentCount++\n                    }\n                } else if (hasComponent(world, entityId, component)) {\n                    dataView.setUint8(offset, j)\n                    offset += 1\n                    componentCount++\n                }\n            }\n            \n            dataView.setUint8(componentCountOffset, componentCount)\n        }\n    }\n\n    /**\n     * Serializes component data for all entities.\n     * @param {number[]} entities - An array of entity IDs.\n     */\n    const serializeComponentData = (entities: readonly number[]) => {\n        const soaSerializer = createSoASerializer(components, buffer.slice(offset))\n        const componentData = soaSerializer(entities)\n        new Uint8Array(buffer).set(new Uint8Array(componentData), offset)\n        offset += componentData.byteLength\n    }\n\n    return () => {\n        offset = 0\n        const entities = getAllEntities(world)\n        serializeEntityComponentRelationships(entities)\n        serializeComponentData(entities)\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a snapshot deserializer for the given world and components.\n * @param {World} world - The ECS world object.\n * @param {Record<string, PrimitiveBrand>[]} components - An array of component definitions.\n * @returns {Function} A function that takes a serialized packet and deserializes it into the world, returning a map of packet entity IDs to world entity IDs.\n */\nexport const createSnapshotDeserializer = (world: World, components: (Record<string, PrimitiveBrand> | ComponentRef)[], constructorMapping?: Map<number, number>) => {\n    let entityIdMapping = constructorMapping || new Map<number, number>()\n    const soaDeserializer = createSoADeserializer(components)\n\n    return (packet: ArrayBuffer, overrideMapping?: Map<number, number>): Map<number, number> => {\n        const currentMapping = overrideMapping || entityIdMapping\n        const dataView = new DataView(packet)\n        let offset = 0\n\n        // Read entity count\n        const entityCount = dataView.getUint32(offset)\n        offset += 4\n\n        // Deserialize entity-component relationships\n        for (let entityIndex = 0; entityIndex < entityCount; entityIndex++) {\n            const packetEntityId = dataView.getUint32(offset)\n            offset += 4\n\n            let worldEntityId = currentMapping.get(packetEntityId)\n            if (worldEntityId === undefined) {\n                worldEntityId = addEntity(world)\n                currentMapping.set(packetEntityId, worldEntityId)\n            }\n\n            const componentCount = dataView.getUint8(offset)\n            offset += 1\n\n            for (let i = 0; i < componentCount; i++) {\n                const componentIndex = dataView.getUint8(offset)\n                offset += 1\n                const component = components[componentIndex]\n                \n                if (isRelation(component)) {\n                    const targetId = dataView.getUint32(offset)\n                    offset += 4\n                    let worldTargetId = currentMapping.get(targetId)\n                    if (worldTargetId === undefined) {\n                        worldTargetId = addEntity(world)\n                        currentMapping.set(targetId, worldTargetId)\n                    }\n                    const relationComponent = (component as (target: any) => any)(worldTargetId)\n                    addComponent(world, worldEntityId, relationComponent)\n                    offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\n                } else {\n                    addComponent(world, worldEntityId, component)\n                }\n            }\n        }\n\n        // Deserialize component data\n        soaDeserializer(packet.slice(offset), currentMapping)\n\n        return currentMapping\n    }\n}\n\n\nexport const test = (w:any) => {\n    return w === Wildcard\n}", "import {\n    addComponent,\n    removeComponent,\n    addEntity,\n    removeEntity,\n    observe,\n    onAdd,\n    onRemove,\n    World,\n    ComponentRef,\n    entityExists,\n    isRelation,\n    getRelationTargets,\n    Wildcard,\n    EntityId\n} from 'bitecs'\n\nenum OperationType {\n    AddEntity = 0,\n    RemoveEntity = 1,\n    AddComponent = 2,\n    RemoveComponent = 3,\n    AddRelation = 4,\n    RemoveRelation = 5,\n}\nimport { $u8, $i8, $u16, $i16, $u32, $i32, $f32 } from './SoASerializer'\n\n/**\n * Serializes relation data for a specific entity\n */\nfunction serializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        const value = data[eid]\n        if (value !== undefined) {\n            dataView.setFloat64(offset, value)\n            return offset + 8\n        }\n        return offset\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            const value = arr[eid]\n            \n            if (value !== undefined) {\n                if (arr instanceof Int8Array || $i8 in arr) {\n                    dataView.setInt8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Uint8Array || $u8 in arr) {\n                    dataView.setUint8(offset, value)\n                    offset += 1\n                } else if (arr instanceof Int16Array || $i16 in arr) {\n                    dataView.setInt16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Uint16Array || $u16 in arr) {\n                    dataView.setUint16(offset, value)\n                    offset += 2\n                } else if (arr instanceof Int32Array || $i32 in arr) {\n                    dataView.setInt32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Uint32Array || $u32 in arr) {\n                    dataView.setUint32(offset, value)\n                    offset += 4\n                } else if (arr instanceof Float32Array || $f32 in arr) {\n                    dataView.setFloat32(offset, value)\n                    offset += 4\n                } else {\n                    // Default to f64\n                    dataView.setFloat64(offset, value)\n                    offset += 8\n                }\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Deserializes relation data for a specific entity\n */\nfunction deserializeRelationData(data: any, eid: number, dataView: DataView, offset: number) {\n    if (!data) return offset\n    \n    // Handle array data (AoS) - defaults to f64\n    if (Array.isArray(data)) {\n        data[eid] = dataView.getFloat64(offset)\n        return offset + 8\n    }\n    \n    // Handle object data (SoA)\n    if (typeof data === 'object') {\n        const keys = Object.keys(data).sort()\n        for (const key of keys) {\n            const arr = data[key]\n            \n            if (arr instanceof Int8Array || $i8 in arr) {\n                arr[eid] = dataView.getInt8(offset)\n                offset += 1\n            } else if (arr instanceof Uint8Array || $u8 in arr) {\n                arr[eid] = dataView.getUint8(offset)\n                offset += 1\n            } else if (arr instanceof Int16Array || $i16 in arr) {\n                arr[eid] = dataView.getInt16(offset)\n                offset += 2\n            } else if (arr instanceof Uint16Array || $u16 in arr) {\n                arr[eid] = dataView.getUint16(offset)\n                offset += 2\n            } else if (arr instanceof Int32Array || $i32 in arr) {\n                arr[eid] = dataView.getInt32(offset)\n                offset += 4\n            } else if (arr instanceof Uint32Array || $u32 in arr) {\n                arr[eid] = dataView.getUint32(offset)\n                offset += 4\n            } else if (arr instanceof Float32Array || $f32 in arr) {\n                arr[eid] = dataView.getFloat32(offset)\n                offset += 4\n            } else {\n                // Default to f64\n                arr[eid] = dataView.getFloat64(offset)\n                offset += 8\n            }\n        }\n    }\n    \n    return offset\n}\n\n/**\n * Creates a serializer for observing and serializing changes in networked entities.\n */\nexport const createObserverSerializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], buffer = new ArrayBuffer(1024 * 1024 * 100)) => {\n    const dataView = new DataView(buffer)\n    let offset = 0\n    const queue: [number, OperationType, number, number?, any?][] = []\n    const relationTargets = new Map<number, Map<number, number>>()\n    \n    observe(world, onAdd(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.AddEntity, -1])\n    })\n\n    observe(world, onRemove(networkedTag), (eid: EntityId) => {\n        queue.push([eid, OperationType.RemoveEntity, -1])\n        relationTargets.delete(eid)\n    })\n\n    components.forEach((component, i) => {\n        if (isRelation(component)) {\n            observe(world, onAdd(networkedTag, component(Wildcard)), (eid: EntityId) => {\n                const targets = getRelationTargets(world, eid, component)\n                for (const target of targets) {\n                    if (!relationTargets.has(eid)) {\n                        relationTargets.set(eid, new Map())\n                    }\n                    relationTargets.get(eid).set(i, target)\n                    const relationData = component(target)\n                    queue.push([eid, OperationType.AddRelation, i, target, relationData])\n                }\n            })\n\n            observe(world, onRemove(networkedTag, component(Wildcard)), (eid: EntityId) => {\n                const targetMap = relationTargets.get(eid)\n                if (targetMap) {\n                    const target = targetMap.get(i)\n                    if (target !== undefined) {\n                        queue.push([eid, OperationType.RemoveRelation, i, target])\n                        targetMap.delete(i)\n                        if (targetMap.size === 0) {\n                            relationTargets.delete(eid)\n                        }\n                    }\n                }\n            })\n        } else {\n            observe(world, onAdd(networkedTag, component), (eid: EntityId) => {\n                queue.push([eid, OperationType.AddComponent, i])\n            })\n\n            observe(world, onRemove(networkedTag, component), (eid: EntityId) => {\n                queue.push([eid, OperationType.RemoveComponent, i])\n            })\n        }\n    })\n    \n    return () => {\n        offset = 0\n        \n        for (let i = 0; i < queue.length; i++) {\n            const [entityId, type, componentId, targetId, relationData] = queue[i]\n            dataView.setUint32(offset, entityId)\n            offset += 4\n            dataView.setUint8(offset, type)\n            offset += 1\n            if (type === OperationType.AddComponent || \n                type === OperationType.RemoveComponent || \n                type === OperationType.AddRelation ||\n                type === OperationType.RemoveRelation) {\n                dataView.setUint8(offset, componentId)\n                offset += 1\n                \n                if (type === OperationType.AddRelation || type === OperationType.RemoveRelation) {\n                    dataView.setUint32(offset, targetId)\n                    offset += 4\n                    \n                    if (type === OperationType.AddRelation && relationData) {\n                        offset = serializeRelationData(relationData, entityId, dataView, offset)\n                    }\n                }\n            }\n        }\n        queue.length = 0\n\n        return buffer.slice(0, offset)\n    }\n}\n\n/**\n * Creates a deserializer for applying serialized changes to a world.\n */\nexport const createObserverDeserializer = (world: World, networkedTag: ComponentRef, components: ComponentRef[], constructorMapping?: Map<number, number>) => {\n    let entityIdMapping = constructorMapping || new Map<number, number>()\n    \n    return (packet: ArrayBuffer, overrideMapping?: Map<number, number>) => {\n        // Allow overriding the mapping for this call\n        const currentMapping = overrideMapping || entityIdMapping\n        const dataView = new DataView(packet)\n        let offset = 0\n\n        while (offset < packet.byteLength) {\n            const packetEntityId = dataView.getUint32(offset)\n            offset += 4\n            const operationType = dataView.getUint8(offset)\n            offset += 1\n            let componentId = -1\n            let targetId = -1\n            \n            if (operationType === OperationType.AddComponent || \n                operationType === OperationType.RemoveComponent ||\n                operationType === OperationType.AddRelation ||\n                operationType === OperationType.RemoveRelation) {\n                componentId = dataView.getUint8(offset)\n                offset += 1\n                \n                if (operationType === OperationType.AddRelation || operationType === OperationType.RemoveRelation) {\n                    targetId = dataView.getUint32(offset)\n                    offset += 4\n                }\n            }\n\n            const component = components[componentId]\n            let worldEntityId = currentMapping.get(packetEntityId)\n\n            if (operationType === OperationType.AddEntity) {\n                if (worldEntityId === undefined) {\n                    worldEntityId = addEntity(world)\n                    currentMapping.set(packetEntityId, worldEntityId)\n                    addComponent(world, worldEntityId, networkedTag)\n                } else {\n                    // TODO: figure out if this should ignore, throw, warn, or if the observer serializer should maybe do a snapshot on first call?\n                    // throw new Error(`Entity with ID ${packetEntityId} already exists in the mapping.`)\n                    console.warn(`Attempted to deserialize addEntity with ID ${packetEntityId}, but it has already been deserialzied and exists in the mapping.`)\n                }\n            } else if (worldEntityId !== undefined && entityExists(world, worldEntityId)) {\n                if (operationType === OperationType.RemoveEntity) {\n                    removeEntity(world, worldEntityId)\n                    currentMapping.delete(packetEntityId)\n                } else if (operationType === OperationType.AddComponent) {\n                    addComponent(world, worldEntityId, component)\n                } else if (operationType === OperationType.RemoveComponent) {\n                    removeComponent(world, worldEntityId, component)\n                } else if (operationType === OperationType.AddRelation) {\n                    const worldTargetId = currentMapping.get(targetId)\n                    if (worldTargetId !== undefined) {\n                        const relationComponent = component(worldTargetId)\n                        addComponent(world, worldEntityId, relationComponent)\n                        offset = deserializeRelationData(relationComponent, worldEntityId, dataView, offset)\n                    }\n                } else if (operationType === OperationType.RemoveRelation) {\n                    const worldTargetId = currentMapping.get(targetId)\n                    if (worldTargetId !== undefined) {\n                        removeComponent(world, worldEntityId, component(worldTargetId))\n                    }\n                }\n            }\n        }\n\n        return currentMapping\n    }\n}\n"],
  "mappings": "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",
  "names": ["$u8", "$i8", "$u16", "$i16", "$u32", "$i32", "$f32", "$f64", "$arr", "typeTagForSerialization", "symbol", "a", "u8", "i8", "u16", "i16", "u32", "i32", "f32", "f64", "functionToSymbolMap", "typeSetters", "view", "offset", "value", "typeGetters", "resolveTypeToSymbol", "type", "isArrayType", "array", "arr", "isTypedArrayOrBranded", "getTypeForArray", "getArrayElementType", "arrayType", "serializeArrayValue", "elementType", "bytesWritten", "isArrayDefined", "i", "element", "deserializeArrayValue", "bytesRead", "isArrayResult", "arrayLengthResult", "size", "createComponentSerializer", "component", "setter", "index", "props", "setters", "prop", "componentProperty", "createComponentDeserializer", "getter", "entityIdMapping", "originalIndex", "indexSize", "getters", "createSoASerializer", "components", "buffer", "componentSerializers", "indices", "j", "createSoADeserializer", "componentDeserializers", "packet", "addComponent", "hasComponent", "getAllEntities", "addEntity", "isRelation", "getRelationTargets", "Wildcard", "serializeRelationData", "data", "eid", "dataView", "offset", "value", "keys", "key", "arr", "$i8", "$u8", "$i16", "$u16", "$i32", "$u32", "$f32", "deserializeRelationData", "createSnapshotSerializer", "world", "components", "buffer", "serializeEntityComponentRelationships", "entities", "entityCount", "i", "entityId", "componentCount", "componentCountOffset", "j", "component", "isRelation", "targets", "getRelationTargets", "target", "relationData", "hasComponent", "serializeComponentData", "componentData", "createSoASerializer", "getAllEntities", "createSnapshotDeserializer", "constructorMapping", "entityIdMapping", "soaDeserializer", "createSoADeserializer", "packet", "overrideMapping", "currentMapping", "entityIndex", "packetEntityId", "worldEntityId", "addEntity", "componentIndex", "targetId", "worldTargetId", "relationComponent", "addComponent", "addComponent", "removeComponent", "addEntity", "removeEntity", "observe", "onAdd", "onRemove", "entityExists", "isRelation", "getRelationTargets", "Wildcard", "serializeRelationData", "data", "eid", "dataView", "offset", "value", "keys", "key", "arr", "$i8", "$u8", "$i16", "$u16", "$i32", "$u32", "$f32", "deserializeRelationData", "createObserverSerializer", "world", "networkedTag", "components", "buffer", "queue", "relationTargets", "observe", "onAdd", "onRemove", "component", "i", "isRelation", "Wildcard", "targets", "getRelationTargets", "target", "relationData", "targetMap", "entityId", "type", "componentId", "targetId", "createObserverDeserializer", "constructorMapping", "entityIdMapping", "packet", "overrideMapping", "currentMapping", "packetEntityId", "operationType", "worldEntityId", "addEntity", "addComponent", "entityExists", "removeEntity", "removeComponent", "worldTargetId", "relationComponent"]
}
