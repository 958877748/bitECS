{
  "version": 3,
  "sources": ["../../src/core/utils/defineHiddenProperty.ts", "../../src/core/EntityIndex.ts", "../../src/core/World.ts", "../../src/core/utils/SparseSet.ts", "../../src/core/utils/Observer.ts", "../../src/core/Query.ts", "../../src/core/Relation.ts", "../../src/core/Component.ts", "../../src/core/Entity.ts", "../../src/core/utils/pipe.ts"],
  "sourcesContent": ["export const defineHiddenProperty = (obj:any,key:any,value:any) => Object.defineProperty(obj, key, {\r\n    value,\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: true,\r\n})\r\n\r\nexport const defineHiddenProperties = (obj:any,kv:any) => {\r\n    const descriptors = {\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true,\r\n    }\r\n    Object.defineProperties(obj, Reflect.ownKeys(kv).reduce((a,k) => Object.assign(a, {[k]: {value: kv[k], ...descriptors}}), {}))\r\n}", "/**\r\n * Represents the structure for managing entity IDs.\r\n */\r\nexport type EntityIndex = {\r\n    /** The number of currently alive entities. */\r\n    aliveCount: number\r\n    /** Array of entity IDs, densely packed. */\r\n    dense: number[]\r\n    /** Sparse array mapping entity IDs to their index in the dense array. */\r\n    sparse: number[]\r\n    /** The highest entity ID that has been assigned. */\r\n    maxId: number\r\n    /** Flag indicating if versioning is enabled. */\r\n    versioning: boolean\r\n    /** Number of bits used for versioning. */\r\n    versionBits: number\r\n    /** Bit mask for entity ID. */\r\n    entityMask: number\r\n    /** Bit shift for version. */\r\n    versionShift: number\r\n    /** Bit mask for version. */\r\n    versionMask: number\r\n}\r\n\r\n/**\r\n * Extracts the entity ID from a versioned entity ID by stripping off the version.\r\n * @param {EntityIndex} index - The EntityIndex containing the masks.\r\n * @param {number} id - The versioned entity ID.\r\n * @returns {number} The entity ID without the version.\r\n */\r\nexport const getId = (index: EntityIndex, id: number): number => id & index.entityMask;\r\n\r\n/**\r\n * Extracts the version from an entity ID.\r\n * @param {EntityIndex} index - The EntityIndex containing the masks and shifts.\r\n * @param {number} id - The entity ID.\r\n * @returns {number} The version.\r\n */\r\nexport const getVersion = (index: EntityIndex, id: number): number => \r\n    (id >>> index.versionShift) & ((1 << index.versionBits) - 1);\r\n\r\n/**\r\n * Increments the version of an entity ID.\r\n * @param {EntityIndex} index - The EntityIndex containing the masks and shifts.\r\n * @param {number} id - The entity ID.\r\n * @returns {number} The new entity ID with incremented version.\r\n */\r\nexport const incrementVersion = (index: EntityIndex, id: number): number => {\r\n    const currentVersion = getVersion(index, id);\r\n    const newVersion = (currentVersion + 1) & ((1 << index.versionBits) - 1);\r\n    return (id & index.entityMask) | (newVersion << index.versionShift);\r\n}\r\n\r\n/**\r\n * Creates configuration options for entity ID recycling with versioning.\r\n * @param {number} [versionBits] - Optional number of bits to use for version numbers. Defaults to 8 if not specified.\r\n * @returns {object} Configuration object with versioning enabled and specified version bits.\r\n */\r\nexport const withVersioning = (versionBits?: number) => ({\r\n    versioning: true,\r\n    versionBits\r\n})\r\n\r\n/**\r\n * Creates and initializes a new EntityIndex.\r\n * @param {object|function} [options] - Optional configuration object from withVersioning() or withVersioning function.\r\n * @param {boolean} options.versioning - Flag to enable versioning for recycled IDs.\r\n * @param {number} options.versionBits - Number of bits to use for versioning (default: 8).\r\n * @returns {EntityIndex} A new EntityIndex object.\r\n */\r\nexport const createEntityIndex = (options?: ReturnType<typeof withVersioning> | typeof withVersioning): EntityIndex => {\r\n    const config = options \r\n        ? typeof options === 'function' \r\n            ? options()\r\n            : options\r\n        : { versioning: false, versionBits: 8 }\r\n\r\n    const versionBits = config.versionBits ?? 8\r\n    const versioning = config.versioning ?? false\r\n    \r\n    const entityBits = 32 - versionBits\r\n    const entityMask = (1 << entityBits) - 1\r\n    const versionShift = entityBits\r\n    const versionMask = ((1 << versionBits) - 1) << versionShift\r\n\r\n    return {\r\n        aliveCount: 0,\r\n        dense: [],\r\n        sparse: [],\r\n        maxId: 0,\r\n        versioning,\r\n        versionBits,\r\n        entityMask,\r\n        versionShift,\r\n        versionMask\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a new entity ID to the index or recycles an existing one.\r\n * @param {EntityIndex} index - The EntityIndex to add to.\r\n * @returns {number} The new or recycled entity ID.\r\n */\r\nexport const addEntityId = (index: EntityIndex): number => {\r\n    if (index.aliveCount < index.dense.length) {\r\n        // Recycle id\r\n        const recycledId = index.dense[index.aliveCount];\r\n        const entityId = recycledId;\r\n        index.sparse[entityId] = index.aliveCount;\r\n        index.aliveCount++;\r\n        return recycledId;\r\n    }\r\n\r\n    // Create new id\r\n    const id = ++index.maxId;\r\n    index.dense.push(id);\r\n    index.sparse[id] = index.aliveCount;\r\n    index.aliveCount++;\r\n\r\n    return id;\r\n}\r\n\r\n/**\r\n * Removes an entity ID from the index.\r\n * @param {EntityIndex} index - The EntityIndex to remove from.\r\n * @param {number} id - The entity ID to remove.\r\n */\r\nexport const removeEntityId = (index: EntityIndex, id: number): void => {\r\n    const denseIndex = index.sparse[id];\r\n    if (denseIndex === undefined || denseIndex >= index.aliveCount) {\r\n        // Entity is not alive or doesn't exist, nothing to be done\r\n        return;\r\n    }\r\n\r\n    const lastIndex = index.aliveCount - 1;\r\n    const lastId = index.dense[lastIndex];\r\n\r\n    // Swap with the last element\r\n    index.sparse[lastId] = denseIndex;\r\n    index.dense[denseIndex] = lastId;\r\n\r\n    // Update the removed entity's record\r\n    index.sparse[id] = lastIndex; // Set to lastIndex instead of undefined\r\n    index.dense[lastIndex] = id; // Keep the original id, don't strip version\r\n\r\n    // Version the ID if enabled\r\n    if (index.versioning) {\r\n        const newId = incrementVersion(index, id);\r\n        index.dense[lastIndex] = newId;\r\n    }\r\n\r\n    index.aliveCount--;\r\n}\r\n\r\n/**\r\n * Checks if an entity ID is currently alive in the index.\r\n * @param {EntityIndex} index - The EntityIndex to check.\r\n * @param {number} id - The entity ID to check.\r\n * @returns {boolean} True if the entity ID is alive, false otherwise.\r\n */\r\nexport const isEntityIdAlive = (index: EntityIndex, id: number): boolean => {\r\n    const entityId = getId(index, id);\r\n    const denseIndex = index.sparse[entityId];\r\n    return denseIndex !== undefined && denseIndex < index.aliveCount && index.dense[denseIndex] === id;\r\n}\r\n", "import { defineHiddenProperty } from './utils/defineHiddenProperty'\r\nimport { createEntityIndex, EntityIndex } from './EntityIndex'\r\nimport { ComponentRef, ComponentData } from './Component'\r\nimport { Query } from './Query'\r\nimport { EntityId } from './Entity'\r\n\r\nexport const $internal = Symbol.for('bitecs_internal')\r\n\r\nexport type WorldContext = {\r\n    entityIndex: EntityIndex\r\n    entityMasks: number[][]\r\n    entityComponents: Map<EntityId, Set<ComponentRef>>\r\n    bitflag: number\r\n    componentMap: Map<ComponentRef, ComponentData>\r\n    componentCount: number\r\n    queries: Set<Query>\r\n    queriesHashMap: Map<string, Query>\r\n    notQueries: Set<any>\r\n    dirtyQueries: Set<any>\r\n    entitiesWithRelations: Set<EntityId>\r\n}\r\n\r\nexport type InternalWorld = {\r\n    [$internal]: WorldContext\r\n}\r\n\r\nexport type World<T extends object = {}> = { [K in keyof T]: T[K] }\r\n\r\nconst createBaseWorld = <T extends object>(context?: T, entityIndex?: EntityIndex): World<T> => \r\n    defineHiddenProperty(context || {} as T, $internal, {\r\n        entityIndex: entityIndex || createEntityIndex(),\r\n        entityMasks: [[]],\r\n        entityComponents: new Map(),\r\n        bitflag: 1,\r\n        componentMap: new Map(),\r\n        componentCount: 0,\r\n        queries: new Set(),\r\n        queriesHashMap: new Map(),\r\n        notQueries: new Set(),\r\n        dirtyQueries: new Set(),\r\n        entitiesWithRelations: new Set(),\r\n}) as World<T>\r\n\r\n/**\r\n * Creates a new world with various configurations.\r\n * @template T\r\n * @param {...Array<EntityIndex | object>} args - EntityIndex, context object, or both.\r\n * @returns {World<T>} The created world.\r\n */\r\n\r\n// TODO: middleware\r\n\r\nexport function createWorld<T extends object = {}>(\r\n    ...args: Array<EntityIndex | T>\r\n): World<T> {\r\n    let entityIndex: EntityIndex | undefined\r\n    let context: T | undefined\r\n\r\n    args.forEach(arg => {\r\n        if (typeof arg === 'object' && 'add' in arg && 'remove' in arg) {\r\n            entityIndex = arg as EntityIndex\r\n        } else if (typeof arg === 'object') {\r\n            context = arg as T\r\n        }\r\n    })\r\n\r\n    return createBaseWorld<T>(context, entityIndex)\r\n}\r\n\r\n/**\r\n * Resets a world.\r\n *\r\n * @param {World} world\r\n * @returns {object}\r\n */\r\nexport const resetWorld = (world: World) => {\r\n    const ctx = (world as InternalWorld)[$internal]\r\n    ctx.entityIndex = createEntityIndex()\r\n    ctx.entityMasks = [[]]\r\n    ctx.entityComponents = new Map()\r\n    ctx.bitflag = 1\r\n    ctx.componentMap = new Map()\r\n    ctx.componentCount = 0\r\n    ctx.queries = new Set()\r\n    ctx.queriesHashMap = new Map()\r\n    ctx.notQueries = new Set()\r\n    ctx.dirtyQueries = new Set()\r\n    ctx.entitiesWithRelations = new Set()\r\n    return world\r\n}\r\n\r\n/**\r\n * Deletes a world by removing its internal data.\r\n *\r\n * @param {World} world - The world to be deleted.\r\n */\r\nexport const deleteWorld = (world: World) => {\r\n    delete (world as any)[$internal];\r\n}\r\n\r\n/**\r\n * Returns all components registered to a world\r\n *\r\n * @param {World} world\r\n * @returns Array\r\n */\r\nexport const getWorldComponents = (world: World) =>\r\n    Object.keys((world as InternalWorld)[$internal].componentMap)\r\n\r\n/**\r\n * Returns all existing entities in a world\r\n *\r\n * @param {World} world\r\n * @returns Array\r\n */\r\nexport const getAllEntities = (world: World): readonly EntityId[] => Array.from((world as InternalWorld)[$internal].entityComponents.keys())\r\n", "export type SparseSet = {\r\n    add: (val: number) => void\r\n    remove: (val: number) => void\r\n    has: (val: number) => boolean\r\n    sparse: number[]\r\n    dense: number[] | Uint32Array\r\n    reset: () => void\r\n}\r\n\r\nexport const createSparseSet = (): SparseSet => {\r\n\tconst dense: number[] = []\r\n\tconst sparse: number[] = []\r\n\r\n\tconst has = (val: number) => dense[sparse[val]] === val\r\n\r\n\tconst add = (val: number) => {\r\n\t\tif (has(val)) return\r\n\t\tsparse[val] = dense.push(val) - 1\r\n\t}\r\n\r\n\tconst remove = (val: number) => {\r\n\t\tif (!has(val)) return\r\n\t\tconst index = sparse[val]\r\n\t\tconst swapped = dense.pop()!\r\n\t\tif (swapped !== val) {\r\n\t\t\tdense[index] = swapped\r\n\t\t\tsparse[swapped] = index\r\n\t\t}\r\n\t}\r\n\r\n\tconst reset = () => {\r\n\t\tdense.length = 0\r\n\t\tsparse.length = 0\r\n\t}\r\n\r\n\treturn {\r\n\t\tadd,\r\n\t\tremove,\r\n\t\thas,\r\n\t\tsparse,\r\n\t\tdense,\r\n\t\treset,\r\n\t}\r\n}\r\n\r\nconst SharedArrayBufferOrArrayBuffer = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer\r\n\r\nexport const createUint32SparseSet = (initialCapacity: number = 1000): SparseSet => {\r\n\tconst sparse: number[] = []\r\n\tlet length = 0\r\n\tlet dense: Uint32Array = new Uint32Array(new SharedArrayBufferOrArrayBuffer(initialCapacity * 4))\r\n\r\n\tconst has = (val: number) => val < sparse.length && sparse[val] < length && dense[sparse[val]] === val\r\n\r\n\tconst add = (val: number) => {\r\n\t\tif (has(val)) return\r\n\t\tif (length >= dense.length) {\r\n\t\t\tconst newDense = new Uint32Array(new SharedArrayBufferOrArrayBuffer(dense.length * 2 * 4))\r\n\t\t\tnewDense.set(dense)\r\n\t\t\tdense = newDense\r\n\t\t}\r\n\t\tdense[length] = val\r\n\t\tsparse[val] = length\r\n\t\tlength++\r\n\t}\r\n\r\n\tconst remove = (val: number) => {\r\n\t\tif (!has(val)) return\r\n\t\tlength--\r\n\t\tconst index = sparse[val]\r\n\t\tconst swapped = dense[length]\r\n\t\tdense[index] = swapped\r\n\t\tsparse[swapped] = index\r\n\t}\r\n\r\n\tconst reset = () => {\r\n\t\tlength = 0\r\n\t\tsparse.length = 0\r\n\t}\r\n\r\n\treturn {\r\n\t\tadd,\r\n\t\tremove,\r\n\t\thas,\r\n\t\tsparse,\r\n\t\tget dense() {\r\n\t\t\treturn new Uint32Array(dense.buffer, 0, length)\r\n\t\t},\r\n\t\treset,\r\n\t}\r\n}", "import { EntityId } from \"../Entity\"\r\n\r\nexport type Observer = (entity: EntityId, ...args: any[]) => void | object\r\n\r\nexport interface Observable {\r\n  subscribe: (observer: Observer) => () => void\r\n  notify: (entity: EntityId, ...args: any[])  => void | object\r\n}\r\n\r\nexport const createObservable = (): Observable => {\r\n  const observers = new Set<Observer>()\r\n\r\n  const subscribe = (observer: Observer) => {\r\n    observers.add(observer)\r\n    return () => {\r\n      observers.delete(observer)\r\n    }\r\n  }\r\n  const notify = (entity: EntityId, ...args: any[]) => {\r\n    return Array.from(observers).reduce((acc, listener) => {\r\n      const result = listener(entity, ...args)\r\n      return result && typeof result === 'object' ? { ...acc, ...result } : acc\r\n    }, {})\r\n  }\r\n\r\n  return {\r\n    subscribe,\r\n    notify\r\n  }\r\n}\r\n", "import { createSparseSet, createUint32SparseSet, type SparseSet } from './utils/SparseSet'\r\nimport { hasComponent, registerComponent } from './Component'\r\nimport { ComponentRef, ComponentData } from './Component'\r\nimport { World } from \"./World\"\r\nimport { InternalWorld } from './World'\r\nimport { $internal } from './World'\r\nimport { createObservable } from './utils/Observer'\r\nimport { EntityId, Prefab } from './Entity'\r\n\r\n/**\r\n * @typedef {Uint32Array | readonly number[]} QueryResult\r\n * @description The result of a query, either as a Uint32Array or a readonly array of numbers.\r\n */\r\nexport type QueryResult = Uint32Array | readonly EntityId[]\r\n\r\n/**\r\n * @typedef {Object} Query\r\n * @description Represents a query in the ECS.\r\n * @property {ComponentRef[]} allComponents - All components in the query.\r\n * @property {ComponentRef[]} orComponents - Components in an OR relationship.\r\n * @property {ComponentRef[]} notComponents - Components that should not be present.\r\n * @property {Object.<number, number>} masks - Bitmasks for each component generation.\r\n * @property {Object.<number, number>} orMasks - OR bitmasks for each component generation.\r\n * @property {Object.<number, number>} notMasks - NOT bitmasks for each component generation.\r\n * @property {Object.<number, number>} hasMasks - HAS bitmasks for each component generation.\r\n * @property {number[]} generations - Component generations.\r\n * @property {SparseSet} toRemove - Set of entities to be removed.\r\n * @property {ReturnType<typeof createObservable>} addObservable - Observable for entity additions.\r\n * @property {ReturnType<typeof createObservable>} removeObservable - Observable for entity removals.\r\n */\r\nexport type Query = SparseSet & {\r\n\tallComponents: ComponentRef[]\r\n\torComponents: ComponentRef[]\r\n\tnotComponents: ComponentRef[]\r\n\tmasks: Record<number, number>\r\n\torMasks: Record<number, number>\r\n\tnotMasks: Record<number, number>\r\n\thasMasks: Record<number, number>\r\n\tgenerations: number[]\r\n\ttoRemove: SparseSet\r\n\taddObservable: ReturnType<typeof createObservable>\r\n\tremoveObservable: ReturnType<typeof createObservable>\r\n\tqueues: Record<any, any>\r\n}\r\n\r\n/**\r\n * @typedef {'Or' | 'And' | 'Not'} QueryOperatorType\r\n * @description Types of query operators.\r\n */\r\nexport type QueryOperatorType = 'Or' | 'And' | 'Not'\r\n/**\r\n * Symbol for query operator type.\r\n * @type {Symbol}\r\n */\r\nexport const $opType = Symbol.for('bitecs-opType')\r\n\r\n/**\r\n * Symbol for query operator terms.\r\n * @type {Symbol}\r\n */\r\nexport const $opTerms = Symbol.for('bitecs-opTerms')\r\n\r\n/**\r\n * @typedef {Object} OpReturnType\r\n * @property {symbol} [$opType] - The type of the operator.\r\n * @property {symbol} [$opTerms] - The components involved in the operation.\r\n */\r\nexport type OpReturnType = {\r\n\t[$opType]: string\r\n\t[$opTerms]: ComponentRef[]\r\n}\r\n\r\n/**\r\n * @typedef {Function} QueryOperator\r\n * @description A function that creates a query operator.\r\n * @param {...ComponentRef} components - The components to apply the operator to.\r\n * @returns {OpReturnType} The result of the operator.\r\n */\r\nexport type QueryOperator = (...components: ComponentRef[]) => OpReturnType\r\n\r\n/**\r\n * @typedef {ComponentRef | QueryOperator} QueryTerm\r\n * @description A term in a query, either a component reference or a query operator.\r\n */\r\nexport type QueryTerm = ComponentRef | QueryOperator\r\n\r\n\r\n// Aliases\r\nexport type OrOp = QueryOperator\r\nexport type AndOp = QueryOperator\r\nexport type NotOp = QueryOperator\r\nexport type AnyOp = OrOp\r\nexport type AllOp = AndOp\r\nexport type NoneOp = NotOp\r\n\r\n/**\r\n * @function Or\r\n * @description Creates an 'Or' query operator.\r\n * @param {...ComponentRef} components - The components to apply the 'Or' operator to.\r\n * @returns {OpReturnType} The 'Or' operator configuration.\r\n */\r\nexport const Or: OrOp = (...components: ComponentRef[]) => ({\r\n\t[$opType]: 'Or',\r\n\t[$opTerms]: components\r\n})\r\n\r\n/**\r\n * @function And\r\n * @description Creates an 'And' query operator.\r\n * @param {...ComponentRef} components - The components to apply the 'And' operator to.\r\n * @returns {OpReturnType} The 'And' operator configuration.\r\n */\r\nexport const And: AndOp = (...components: ComponentRef[]) => ({\r\n\t[$opType]: 'And',\r\n\t[$opTerms]: components\r\n})\r\n\r\n/**\r\n * @function Not\r\n * @description Creates a 'Not' query operator.\r\n * @param {...ComponentRef} components - The components to apply the 'Not' operator to.\r\n * @returns {OpReturnType} The 'Not' operator configuration.\r\n */\r\nexport const Not: NotOp = (...components: ComponentRef[]) => ({\r\n\t[$opType]: 'Not',\r\n\t[$opTerms]: components\r\n})\r\n\r\nexport const Any: AnyOp = Or\r\nexport const All: AllOp = And\r\nexport const None: NoneOp = Not\r\n\r\n/**\r\n * @typedef {Function} ObservableHook\r\n * @description A function that creates an observable hook for queries.\r\n * @param {...QueryTerm} terms - The query terms to observe.\r\n * @returns {{type: 'add' | 'remove' | 'set', terms: QueryTerm[]}} The observable hook configuration.\r\n */\r\nexport type ObservableHookDef = (...terms: QueryTerm[]) => {\r\n\t[$opType]: 'add' | 'remove' | 'set' | 'get'\r\n\t[$opTerms]: QueryTerm[]\r\n}\r\n\r\nexport type ObservableHook = ReturnType<ObservableHookDef>\r\n\r\n/**\r\n * @function onAdd\r\n * @description Creates an 'add' observable hook.\r\n * @param {...QueryTerm} terms - The query terms to observe for addition.\r\n * @returns {OpReturnType} The 'add' observable hook configuration.\r\n */\r\nexport const onAdd: ObservableHookDef = (...terms: QueryTerm[]) => ({\r\n\t[$opType]: 'add',\r\n\t[$opTerms]: terms\r\n})\r\n\r\n/**\r\n * @function onRemove\r\n * @description Creates a 'remove' observable hook.\r\n * @param {...QueryTerm} terms - The query terms to observe for removal.\r\n * @returns {OpReturnType} The 'remove' observable hook configuration.\r\n */\r\nexport const onRemove: ObservableHookDef = (...terms: QueryTerm[]) => ({\r\n\t[$opType]: 'remove',\r\n\t[$opTerms]: terms\r\n})\r\n\r\n/**\r\n * @function onSet\r\n * @description Creates a 'set' observable hook.\r\n * @param {...QueryTerm} terms - The query terms to observe for setting.\r\n * @returns {OpReturnType} The 'set' observable hook configuration.\r\n */\r\nexport const onSet: ObservableHookDef = (component: ComponentRef) => ({\r\n\t[$opType]: 'set',\r\n\t[$opTerms]: [component]\r\n})\r\n\r\n/**\r\n * @function onGet\r\n * @description Creates a 'get' observable hook.\r\n * @param {...QueryTerm} terms - The query terms to observe for getting.\r\n * @returns {OpReturnType} The 'get' observable hook configuration.\r\n */\r\nexport const onGet: ObservableHookDef = (component: ComponentRef) => ({\r\n\t[$opType]: 'get',\r\n\t[$opTerms]: [component]\r\n})\r\n\r\n/**\r\n * @function observe\r\n * @description Observes changes in entities based on specified components.\r\n * @param {World} world - The world object.\r\n * @param {ObservableHook} hook - The observable hook.\r\n * @param {function(number): any} callback - The callback function to execute when changes occur.\r\n * @returns {function(): void} A function to unsubscribe from the observation.\r\n */\r\nexport function observe(world: World, hook: ObservableHook, callback: (eid: EntityId, ...args: any[]) => any): () => void {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst { [$opType]: type, [$opTerms]: components } = hook\r\n\r\n\tif (type === 'add' || type === 'remove') {\r\n\t\tconst hash = queryHash(world, components)\r\n\t\tlet queryData = ctx.queriesHashMap.get(hash)!\r\n\r\n\t\tif (!queryData) {\r\n\t\t\tqueryData = registerQuery(world, components)\r\n\t\t}\r\n\r\n\t\tconst observableKey = type === 'add' ? 'addObservable' : 'removeObservable'\r\n\t\treturn queryData[observableKey].subscribe(callback)\r\n\t} else if (type === 'set' || type === 'get') {\r\n\t\tif (components.length !== 1) {\r\n\t\t\tthrow new Error('Set and Get hooks can only observe a single component')\r\n\t\t}\r\n\t\tconst component = components[0]\r\n\t\tlet componentData = ctx.componentMap.get(component)\r\n\t\tif (!componentData) {\r\n\t\t\tcomponentData = registerComponent(world, component)\r\n\t\t}\r\n\t\tconst observableKey = type === 'set' ? 'setObservable' : 'getObservable'\r\n\t\treturn componentData[observableKey].subscribe(callback)\r\n\t}\r\n\r\n\tthrow new Error(`Invalid hook type: ${type}`)\r\n}\r\n\r\n/**\r\n * @function queryHash\r\n * @description Generates a hash for a query based on its terms.\r\n * @param {World} world - The world object.\r\n * @param {QueryTerm[]} terms - The query terms.\r\n * @returns {string} The generated hash.\r\n */\r\nexport const queryHash = (world: World, terms: QueryTerm[]): string => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\r\n\tconst getComponentId = (component: ComponentRef): number => {\r\n\t\tif (!ctx.componentMap.has(component)) {\r\n\t\t\tregisterComponent(world, component)\r\n\t\t}\r\n\t\treturn ctx.componentMap.get(component)!.id\r\n\t}\r\n\tconst termToString = (term: QueryTerm): string => {\r\n\t\tif ($opType in term) {\r\n\t\t\tconst componentIds = term[$opTerms].map(getComponentId)\r\n\t\t\tconst sortedComponentIds = componentIds.sort((a, b) => a - b)\r\n\t\t\tconst sortedType = term[$opType].toLowerCase()\r\n\t\t\treturn `${sortedType}(${sortedComponentIds.join(',')})`\r\n\t\t} else {\r\n\t\t\treturn getComponentId(term).toString()\r\n\t\t}\r\n\t}\r\n\r\n\treturn terms\r\n\t\t.map(termToString)\r\n\t\t.sort()\r\n\t\t.join('-')\r\n}\r\n\r\n/**\r\n * @function registerQuery\r\n * @description Registers a new query in the world.\r\n * @param {World} world - The world object.\r\n * @param {QueryTerm[]} terms - The query terms.\r\n * @param {Object} [options] - Additional options.\r\n * @param {boolean} [options.buffered] - Whether the query should be buffered.\r\n * @returns {Query} The registered query.\r\n */\r\nexport const registerQuery = (world: World, terms: QueryTerm[], options: { buffered?: boolean } = {}): Query => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst hash = queryHash(world, terms)\r\n\t// if (ctx.queriesHashMap.has(hash)) {\r\n\t// \treturn ctx.queriesHashMap.get(hash)!\r\n\t// }\r\n\tconst components: ComponentRef[] = []\r\n\tconst notComponents: ComponentRef[] = []\r\n\tconst orComponents: ComponentRef[] = []\r\n\r\n\tconst processComponents = (comps: ComponentRef[], targetArray: ComponentRef[]) => {\r\n\t\tcomps.forEach((comp: ComponentRef) => {\r\n\t\t\tif (!ctx.componentMap.has(comp)) registerComponent(world, comp)\r\n\t\t\ttargetArray.push(comp)\r\n\t\t})\r\n\t}\r\n\r\n\tterms.forEach((term: QueryTerm) => {\r\n\t\tif ($opType in term) {\r\n\t\t\tif (term[$opType] === 'Not') {\r\n\t\t\t\tprocessComponents(term[$opTerms], notComponents)\r\n\t\t\t} else if (term[$opType] === 'Or') {\r\n\t\t\t\tprocessComponents(term[$opTerms], orComponents)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (!ctx.componentMap.has(term)) registerComponent(world, term)\r\n\t\t\tcomponents.push(term)\r\n\t\t}\r\n\t})\r\n\r\n\tconst mapComponents = (c: ComponentRef) => ctx.componentMap.get(c)!\r\n\tconst allComponents = components.concat(notComponents.flat()).concat(orComponents.flat()).map(mapComponents)\r\n\r\n\tconst sparseSet = options.buffered ? createUint32SparseSet() : createSparseSet()\r\n\r\n\tconst toRemove = createSparseSet()\r\n\r\n\tconst generations = allComponents\r\n\t\t.map((c) => c.generationId)\r\n\t\t.reduce((a, v) => {\r\n\t\t\tif (a.includes(v)) return a\r\n\t\t\ta.push(v)\r\n\t\t\treturn a\r\n\t\t}, [] as number[])\r\n\r\n\tconst reduceBitflags = (a: { [key: number]: number }, c: ComponentData) => {\r\n\t\tif (!a[c.generationId]) a[c.generationId] = 0\r\n\t\ta[c.generationId] |= c.bitflag\r\n\t\treturn a\r\n\t}\r\n\r\n\tconst masks = components.map(mapComponents).reduce(reduceBitflags, {})\r\n\tconst notMasks = notComponents.map(mapComponents).reduce(reduceBitflags, {})\r\n\tconst orMasks = orComponents.map(mapComponents).reduce(reduceBitflags, {})\r\n\tconst hasMasks = allComponents.reduce(reduceBitflags, {})\r\n\r\n\tconst addObservable = createObservable()\r\n\tconst removeObservable = createObservable()\r\n\r\n\tconst query = Object.assign(sparseSet, {\r\n\t\tcomponents,\r\n\t\tnotComponents,\r\n\t\torComponents,\r\n\t\tallComponents,\r\n\t\tmasks,\r\n\t\tnotMasks,\r\n\t\torMasks,\r\n\t\thasMasks,\r\n\t\tgenerations,\r\n\t\ttoRemove,\r\n\t\taddObservable,\r\n\t\tremoveObservable,\r\n\t\tqueues: {},\r\n\t}) as Query\r\n\r\n\tctx.queries.add(query)\r\n\r\n\tctx.queriesHashMap.set(hash, query)\r\n\r\n\tallComponents.forEach((c) => {\r\n\t\tc.queries.add(query)\r\n\t})\r\n\r\n\tif (notComponents.length) ctx.notQueries.add(query)\r\n\r\n\tconst entityIndex = ctx.entityIndex\r\n\tfor (let i = 0; i < entityIndex.aliveCount; i++) {\r\n\t\tconst eid = entityIndex.dense[i]\r\n\t\tif (hasComponent(world, eid, Prefab)) continue\r\n\t\tconst match = queryCheckEntity(world, query, eid)\r\n\t\tif (match) {\r\n\t\t\tqueryAddEntity(query, eid)\r\n\t\t}\r\n\t}\r\n\r\n\treturn query\r\n}\r\n\r\n/**\r\n * @function innerQuery\r\n * @description Performs an internal query operation.\r\n * @param {World} world - The world object.\r\n * @param {QueryTerm[]} terms - The query terms.\r\n * @param {Object} [options] - Additional options.\r\n * @param {boolean} [options.buffered] - Whether the query should be buffered.\r\n * @returns {QueryResult} The result of the query.\r\n */\r\nexport function innerQuery(world: World, terms: QueryTerm[], options: { buffered?: boolean } = {}): QueryResult {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst hash = queryHash(world, terms)\r\n\tlet queryData = ctx.queriesHashMap.get(hash)\r\n\tif (!queryData) {\r\n\t\tqueryData = registerQuery(world, terms, options)\r\n\t} else if (options.buffered && !('buffer' in queryData.dense)) {\r\n\t\tqueryData = registerQuery(world, terms, { buffered: true })\r\n\t}\r\n\treturn queryData.dense\r\n}\r\n\r\n/**\r\n * @function query\r\n * @description Performs a query operation.\r\n * @param {World} world - The world object.\r\n * @param {QueryTerm[]} terms - The query terms.\r\n * @returns {readonly EntityId[]} The result of the query as a readonly array of entity IDs.\r\n */\r\nexport function query(world: World, terms: QueryTerm[]): readonly EntityId[] {\r\n\tcommitRemovals(world)\r\n\treturn innerQuery(world, terms) as EntityId[]\r\n}\r\n\r\n/**\r\n * @function bufferQuery\r\n * @description Performs a buffered query operation.\r\n * @param {World} world - The world object.\r\n * @param {QueryTerm[]} terms - The query terms.\r\n * @returns {Uint32Array} The result of the query as a Uint32Array.\r\n */\r\nexport function bufferQuery(world: World, terms: QueryTerm[]): Uint32Array {\r\n\tcommitRemovals(world)\r\n\treturn innerQuery(world, terms, { buffered: true }) as Uint32Array\r\n}\r\n\r\n/**\r\n * @function queryCheckEntity\r\n * @description Checks if an entity matches a query.\r\n * @param {World} world - The world object.\r\n * @param {Query} query - The query to check against.\r\n * @param {number} eid - The entity ID to check.\r\n * @returns {boolean} True if the entity matches the query, false otherwise.\r\n */\r\nexport function queryCheckEntity(world: World, query: Query, eid: EntityId): boolean {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst { masks, notMasks, orMasks, generations } = query\r\n\r\n\tfor (let i = 0; i < generations.length; i++) {\r\n\t\tconst generationId = generations[i]\r\n\t\tconst qMask = masks[generationId]\r\n\t\tconst qNotMask = notMasks[generationId]\r\n\t\tconst qOrMask = orMasks[generationId]\r\n\t\tconst eMask = ctx.entityMasks[generationId][eid]\r\n\r\n\t\tif (qNotMask && (eMask & qNotMask) !== 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\tif (qMask && (eMask & qMask) !== qMask) {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\tif (qOrMask && (eMask & qOrMask) === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\n/**\r\n * @function queryCheckComponent\r\n * @description Checks if a component matches a query.\r\n * @param {Query} query - The query to check against.\r\n * @param {ComponentData} c - The component data to check.\r\n * @returns {boolean} True if the component matches the query, false otherwise.\r\n */\r\nexport const queryCheckComponent = (query: Query, c: ComponentData) => {\r\n\tconst { generationId, bitflag } = c\r\n\tconst { hasMasks } = query\r\n\tconst mask = hasMasks[generationId]\r\n\treturn (mask & bitflag) === bitflag\r\n}\r\n\r\n/**\r\n * @function queryAddEntity\r\n * @description Adds an entity to a query.\r\n * @param {Query} query - The query to add the entity to.\r\n * @param {number} eid - The entity ID to add.\r\n */\r\nexport const queryAddEntity = (query: Query, eid: EntityId) => {\r\n\tquery.toRemove.remove(eid)\r\n\r\n\tquery.addObservable.notify(eid)\r\n\r\n\tquery.add(eid)\r\n}\r\n\r\n/**\r\n * @function queryCommitRemovals\r\n * @description Commits removals for a query.\r\n * @param {Query} query - The query to commit removals for.\r\n */\r\nconst queryCommitRemovals = (query: Query) => {\r\n\tfor (let i = 0; i < query.toRemove.dense.length; i++) {\r\n\t\tconst eid = query.toRemove.dense[i]\r\n\r\n\t\tquery.remove(eid)\r\n\t}\r\n\tquery.toRemove.reset()\r\n}\r\n\r\n/**\r\n * @function commitRemovals\r\n * @description Commits all pending removals for queries in the world.\r\n * @param {World} world - The world object.\r\n */\r\nexport const commitRemovals = (world: World) => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tif (!ctx.dirtyQueries.size) return\r\n\tctx.dirtyQueries.forEach(queryCommitRemovals)\r\n\tctx.dirtyQueries.clear()\r\n}\r\n\r\n/**\r\n * @function queryRemoveEntity\r\n * @description Removes an entity from a query.\r\n * @param {World} world - The world object.\r\n * @param {Query} query - The query to remove the entity from.\r\n * @param {number} eid - The entity ID to remove.\r\n */\r\nexport const queryRemoveEntity = (world: World, query: Query, eid: EntityId) => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst has = query.has(eid)\r\n\tif (!has || query.toRemove.has(eid)) return\r\n\tquery.toRemove.add(eid)\r\n\tctx.dirtyQueries.add(query)\r\n\tquery.removeObservable.notify(eid)\r\n}\r\n\r\n/**\r\n * @function removeQuery\r\n * @description Removes a query from the world.\r\n * @param {World} world - The world object.\r\n * @param {QueryTerm[]} terms - The query terms of the query to remove.\r\n */\r\nexport const removeQuery = (world: World, terms: QueryTerm[]) => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst hash = queryHash(world, terms)\r\n\tconst query = ctx.queriesHashMap.get(hash)\r\n\tif (query) {\r\n\t\tctx.queries.delete(query)\r\n\t\tctx.queriesHashMap.delete(hash)\r\n\t}\r\n}\r\n", "import { getEntityComponents, World } from '.'\r\nimport { EntityId } from './Entity'\r\nimport { defineHiddenProperty } from './utils/defineHiddenProperty'\r\n\r\n/**\r\n * Callback function type for when a target is removed from a relation.\r\n * @callback OnTargetRemovedCallback\r\n * @param {number} subject - The subject entity ID.\r\n * @param {number} target - The target entity ID.\r\n */\r\nexport type OnTargetRemovedCallback = (subject: EntityId, target: EntityId) => void\r\n\r\n/**\r\n * Possible types for a relation target.\r\n * @typedef {number | '*' | typeof Wildcard} RelationTarget\r\n */\r\nexport type RelationTarget = number | '*' | typeof Wildcard\r\n/**\r\n * Symbol for accessing the relation of a component.\r\n * @type {Symbol}\r\n */\r\nexport const $relation = Symbol.for('bitecs-relation')\r\n\r\n/**\r\n * Symbol for accessing the pair target of a component.\r\n * @type {Symbol}\r\n */\r\nexport const $pairTarget = Symbol.for('bitecs-pairTarget')\r\n\r\n/**\r\n * Symbol for checking if a component is a pair component.\r\n * @type {Symbol}\r\n */\r\nexport const $isPairComponent = Symbol.for('bitecs-isPairComponent')\r\n\r\n/**\r\n * Symbol for accessing the relation data of a component.\r\n * @type {Symbol}\r\n */\r\nexport const $relationData = Symbol.for('bitecs-relationData')\r\n\r\n/**\r\n * Interface for relation data.\r\n * @interface RelationData\r\n * @template T\r\n */\r\ntype RelationData<T> = {\r\n    pairsMap: Map<number | string | Relation<any>, T>\r\n    initStore: (eid: EntityId) => T\r\n    exclusiveRelation: boolean\r\n    autoRemoveSubject: boolean\r\n    onTargetRemoved: OnTargetRemovedCallback\r\n}\r\n\r\n/**\r\n * Type definition for a Relation function.\r\n * @template T\r\n * @typedef {function} Relation\r\n * @param {RelationTarget} target - The target of the relation.\r\n * @returns {T} The relation component.\r\n */\r\nexport type Relation<T> = (target: RelationTarget) => T\r\n\r\n/**\r\n * Creates a base relation.\r\n * @template T\r\n * @returns {Relation<T>} The created base relation.\r\n */\r\nconst createBaseRelation = <T>(): Relation<T> => {\r\n    const data = {\r\n        pairsMap: new Map(),\r\n        initStore: undefined,\r\n        exclusiveRelation: false,\r\n        autoRemoveSubject: false,\r\n        onTargetRemoved: undefined\r\n    }\r\n    const relation = (target: RelationTarget): T => {\r\n        if (target === undefined) throw Error('Relation target is undefined')\r\n        const normalizedTarget = target === '*' ? Wildcard : target\r\n        if (!data.pairsMap.has(normalizedTarget)) {\r\n            const component = data.initStore ? data.initStore(target) : {} as T\r\n            defineHiddenProperty(component, $relation, relation)\r\n            defineHiddenProperty(component, $pairTarget, normalizedTarget)\r\n            defineHiddenProperty(component, $isPairComponent, true)\r\n            data.pairsMap.set(normalizedTarget, component)\r\n        }\r\n\r\n        return data.pairsMap.get(normalizedTarget)!\r\n    }\r\n\r\n    defineHiddenProperty(relation, $relationData, data)\r\n\r\n    return relation as Relation<T>\r\n}\r\n\r\n/**\r\n * Adds a store to a relation.\r\n * @template T\r\n * @param {function(): T} createStore - Function to create the store.\r\n * @returns {function(Relation<T>): Relation<T>} A function that modifies the relation.\r\n */\r\nexport const withStore = <T>(createStore: (eid: EntityId) => T) => (relation: Relation<T>): Relation<T> => {\r\n    const ctx = relation[$relationData] as RelationData<T>\r\n    ctx.initStore = createStore\r\n    return relation\r\n}\r\n\r\n/**\r\n * Makes a relation exclusive.\r\n * @template T\r\n * @param {Relation<T>} relation - The relation to make exclusive.\r\n * @returns {Relation<T>} The modified relation.\r\n */\r\nexport const makeExclusive = <T>(relation: Relation<T>): Relation<T> => {\r\n    const ctx = relation[$relationData] as RelationData<T>\r\n    ctx.exclusiveRelation = true\r\n    return relation\r\n}\r\n\r\n/**\r\n * Adds auto-remove subject behavior to a relation.\r\n * @template T\r\n * @param {Relation<T>} relation - The relation to modify.\r\n * @returns {Relation<T>} The modified relation.\r\n */\r\nexport const withAutoRemoveSubject = <T>(relation: Relation<T>): Relation<T> => {\r\n    const ctx = relation[$relationData] as RelationData<T>\r\n    ctx.autoRemoveSubject = true\r\n    return relation\r\n}\r\n\r\n/**\r\n * Adds an onTargetRemoved callback to a relation.\r\n * @template T\r\n * @param {OnTargetRemovedCallback} onRemove - The callback to add.\r\n * @returns {function(Relation<T>): Relation<T>} A function that modifies the relation.\r\n */\r\nexport const withOnTargetRemoved = <T>(onRemove: OnTargetRemovedCallback) => (relation: Relation<T>): Relation<T> => {\r\n    const ctx = relation[$relationData] as RelationData<T>\r\n    ctx.onTargetRemoved = onRemove\r\n    return relation\r\n}\r\n\r\n// TODO: withSetter\r\n/**\r\n * Adds validation to a relation.\r\n * @template T\r\n * @param {function(T): boolean} validateFn - The validation function.\r\n * @returns {function(Relation<T>): Relation<T>} A function that modifies the relation.\r\n */\r\nconst withValidation = <T>(validateFn: (value: T) => boolean) => (relation: Relation<T>): Relation<T> => {\r\n    const originalRelation = relation\r\n    return ((target: RelationTarget): T => {\r\n        const component = originalRelation(target)\r\n        if (!validateFn(component)) {\r\n            throw new Error('Validation failed for relation component')\r\n        }\r\n        return component\r\n    }) as Relation<T>\r\n}\r\n\r\n/**\r\n * Creates a pair from a relation and a target.\r\n * @template T\r\n * @param {Relation<T>} relation - The relation.\r\n * @param {RelationTarget} target - The target.\r\n * @returns {T} The created pair.\r\n * @throws {Error} If the relation is undefined.\r\n */\r\nexport const Pair = <T>(relation: Relation<T>, target: RelationTarget): T => {\r\n    if (relation === undefined) throw Error('Relation is undefined')\r\n    return relation(target)\r\n}\r\n\r\n/**\r\n * Gets the relation targets for an entity.\r\n * @param {World} world - The world object.\r\n * @param {Relation<any>} relation - The relation to get targets for.\r\n * @param {number} eid - The entity ID.\r\n * @returns {Array<any>} An array of relation targets.\r\n */\r\nexport const getRelationTargets = (world: World, eid: EntityId, relation: Relation<any>): number[] => {\r\n\tconst components = getEntityComponents(world, eid)\r\n\tconst targets = []\r\n\tfor (const c of components) {\r\n\t\tif (c[$relation] === relation && c[$pairTarget] !== Wildcard && !isRelation(c[$pairTarget])) {\r\n\t\t\ttargets.push(c[$pairTarget])\r\n\t\t}\r\n\t}\r\n\treturn targets\r\n}\r\n\r\n/**\r\n * Creates a new relation.\r\n * @template T\r\n * @param {...Array<function(Relation<T>): Relation<T>>} modifiers - Modifier functions for the relation.\r\n * @returns {Relation<T>} The created relation.\r\n */\r\nexport function createRelation<T>(...modifiers: Array<(relation: Relation<T>) => Relation<T>>): Relation<T>\r\n\r\n/**\r\n * Creates a new relation with options.\r\n * @template T\r\n * @param {Object} options - Options for creating the relation.\r\n * @param {function(): T} [options.store] - Function to create the store.\r\n * @param {boolean} [options.exclusive] - Whether the relation is exclusive.\r\n * @param {boolean} [options.autoRemoveSubject] - Whether to auto-remove the subject.\r\n * @param {OnTargetRemovedCallback} [options.onTargetRemoved] - Callback for when a target is removed.\r\n * @returns {Relation<T>} The created relation.\r\n */\r\nexport function createRelation<T>(options: {\r\n    store?: () => T\r\n    exclusive?: boolean\r\n    autoRemoveSubject?: boolean\r\n    onTargetRemoved?: OnTargetRemovedCallback\r\n}): Relation<T>\r\nexport function createRelation<T>(\r\n    ...args: Array<(relation: Relation<T>) => Relation<T>> | [{\r\n        store?: () => T\r\n        exclusive?: boolean\r\n        autoRemoveSubject?: boolean\r\n        onTargetRemoved?: OnTargetRemovedCallback\r\n    }]\r\n): Relation<T> {\r\n    if (args.length === 1 && typeof args[0] === 'object') {\r\n        const { store, exclusive, autoRemoveSubject, onTargetRemoved } = args[0]\r\n        const modifiers = [\r\n            store && withStore(store),\r\n            exclusive && makeExclusive,\r\n            autoRemoveSubject && withAutoRemoveSubject,\r\n            onTargetRemoved && withOnTargetRemoved(onTargetRemoved)\r\n        ].filter(Boolean) as Array<(relation: Relation<T>) => Relation<T>>\r\n        return modifiers.reduce((acc, modifier) => modifier(acc), createBaseRelation<T>())\r\n    } else {\r\n        const modifiers = args as Array<(relation: Relation<T>) => Relation<T>>\r\n        return modifiers.reduce((acc, modifier) => modifier(acc), createBaseRelation<T>())\r\n    }\r\n}\r\n\r\n/**\r\n * Symbol used to mark a relation as a wildcard relation\r\n */\r\nexport const $wildcard = Symbol.for('bitecs-wildcard')\r\n\r\n/**\r\n * Creates a wildcard relation that matches any target.\r\n * @template T\r\n * @returns {Relation<T>} The created wildcard relation.\r\n */\r\nexport function createWildcardRelation<T>(): Relation<T> {\r\n    const relation = createBaseRelation<T>()\r\n    Object.defineProperty(relation, $wildcard, {\r\n        value: true,\r\n        enumerable: false,\r\n        writable: false,\r\n        configurable: false\r\n    })\r\n    return relation\r\n}\r\n\r\n/**\r\n * Gets the singleton wildcard instance.\r\n * @returns {Relation<any>} The global wildcard relation instance.\r\n */\r\nexport function getWildcard(): Relation<any> {\r\n    const GLOBAL_WILDCARD = Symbol.for('bitecs-global-wildcard')\r\n    \r\n    if (!(globalThis as any)[GLOBAL_WILDCARD]) {\r\n        (globalThis as any)[GLOBAL_WILDCARD] = createWildcardRelation()\r\n    }\r\n    \r\n    return (globalThis as any)[GLOBAL_WILDCARD]\r\n}\r\n\r\n/**\r\n * Wildcard relation.\r\n * @type {Relation<any>}\r\n */\r\nexport const Wildcard = getWildcard()\r\n\r\n/**\r\n * Creates an IsA relation.\r\n * @template T\r\n * @returns {Relation<T>} The created IsA relation.\r\n */\r\nexport function createIsARelation<T>(): Relation<T> {\r\n    return createBaseRelation<T>()\r\n}\r\n\r\n/**\r\n * Gets the singleton IsA instance.\r\n * @returns {Relation<any>} The global IsA relation instance.\r\n */\r\nexport function getIsA(): Relation<any> {\r\n    const GLOBAL_ISA = Symbol.for('bitecs-global-isa')\r\n    \r\n    if (!(globalThis as any)[GLOBAL_ISA]) {\r\n        (globalThis as any)[GLOBAL_ISA] = createIsARelation()\r\n    }\r\n    \r\n    return (globalThis as any)[GLOBAL_ISA]\r\n}\r\n\r\n/**\r\n * IsA relation.\r\n * @type {Relation<any>}\r\n */\r\nexport const IsA = getIsA()\r\n\r\n/**\r\n * Checks if a relation is a wildcard relation.\r\n * @param {any} relation - The relation to check.\r\n * @returns {boolean} True if the relation is a wildcard relation, false otherwise.\r\n */\r\nexport function isWildcard(relation: any): boolean {\r\n    if (!relation) return false\r\n    const symbols = Object.getOwnPropertySymbols(relation)\r\n    return symbols.includes($wildcard)\r\n}\r\n\r\n/**\r\n * Checks if a component is a relation.\r\n * @param {any} component - The component to check.\r\n * @returns {boolean} True if the component is a relation, false otherwise.\r\n */\r\nexport function isRelation(component: any): boolean {\r\n    if (!component) return false\r\n    const symbols = Object.getOwnPropertySymbols(component)\r\n    return symbols.includes($relationData)\r\n}\r\n", "import { entityExists, EntityId, getEntityComponents, Prefab } from './Entity'\r\nimport { queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query'\r\nimport { Query } from './Query'\r\nimport {\r\n\tIsA,\r\n\tPair,\r\n\tWildcard,\r\n\tgetRelationTargets,\r\n\t$relationData,\r\n\t$isPairComponent,\r\n\t$pairTarget,\r\n\t$relation\r\n} from './Relation'\r\nimport { createObservable, Observable } from './utils/Observer'\r\nimport { $internal, InternalWorld, World, WorldContext } from './World'\r\n\r\n/**\r\n * Represents a reference to a component.\r\n * @typedef {any} ComponentRef\r\n */\r\nexport type ComponentRef = any\r\n\r\n/**\r\n * Represents the data associated with a component.\r\n * @interface ComponentData\r\n * @property {number} id - The unique identifier for the component.\r\n * @property {number} generationId - The generation ID of the component.\r\n * @property {number} bitflag - The bitflag used for component masking.\r\n * @property {ComponentRef} ref - Reference to the component.\r\n * @property {Set<Query>} queries - Set of queries associated with the component.\r\n * @property {Observable} setObservable - Observable for component changes.\r\n */\r\nexport interface ComponentData {\r\n\tid: number\r\n\tgenerationId: number\r\n\tbitflag: number\r\n\tref: ComponentRef\r\n\tqueries: Set<Query>\r\n\tsetObservable: Observable\r\n\tgetObservable: Observable\r\n}\r\n\r\n/**\r\n * Registers a component with the world.\r\n * @param {World} world - The world object.\r\n * @param {ComponentRef} component - The component to register.\r\n * @returns {ComponentData} The registered component data.\r\n * @throws {Error} If the component is null or undefined.\r\n */\r\nexport const registerComponent = (world: World, component: ComponentRef) => {\r\n\tif (!component) {\r\n\t\tthrow new Error(`bitECS - Cannot register null or undefined component`)\r\n\t}\r\n\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst queries = new Set<Query>()\r\n\r\n\tconst data: ComponentData = {\r\n\t\tid: ctx.componentCount++,\r\n\t\tgenerationId: ctx.entityMasks.length - 1,\r\n\t\tbitflag: ctx.bitflag,\r\n\t\tref: component,\r\n\t\tqueries,\r\n\t\tsetObservable: createObservable(),\r\n\t\tgetObservable: createObservable(),\r\n\t}\r\n\r\n\tctx.componentMap.set(component, data)\r\n\r\n\tctx.bitflag *= 2\r\n\tif (ctx.bitflag >= 2 ** 31) {\r\n\t\tctx.bitflag = 1\r\n\t\tctx.entityMasks.push([])\r\n\t}\r\n\r\n\treturn data\r\n}\r\n\r\n/**\r\n * Registers multiple components with the world.\r\n * @param {World} world - The world object.\r\n * @param {ComponentRef[]} components - Array of components to register.\r\n */\r\nexport const registerComponents = (world: World, components: ComponentRef[]) => {\r\n\tcomponents.forEach((component) => registerComponent(world, component))\r\n}\r\n\r\n/**\r\n * Checks if an entity has a specific component.\r\n * @param {World} world - The world object.\r\n * @param {number} eid - The entity ID.\r\n * @param {ComponentRef} component - The component to check for.\r\n * @returns {boolean} True if the entity has the component, false otherwise.\r\n */\r\nexport const hasComponent = (world: World, eid: EntityId, component: ComponentRef): boolean => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst registeredComponent = ctx.componentMap.get(component)\r\n\tif (!registeredComponent) return false\r\n\r\n\tconst { generationId, bitflag } = registeredComponent\r\n\tconst mask = ctx.entityMasks[generationId][eid]\r\n\r\n\treturn (mask & bitflag) === bitflag\r\n}\r\n/**\r\n * Retrieves the data associated with a component for a specific entity.\r\n * @param {World} world - The world object.\r\n * @param {EntityId} eid - The entity ID.\r\n * @param {ComponentRef} component - The component to retrieve data for.\r\n * @returns {any} The component data, or undefined if the component is not found or the entity doesn't have the component.\r\n */\r\nexport const getComponentData = (world: World, eid: EntityId, component: ComponentRef): any => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst componentData = ctx.componentMap.get(component)\r\n\r\n\tif (!componentData) {\r\n\t\treturn undefined\r\n\t}\r\n\r\n\tif (!hasComponent(world, eid, component)) {\r\n\t\treturn undefined\r\n\t}\r\n\r\n\t// Notify observers that this component is being accessed\r\n\treturn componentData.getObservable.notify(eid)\r\n}\r\n\r\n/**\r\n * Helper function to set component data.\r\n * @param {ComponentRef} component - The component to set.\r\n * @param {any} data - The data to set for the component.\r\n * @returns {{ component: ComponentRef, data: any }} An object containing the component and its data.\r\n */\r\nexport const set = <T extends ComponentRef>(component: T, data: any): { component: T, data: any } => ({\r\n\tcomponent,\r\n\tdata\r\n})\r\n\r\n/**\r\n * Recursvely inherits components from one entity to another.\r\n * @param {World} world - The world object.\r\n * @param {number} baseEid - The ID of the entity inheriting components.\r\n * @param {number} inheritedEid - The ID of the entity being inherited from.\r\n * @param {boolean} isFirstSuper - Whether this is the first super in the inheritance chain.\r\n */\r\nconst recursivelyInherit = (ctx: WorldContext, world: World, baseEid: EntityId, inheritedEid: EntityId, visited = new Set<EntityId>()): void => {\r\n\t// Guard against circular inheritance\r\n\tif (visited.has(inheritedEid)) return\r\n\tvisited.add(inheritedEid)\r\n\t\r\n\t// Add IsA relation first\r\n\taddComponent(world, baseEid, IsA(inheritedEid))\r\n\t\r\n\t// Copy components and their data from this level\r\n\t// This needs to happen before recursing to ancestors so closer ancestors take precedence\r\n\tfor (const component of getEntityComponents(world, inheritedEid)) {\r\n\t\t// TODO: inherit reference vs copy\r\n\t\tif (component === Prefab) continue\r\n\t\t\r\n\t\t// Only add component if entity doesn't already have it\r\n\t\t// This ensures closer ancestors take precedence\r\n\t\tif (!hasComponent(world, baseEid, component)) {\r\n\t\t\taddComponent(world, baseEid, component)\r\n\t\t\t\r\n\t\t\tconst componentData = ctx.componentMap.get(component)\r\n\t\t\tif (componentData?.setObservable) {\r\n\t\t\t\tconst data = getComponentData(world, inheritedEid, component)\r\n\t\t\t\tcomponentData.setObservable.notify(baseEid, data)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Then recursively inherit from ancestors\r\n\t// This ensures more distant ancestors don't override closer ones\r\n\tfor (const parentEid of getRelationTargets(world, inheritedEid, IsA)) {\r\n\t\trecursivelyInherit(ctx, world, baseEid, parentEid, visited)\r\n\t}\r\n}\r\n\r\n/**\r\n * Represents a component with data to be set on an entity.\r\n */\r\ntype ComponentSetter<T = any> = { component: ComponentRef; data: T }\r\n\r\n/**\r\n * Adds one or more components to an entity.\r\n * @param {World} world - The world object.\r\n * @param {EntityId} eid - The entity ID.\r\n * @param {...(ComponentRef | ComponentSetter)} components - Components to add or set.\r\n * @throws {Error} If the entity does not exist in the world.\r\n */\r\nexport const addComponent = (world: World, eid: EntityId, ...components: (ComponentRef | ComponentSetter)[]): void => {\r\n\tif (!entityExists(world, eid)) {\r\n\t\tthrow new Error(`Cannot add component - entity ${eid} does not exist in the world.`)\r\n\t}\r\n\t\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\t\r\n\tcomponents.forEach(componentOrSet => {\r\n\t\tconst component = 'component' in componentOrSet ? componentOrSet.component : componentOrSet\r\n\t\tconst data = 'data' in componentOrSet ? componentOrSet.data : undefined\r\n\r\n\t\tif (!ctx.componentMap.has(component)) registerComponent(world, component)\r\n\r\n\t\tconst componentData = ctx.componentMap.get(component)!\r\n\t\tif (data !== undefined) {\r\n\t\t\tcomponentData.setObservable.notify(eid, data)\r\n\t\t}\r\n\r\n\t\tif (hasComponent(world, eid, component)) return\r\n\r\n\t\tconst { generationId, bitflag, queries } = componentData\r\n\r\n\t\tctx.entityMasks[generationId][eid] |= bitflag\r\n\r\n\t\tif (!hasComponent(world, eid, Prefab)) {\r\n\t\t\tqueries.forEach((queryData: Query) => {\r\n\t\t\t\tqueryData.toRemove.remove(eid)\r\n\t\t\t\tconst match = queryCheckEntity(world, queryData, eid)\r\n\r\n\t\t\t\tif (match) queryAddEntity(queryData, eid)\r\n\t\t\t\telse queryRemoveEntity(world, queryData, eid)\r\n\t\t\t})\r\n\t\t}\r\n\t\tctx.entityComponents.get(eid)!.add(component)\r\n\t\tif (component[$isPairComponent]) {\r\n\t\t\tconst relation = component[$relation]\r\n\t\t\tconst target = component[$pairTarget]\r\n\r\n\t\t\t// Add both Wildcard pairs for relation and target\r\n\t\t\taddComponent(world, eid, Pair(relation, Wildcard))\r\n\t\t\taddComponent(world, eid, Pair(Wildcard, target))\r\n\r\n\t\t\t// For non-Wildcard targets, add Wildcard pair to track relation targets\r\n\t\t\tif (typeof target === 'number') {\r\n\t\t\t\t// Add Wildcard pair for target being a relation target\r\n\t\t\t\taddComponent(world, target, Pair(Wildcard, eid))\r\n\t\t\t\taddComponent(world, target, Pair(Wildcard, relation))\r\n\t\t\t\t// Track entities with relations for autoRemoveSubject\r\n\t\t\t\tctx.entitiesWithRelations.add(target)\r\n\t\t\t\tctx.entitiesWithRelations.add(eid)\r\n\t\t\t}\r\n\r\n\t\t\t// add target to a set to make autoRemoveSubject checks faster\r\n\t\t\tctx.entitiesWithRelations.add(target)\r\n\r\n\t\t\tconst relationData = relation[$relationData]\r\n\t\t\tif (relationData.exclusiveRelation === true && target !== Wildcard) {\r\n\t\t\t\tconst oldTarget = getRelationTargets(world, eid, relation)[0]\r\n\t\t\t\tif (oldTarget !== undefined && oldTarget !== null && oldTarget !== target) {\r\n\t\t\t\t\tremoveComponent(world, eid, relation(oldTarget))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (relation === IsA) {\r\n\t\t\t\tconst inheritedTargets = getRelationTargets(world, eid, IsA)\r\n\t\t\t\tfor (const inherited of inheritedTargets) {\r\n\t\t\t\t\trecursivelyInherit(ctx, world, eid, inherited)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n}\r\n\r\n/**\r\n * Alias for addComponent.\r\n */\r\nexport const addComponents = addComponent\r\n\r\n/**\r\n * Removes one or more components from an entity.\r\n * @param {World} world - The world object.\r\n * @param {number} eid - The entity ID.\r\n * @param {...ComponentRef} components - Components to remove.\r\n * @throws {Error} If the entity does not exist in the world.\r\n */\r\nexport const removeComponent = (world: World, eid: EntityId, ...components: ComponentRef[]) => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tif (!entityExists(world, eid)) {\r\n\t\tthrow new Error(`Cannot remove component - entity ${eid} does not exist in the world.`)\r\n\t}\r\n\r\n\tcomponents.forEach(component => {\r\n\t\tif (!hasComponent(world, eid, component)) return\r\n\r\n\t\tconst componentNode = ctx.componentMap.get(component)!\r\n\t\tconst { generationId, bitflag, queries } = componentNode\r\n\r\n\t\tctx.entityMasks[generationId][eid] &= ~bitflag\r\n\r\n\t\tqueries.forEach((queryData: Query) => {\r\n\t\t\tqueryData.toRemove.remove(eid)\r\n\r\n\t\t\tconst match = queryCheckEntity(world, queryData, eid)\r\n\r\n\t\t\tif (match) queryAddEntity(queryData, eid)\r\n\t\t\telse queryRemoveEntity(world, queryData, eid)\r\n\t\t})\r\n\r\n\t\tctx.entityComponents.get(eid)!.delete(component)\r\n\r\n\t\tif (component[$isPairComponent]) {\r\n\t\t\tconst target = component[$pairTarget]\r\n\t\t\tremoveComponent(world, eid, Pair(Wildcard, target))\r\n\r\n\t\t\tconst relation = component[$relation]\r\n\t\t\tconst otherTargets = getRelationTargets(world, eid, relation)\r\n\t\t\tif (otherTargets.length === 0) {\r\n\t\t\t\tremoveComponent(world, eid, Pair(relation, Wildcard))\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n}\r\n\r\n/**\r\n * Alias for removeComponent.\r\n */\r\nexport const removeComponents = removeComponent\r\n", "import { addComponent, removeComponent } from './Component'\r\nimport {\r\n\tinnerQuery,\r\n\tqueryAddEntity,\r\n\tqueryCheckEntity,\r\n\tqueryRemoveEntity,\r\n} from './Query'\r\nimport { Pair, Wildcard, $isPairComponent, $relation, $pairTarget, $relationData } from './Relation'\r\nimport { World } from \"./World\"\r\nimport { InternalWorld } from './World'\r\nimport { addEntityId, isEntityIdAlive, removeEntityId } from './EntityIndex'\r\nimport { $internal } from './World'\r\nimport { ComponentRef } from './Component'\r\n\r\nexport type EntityId = number\r\n\r\nexport const Prefab = {}\r\nexport const addPrefab = (world: World): EntityId => {\r\n\tconst eid = addEntity(world)\r\n\r\n\taddComponent(world, eid, Prefab)\r\n\r\n\treturn eid\r\n}\r\n\r\n/**\r\n * Adds a new entity to the specified world.\r\n *\r\n * @param {World} world\r\n * @returns {number} eid\r\n */\r\nexport const addEntity = (world: World): EntityId => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tconst eid = addEntityId(ctx.entityIndex)\r\n\r\n\tctx.notQueries.forEach((q) => {\r\n\t\tconst match = queryCheckEntity(world, q, eid)\r\n\t\tif (match) queryAddEntity(q, eid)\r\n\t})\r\n\r\n\tctx.entityComponents.set(eid, new Set())\r\n\r\n\treturn eid\r\n}\r\n\r\n/**\r\n * Removes an existing entity from the specified world.\r\n *\r\n * @param {World} world\r\n * @param {number} eid\r\n */\r\n\r\nexport const removeEntity = (world: World, eid: EntityId) => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\t// Check if entity is already removed\r\n\tif (!isEntityIdAlive(ctx.entityIndex, eid)) return\r\n\r\n\t// Remove relation components from entities that have a relation to this one, breadth-first\r\n\t// e.g. addComponent(world, child, ChildOf(parent))\r\n\t// when parent is removed, we need to remove the child\r\n\tconst removalQueue = [eid]\r\n\tconst processedEntities = new Set()\r\n    while (removalQueue.length > 0) {\r\n        \r\n\t\tconst currentEid = removalQueue.shift()!\r\n        if (processedEntities.has(currentEid)) continue\r\n        processedEntities.add(currentEid)\r\n\r\n        const componentRemovalQueue = []\r\n\r\n\t\tif (ctx.entitiesWithRelations.has(currentEid)) {\r\n\t\t\tfor (const subject of innerQuery(world, [Wildcard(currentEid)])) {\r\n\t\t\t\tif (!entityExists(world, subject)) {\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const component of ctx.entityComponents.get(subject)!) {\r\n\t\t\t\t\tif (!component[$isPairComponent]) {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst relation = component[$relation]\r\n\t\t\t\t\tconst relationData = relation[$relationData]\r\n\t\t\t\t\tcomponentRemovalQueue.push(() => removeComponent(world, subject, Pair(Wildcard, currentEid)))\r\n\r\n\t\t\t\t\tif (component[$pairTarget] === currentEid) {\r\n\t\t\t\t\t\tcomponentRemovalQueue.push(() => removeComponent(world, subject, component))\r\n\t\t\t\t\t\tif (relationData.autoRemoveSubject) {\r\n\t\t\t\t\t\t\tremovalQueue.push(subject)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (relationData.onTargetRemoved) {\r\n\t\t\t\t\t\t\tcomponentRemovalQueue.push(() => relationData.onTargetRemoved(world, subject, currentEid))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tctx.entitiesWithRelations.delete(currentEid)\r\n\t\t}\r\n\r\n        for (const removeOperation of componentRemovalQueue) {\r\n            removeOperation()\r\n        }\r\n\r\n\t\tfor (const eid of removalQueue) {\r\n\t\t\tremoveEntity(world, eid)\r\n\t\t}\r\n\r\n\t\t// Remove entity from all queries\r\n\t\tfor (const query of ctx.queries) {\r\n\t\t\tqueryRemoveEntity(world, query, currentEid)\r\n\t\t}\r\n\r\n\t\t// Free the entity ID\r\n\t\tremoveEntityId(ctx.entityIndex, currentEid)\r\n\r\n\t\t// Remove all entity state from world\r\n\t\tctx.entityComponents.delete(currentEid)\r\n\r\n\t\t// Clear entity bitmasks\r\n\t\tfor (let i = 0; i < ctx.entityMasks.length; i++) {\r\n\t\t\tctx.entityMasks[i][currentEid] = 0\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *  Returns an array of components that an entity possesses.\r\n *\r\n * @param {*} world\r\n * @param {*} eid\r\n */\r\nexport const getEntityComponents = (world: World, eid: EntityId): ComponentRef[] => {\r\n\tconst ctx = (world as InternalWorld)[$internal]\r\n\tif (eid === undefined) throw new Error(`getEntityComponents: entity id is undefined.`)\r\n\tif (!isEntityIdAlive(ctx.entityIndex, eid))\r\n\t\tthrow new Error(`getEntityComponents: entity ${eid} does not exist in the world.`)\r\n\treturn Array.from(ctx.entityComponents.get(eid)!)\r\n}\r\n\r\n/**\r\n * Checks the existence of an entity in a world\r\n *\r\n * @param {World} world\r\n * @param {number} eid\r\n */\r\nexport const entityExists = (world: World, eid: EntityId) => isEntityIdAlive((world as InternalWorld)[$internal].entityIndex, eid)\r\n", "type Func = (...args: any) => any\r\nexport const pipe = <T extends Func, U extends Func, R extends Func>\r\n    (...functions: [T, ...U[], R]): ((...args: Parameters<T>) => ReturnType<R>) => {\r\n    return (...args: Parameters<T>): ReturnType<R> => \r\n        functions.reduce((result, fn) => [fn(...result)], args as any)[0]\r\n}\r\n"],
  "mappings": "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",
  "names": ["query", "query", "query", "onRemove", "eid", "query"]
}
